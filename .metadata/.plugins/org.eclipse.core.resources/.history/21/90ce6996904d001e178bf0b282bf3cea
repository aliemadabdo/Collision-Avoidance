/*
 * main.c
 *
 *  Created on: Sep 6, 2023
 *      Author: Ali Emad | Nada Atia | Amr Ramadan
 */

/* AVR libraries */
#include <util/delay.h>
#include <stdbool.h>
/* PreImplemented Drivers */
#include "LIB/STD_Types.h"
#include "LIB/BIT_Math.h"
#include "HAL/LCD/LCD.h"

/* Implemented Drivers */
#include "HAL/DCMotor/DCMotor.h"
#include "HAL/Ultrasonic/Ultrasonic.h"
#include "LIB/RTOS/RTOS.h"

volatile u32 distance_cm = 0;
volatile u32 speed = 0;

enum directions {
	FORWARD, BACKWARD, ROT_RIGHT, ROT_LEFT, STOP
}direction;

void Task_Ultrasonic (void);
void Task_Motors (void);
void Task_LCD (void);

void L0(void);
void L1(void);
void L2(void);

#define DEBUG true

int main(void){

	RTOS_voidInit(TIM0_PRESCALER_8, 1);
	LCD_voidInit();
	ULTRASONIC_voidInit();
	DCMotor_voidInit();
	/****************DEBUGGING*/
	if (DEBUG){
		RTOS_create_task(
				"LED_FAST",
				0,                   //PRIORITY
				60,				     //PIRODICITY
				&L0);

		RTOS_create_task(
				"LED_MED",
				1,                   //PRIORITY
				200,                 //PIRODICITY
				&L1);

		RTOS_create_task(
				"LED_SLOW",
				2,                  //PRIORITY
				500,                //PIRODICITY
				&L2);


	}
	RTOS_create_task(
			"ULTRASONIC",
			0,                   //PRIORITY
			60,				     //PIRODICITY
			&Task_Ultrasonic);

	RTOS_create_task(
			"MOTORS",
			1,                   //PRIORITY
			200,                 //PIRODICITY
			&Task_Motors);

	RTOS_create_task(
			"LCD",
			2,                  //PRIORITY
			500,                //PIRODICITY
			&Task_LCD);

	while(1);

	return 0;
}

void Task_Ultrasonic (void)
{
	u32 distance_cm=0;
	ULTRASONIC_voidStartTrigger();

	distance_cm =ULTRASONIC_voidReturnDistanceCm();
}

void Task_Motors(void){
	if(distance_cm < 1){ 				//Deadlock

		DCMotor_voidBackward(LOW_SPEED);
		direction = BACKWARD;  speed = LOW_SPEED;
		_delay_ms(100);
		DCMotor_voidRotRight();
		direction = ROT_RIGHT;  speed = MED_SPEED;
		_delay_ms(100);
		DCMotor_voidForward(LOW_SPEED);
		direction = FORWARD;  speed = LOW_SPEED;
	}
	else if(distance_cm < 10 ){ 		//About to crash!!

		DCMotor_voidStop();
		direction = STOP;  speed = 0;
		_delay_ms(100);
		DCMotor_voidRotRight();
		direction = ROT_RIGHT;  speed = MED_SPEED;
		_delay_ms(100);
		DCMotor_voidForward(LOW_SPEED);
		direction = FORWARD;  speed = LOW_SPEED;

	}
	else if(distance_cm < 50 ){ 		// traffic
		DCMotor_voidForward(LOW_SPEED);
		direction = FORWARD;  speed = LOW_SPEED;
	}

	else if(distance_cm < 100 ){ 		// less traffic
		DCMotor_voidForward(MED_SPEED);
		direction = FORWARD;  speed = MED_SPEED;
	}
	else if(distance_cm < 250 ){ 		// 3la elba7r
		DCMotor_voidForward(HIGH_SPEED);
		direction = FORWARD;  speed = HIGH_SPEED;
	}
	else if(distance_cm < 500 ){ 	// cairo alex desert road
		DCMotor_voidForward(MAX_SPEED);
		direction = FORWARD;  speed = MAX_SPEED;

	}
}

void Task_LCD (void)
{
	LCD_voidSendCommand(CLEAR);

	if (distance_cm == '0')
	{
		LCD_voidSetLocation(LCD_LINE1,0);
		LCD_voidSendString("FORWARD:");
		LCD_voidSendNumber(speed);

		LCD_voidSetLocation(LCD_LINE2,0);
		LCD_voidSendString("out of range:");
	}
	else
	{
		LCD_voidSetLocation(LCD_LINE1,0);

		switch(direction){
		case FORWARD:
			LCD_voidSendString("FORWARD:"); break;
		case BACKWARD:
			LCD_voidSendString("BACKWARD:"); break;
		case ROT_RIGHT:
			LCD_voidSendString("ROT_RIGHT:"); break;
		case ROT_LEFT:
			LCD_voidSendString("ROT_LEFT:"); break;
		default:
			LCD_voidSendString("STOP:");
		}
		LCD_voidSendNumber(speed);

		LCD_voidSetLocation(LCD_LINE2,0);
		LCD_voidSendString("distance:");
		LCD_voidSendNumber(distance_cm);
	}
	//        _delay_ms(1000);
}

if (DEBUG){
	void L0(void){
		TGL_BIT(POARTA, 0);
	}

	void L1(void){
		TGL_BIT(POARTA, 1);
	}
	void L2(void){
		TGL_BIT(POARTA, 2);
	}
}
