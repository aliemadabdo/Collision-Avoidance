
Collision_Avoidance.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  00003b52  00003be6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cb  008001ca  008001ca  00003d50  2**0
                  ALLOC
  3 .stab         00003714  00000000  00000000  00003d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bbd  00000000  00000000  00007464  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009021  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  000091c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  000093b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000b7bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000cb34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000dd0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000decc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000e1bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eb8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 02 10 	jmp	0x2004	; 0x2004 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__vector_10>
      2c:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 66 19 	call	0x32cc	; 0x32cc <main>
      8a:	0c 94 a7 1d 	jmp	0x3b4e	; 0x3b4e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 60 1d 	jmp	0x3ac0	; 0x3ac0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac eb       	ldi	r26, 0xBC	; 188
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7c 1d 	jmp	0x3af8	; 0x3af8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 88 1d 	jmp	0x3b10	; 0x3b10 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 88 1d 	jmp	0x3b10	; 0x3b10 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 60 1d 	jmp	0x3ac0	; 0x3ac0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c eb       	ldi	r24, 0xBC	; 188
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7c 1d 	jmp	0x3af8	; 0x3af8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 68 1d 	jmp	0x3ad0	; 0x3ad0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c eb       	ldi	r22, 0xBC	; 188
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 84 1d 	jmp	0x3b08	; 0x3b08 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 88 1d 	jmp	0x3b10	; 0x3b10 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 88 1d 	jmp	0x3b10	; 0x3b10 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 88 1d 	jmp	0x3b10	; 0x3b10 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 85 1d 	jmp	0x3b0a	; 0x3b0a <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 70 1d 	jmp	0x3ae0	; 0x3ae0 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 8c 1d 	jmp	0x3b18	; 0x3b18 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	ec 53       	subi	r30, 0x3C	; 60
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <TIM0_voidInit>:
/* Global pointer to function */
void (*TIM0_pfTIM0Ovf)(void);
void (*TIM0_pfTIM0Cmp)(void);


void TIM0_voidInit	(void){
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, WGM01);
#elif TIM0_MODE == PWM_PHASE
	CLR_BIT(TCCR0, WGM01);
	SET_BIT(TCCR0, WGM00);
#else
	SET_BIT(TCCR0, WGM00);
     e00:	a3 e5       	ldi	r26, 0x53	; 83
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e3 e5       	ldi	r30, 0x53	; 83
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	80 64       	ori	r24, 0x40	; 64
     e0c:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
     e0e:	a3 e5       	ldi	r26, 0x53	; 83
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e3 e5       	ldi	r30, 0x53	; 83
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	88 60       	ori	r24, 0x08	; 8
     e1a:	8c 93       	st	X, r24
#endif

}
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <TIM0_voidSetPreValue>:


void TIM0_voidSetPreValue	(u8 Copy_u8CounterStartVal){
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	0f 92       	push	r0
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	89 83       	std	Y+1, r24	; 0x01
	/* set timer start value */
	TCNT0 = Copy_u8CounterStartVal;
     e2e:	e2 e5       	ldi	r30, 0x52	; 82
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	80 83       	st	Z, r24

}
     e36:	0f 90       	pop	r0
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <TIM0_voidTimerStart>:


void TIM0_voidTimerStart	(u8 Copy_u8Prescaler){
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	0f 92       	push	r0
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	89 83       	std	Y+1, r24	; 0x01
	/* Set prescaler */
	TCCR0 &= 0b11111000;
     e4a:	a3 e5       	ldi	r26, 0x53	; 83
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e3 e5       	ldi	r30, 0x53	; 83
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	88 7f       	andi	r24, 0xF8	; 248
     e56:	8c 93       	st	X, r24
	TCCR0 |= Copy_u8Prescaler;
     e58:	a3 e5       	ldi	r26, 0x53	; 83
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e3 e5       	ldi	r30, 0x53	; 83
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	90 81       	ld	r25, Z
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	89 2b       	or	r24, r25
     e66:	8c 93       	st	X, r24

}
     e68:	0f 90       	pop	r0
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <TIM0_voidOvrINTControl>:


void TIM0_voidOvrINTControl (u8 Copy_u8InterruptConl){
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	0f 92       	push	r0
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8InterruptConl == TIM0_TIN_EABLE)
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	41 f4       	brne	.+16     	; 0xe92 <TIM0_voidOvrINTControl+0x22>
		{SET_BIT(TIMSK, TOIE0);}
     e82:	a9 e5       	ldi	r26, 0x59	; 89
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e9 e5       	ldi	r30, 0x59	; 89
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	81 60       	ori	r24, 0x01	; 1
     e8e:	8c 93       	st	X, r24
     e90:	07 c0       	rjmp	.+14     	; 0xea0 <TIM0_voidOvrINTControl+0x30>
	else
		{CLR_BIT(TIMSK, TOIE0);}
     e92:	a9 e5       	ldi	r26, 0x59	; 89
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e9 e5       	ldi	r30, 0x59	; 89
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	8e 7f       	andi	r24, 0xFE	; 254
     e9e:	8c 93       	st	X, r24

}
     ea0:	0f 90       	pop	r0
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <TIM0_voidSetCompareMat>:


void TIM0_voidSetCompareMat (u8 Copy_u8CmpMatVal, u8 Copy_u8OC0PinAction){
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	00 d0       	rcall	.+0      	; 0xeae <TIM0_voidSetCompareMat+0x6>
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <TIM0_voidSetCompareMat+0x8>
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8OC0PinAction)
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	3c 83       	std	Y+4, r19	; 0x04
     ec0:	2b 83       	std	Y+3, r18	; 0x03
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	9c 81       	ldd	r25, Y+4	; 0x04
     ec6:	82 30       	cpi	r24, 0x02	; 2
     ec8:	91 05       	cpc	r25, r1
     eca:	c9 f0       	breq	.+50     	; 0xefe <TIM0_voidSetCompareMat+0x56>
     ecc:	2b 81       	ldd	r18, Y+3	; 0x03
     ece:	3c 81       	ldd	r19, Y+4	; 0x04
     ed0:	23 30       	cpi	r18, 0x03	; 3
     ed2:	31 05       	cpc	r19, r1
     ed4:	19 f1       	breq	.+70     	; 0xf1c <TIM0_voidSetCompareMat+0x74>
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	9c 81       	ldd	r25, Y+4	; 0x04
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	91 05       	cpc	r25, r1
     ede:	69 f5       	brne	.+90     	; 0xf3a <TIM0_voidSetCompareMat+0x92>
	{
		case TIM0_OC0_TOGGLE_PIN :
			SET_BIT(TCCR0, COM00);
     ee0:	a3 e5       	ldi	r26, 0x53	; 83
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e3 e5       	ldi	r30, 0x53	; 83
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	80 61       	ori	r24, 0x10	; 16
     eec:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM01);
     eee:	a3 e5       	ldi	r26, 0x53	; 83
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e3 e5       	ldi	r30, 0x53	; 83
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	8f 7d       	andi	r24, 0xDF	; 223
     efa:	8c 93       	st	X, r24
     efc:	2c c0       	rjmp	.+88     	; 0xf56 <TIM0_voidSetCompareMat+0xae>
			break;

		case TIM0_OC0_CLEAR_PIN  :
			SET_BIT(TCCR0, COM01);
     efe:	a3 e5       	ldi	r26, 0x53	; 83
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e3 e5       	ldi	r30, 0x53	; 83
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	80 62       	ori	r24, 0x20	; 32
     f0a:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM00);
     f0c:	a3 e5       	ldi	r26, 0x53	; 83
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e3 e5       	ldi	r30, 0x53	; 83
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	8f 7e       	andi	r24, 0xEF	; 239
     f18:	8c 93       	st	X, r24
     f1a:	1d c0       	rjmp	.+58     	; 0xf56 <TIM0_voidSetCompareMat+0xae>
			break;

		case TIM0_OC0_SET_PIN    :
			SET_BIT(TCCR0, COM00);
     f1c:	a3 e5       	ldi	r26, 0x53	; 83
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e3 e5       	ldi	r30, 0x53	; 83
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	80 61       	ori	r24, 0x10	; 16
     f28:	8c 93       	st	X, r24
			SET_BIT(TCCR0, COM01);
     f2a:	a3 e5       	ldi	r26, 0x53	; 83
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e3 e5       	ldi	r30, 0x53	; 83
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 62       	ori	r24, 0x20	; 32
     f36:	8c 93       	st	X, r24
     f38:	0e c0       	rjmp	.+28     	; 0xf56 <TIM0_voidSetCompareMat+0xae>
			break;

		default				     :
			CLR_BIT(TCCR0, COM00);
     f3a:	a3 e5       	ldi	r26, 0x53	; 83
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e3 e5       	ldi	r30, 0x53	; 83
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	8f 7e       	andi	r24, 0xEF	; 239
     f46:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM01);
     f48:	a3 e5       	ldi	r26, 0x53	; 83
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e3 e5       	ldi	r30, 0x53	; 83
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	8f 7d       	andi	r24, 0xDF	; 223
     f54:	8c 93       	st	X, r24
			break;
	}

	/* Set Compare value */
	OCR0 = Copy_u8CmpMatVal;
     f56:	ec e5       	ldi	r30, 0x5C	; 92
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	80 83       	st	Z, r24

}
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <TIM0_voidPWMGenerator>:


void TIM0_voidPWMGenerator  (u8 Copy_u8DutyCycle, u8 Copy_u8OC0PinAction){
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	00 d0       	rcall	.+0      	; 0xf76 <TIM0_voidPWMGenerator+0xa>
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	89 83       	std	Y+1, r24	; 0x01
     f7c:	6a 83       	std	Y+2, r22	; 0x02

#if TIM0_MODE == FAST_PWM
	if(Copy_u8OC0PinAction == TIM0_OC0_SET_CMP_CLR_OVF){
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	09 f0       	breq	.+2      	; 0xf86 <TIM0_voidPWMGenerator+0x1a>
     f84:	44 c0       	rjmp	.+136    	; 0x100e <TIM0_voidPWMGenerator+0xa2>
		SET_BIT(TCCR0, COM00);
     f86:	a3 e5       	ldi	r26, 0x53	; 83
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e3 e5       	ldi	r30, 0x53	; 83
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	80 61       	ori	r24, 0x10	; 16
     f92:	8c 93       	st	X, r24
		SET_BIT(TCCR0, COM01);
     f94:	a3 e5       	ldi	r26, 0x53	; 83
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e3 e5       	ldi	r30, 0x53	; 83
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 62       	ori	r24, 0x20	; 32
     fa0:	8c 93       	st	X, r24
		OCR0 = (256 - ((Copy_u8DutyCycle/100.0)*256));
     fa2:	0c e5       	ldi	r16, 0x5C	; 92
     fa4:	10 e0       	ldi	r17, 0x00	; 0
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	88 2f       	mov	r24, r24
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	aa 27       	eor	r26, r26
     fae:	97 fd       	sbrc	r25, 7
     fb0:	a0 95       	com	r26
     fb2:	ba 2f       	mov	r27, r26
     fb4:	bc 01       	movw	r22, r24
     fb6:	cd 01       	movw	r24, r26
     fb8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	bc 01       	movw	r22, r24
     fc2:	cd 01       	movw	r24, r26
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	48 ec       	ldi	r20, 0xC8	; 200
     fca:	52 e4       	ldi	r21, 0x42	; 66
     fcc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	bc 01       	movw	r22, r24
     fd6:	cd 01       	movw	r24, r26
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e8       	ldi	r20, 0x80	; 128
     fde:	53 ec       	ldi	r21, 0xC3	; 195
     fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	bc 01       	movw	r22, r24
     fea:	cd 01       	movw	r24, r26
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e8       	ldi	r20, 0x80	; 128
     ff2:	53 e4       	ldi	r21, 0x43	; 67
     ff4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	f8 01       	movw	r30, r16
    100a:	80 83       	st	Z, r24
    100c:	39 c0       	rjmp	.+114    	; 0x1080 <TIM0_voidPWMGenerator+0x114>
	}
	else{
		SET_BIT(TCCR0, COM01);
    100e:	a3 e5       	ldi	r26, 0x53	; 83
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e3 e5       	ldi	r30, 0x53	; 83
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	80 62       	ori	r24, 0x20	; 32
    101a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, COM00);
    101c:	a3 e5       	ldi	r26, 0x53	; 83
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e3 e5       	ldi	r30, 0x53	; 83
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	8f 7e       	andi	r24, 0xEF	; 239
    1028:	8c 93       	st	X, r24
		OCR0 = ((Copy_u8DutyCycle/100.0)*256);
    102a:	0c e5       	ldi	r16, 0x5C	; 92
    102c:	10 e0       	ldi	r17, 0x00	; 0
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	aa 27       	eor	r26, r26
    1036:	97 fd       	sbrc	r25, 7
    1038:	a0 95       	com	r26
    103a:	ba 2f       	mov	r27, r26
    103c:	bc 01       	movw	r22, r24
    103e:	cd 01       	movw	r24, r26
    1040:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	bc 01       	movw	r22, r24
    104a:	cd 01       	movw	r24, r26
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	48 ec       	ldi	r20, 0xC8	; 200
    1052:	52 e4       	ldi	r21, 0x42	; 66
    1054:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e8       	ldi	r20, 0x80	; 128
    1066:	53 e4       	ldi	r21, 0x43	; 67
    1068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	f8 01       	movw	r30, r16
    107e:	80 83       	st	Z, r24
	}

#endif


}
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	08 95       	ret

0000108e <TIM0_voidSetCmpValue>:




void TIM0_voidSetCmpValue	(u8 Copy_u8CmpMatVal){
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	0f 92       	push	r0
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	89 83       	std	Y+1, r24	; 0x01

	/* Set Compare value */
	OCR0 = Copy_u8CmpMatVal;
    109a:	ec e5       	ldi	r30, 0x5C	; 92
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	80 83       	st	Z, r24

}
    10a2:	0f 90       	pop	r0
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <TIM0_voidCmpINTControl>:


void TIM0_voidCmpINTControl (u8 Copy_u8InterruptConl){
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	0f 92       	push	r0
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8InterruptConl == TIM0_TIN_EABLE)
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	41 f4       	brne	.+16     	; 0x10cc <TIM0_voidCmpINTControl+0x22>
		{SET_BIT(TIMSK, OCIE0);}
    10bc:	a9 e5       	ldi	r26, 0x59	; 89
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e9 e5       	ldi	r30, 0x59	; 89
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	82 60       	ori	r24, 0x02	; 2
    10c8:	8c 93       	st	X, r24
    10ca:	07 c0       	rjmp	.+14     	; 0x10da <TIM0_voidCmpINTControl+0x30>
	else
		{CLR_BIT(TIMSK, OCIE0);}
    10cc:	a9 e5       	ldi	r26, 0x59	; 89
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e9 e5       	ldi	r30, 0x59	; 89
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	8d 7f       	andi	r24, 0xFD	; 253
    10d8:	8c 93       	st	X, r24

}
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <TIM0_voidTimerStop>:


void TIM0_voidTimerStop		(void){
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62

	TCCR0 &= 0b11111000;
    10ea:	a3 e5       	ldi	r26, 0x53	; 83
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e3 e5       	ldi	r30, 0x53	; 83
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	88 7f       	andi	r24, 0xF8	; 248
    10f6:	8c 93       	st	X, r24

}
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <TIM0_voidOvfCallback>:


void TIM0_voidOvfCallback   ( void (*Copy_pfTIM0Ovf)(void) ){
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	00 d0       	rcall	.+0      	; 0x1104 <TIM0_voidOvfCallback+0x6>
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	9a 83       	std	Y+2, r25	; 0x02
    110a:	89 83       	std	Y+1, r24	; 0x01

	TIM0_pfTIM0Ovf = Copy_pfTIM0Ovf;
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	9a 81       	ldd	r25, Y+2	; 0x02
    1110:	90 93 db 01 	sts	0x01DB, r25
    1114:	80 93 da 01 	sts	0x01DA, r24
}
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <TIM0_voidCmpCallback>:


void TIM0_voidCmpCallback   ( void (*Copy_pfTIM0Cmp)(void) ){
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	00 d0       	rcall	.+0      	; 0x1128 <TIM0_voidCmpCallback+0x6>
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	9a 83       	std	Y+2, r25	; 0x02
    112e:	89 83       	std	Y+1, r24	; 0x01

	TIM0_pfTIM0Cmp = Copy_pfTIM0Cmp;
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	9a 81       	ldd	r25, Y+2	; 0x02
    1134:	90 93 d9 01 	sts	0x01D9, r25
    1138:	80 93 d8 01 	sts	0x01D8, r24

}
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <__vector_11>:

//This way, you can use different functions for different events without changing the ISR code.
ISR(TIMER0_OVF_vect){
    1146:	1f 92       	push	r1
    1148:	0f 92       	push	r0
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	0f 92       	push	r0
    114e:	11 24       	eor	r1, r1
    1150:	2f 93       	push	r18
    1152:	3f 93       	push	r19
    1154:	4f 93       	push	r20
    1156:	5f 93       	push	r21
    1158:	6f 93       	push	r22
    115a:	7f 93       	push	r23
    115c:	8f 93       	push	r24
    115e:	9f 93       	push	r25
    1160:	af 93       	push	r26
    1162:	bf 93       	push	r27
    1164:	ef 93       	push	r30
    1166:	ff 93       	push	r31
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62

	TIM0_pfTIM0Ovf();
    1170:	e0 91 da 01 	lds	r30, 0x01DA
    1174:	f0 91 db 01 	lds	r31, 0x01DB
    1178:	09 95       	icall
}
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	ff 91       	pop	r31
    1180:	ef 91       	pop	r30
    1182:	bf 91       	pop	r27
    1184:	af 91       	pop	r26
    1186:	9f 91       	pop	r25
    1188:	8f 91       	pop	r24
    118a:	7f 91       	pop	r23
    118c:	6f 91       	pop	r22
    118e:	5f 91       	pop	r21
    1190:	4f 91       	pop	r20
    1192:	3f 91       	pop	r19
    1194:	2f 91       	pop	r18
    1196:	0f 90       	pop	r0
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	0f 90       	pop	r0
    119c:	1f 90       	pop	r1
    119e:	18 95       	reti

000011a0 <__vector_10>:

//This way, you can use different functions for different events without changing the ISR code.
ISR(TIMER0_COMP_vect){
    11a0:	1f 92       	push	r1
    11a2:	0f 92       	push	r0
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	0f 92       	push	r0
    11a8:	11 24       	eor	r1, r1
    11aa:	2f 93       	push	r18
    11ac:	3f 93       	push	r19
    11ae:	4f 93       	push	r20
    11b0:	5f 93       	push	r21
    11b2:	6f 93       	push	r22
    11b4:	7f 93       	push	r23
    11b6:	8f 93       	push	r24
    11b8:	9f 93       	push	r25
    11ba:	af 93       	push	r26
    11bc:	bf 93       	push	r27
    11be:	ef 93       	push	r30
    11c0:	ff 93       	push	r31
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62

	TIM0_pfTIM0Cmp();
    11ca:	e0 91 d8 01 	lds	r30, 0x01D8
    11ce:	f0 91 d9 01 	lds	r31, 0x01D9
    11d2:	09 95       	icall
}
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	ff 91       	pop	r31
    11da:	ef 91       	pop	r30
    11dc:	bf 91       	pop	r27
    11de:	af 91       	pop	r26
    11e0:	9f 91       	pop	r25
    11e2:	8f 91       	pop	r24
    11e4:	7f 91       	pop	r23
    11e6:	6f 91       	pop	r22
    11e8:	5f 91       	pop	r21
    11ea:	4f 91       	pop	r20
    11ec:	3f 91       	pop	r19
    11ee:	2f 91       	pop	r18
    11f0:	0f 90       	pop	r0
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	0f 90       	pop	r0
    11f6:	1f 90       	pop	r1
    11f8:	18 95       	reti

000011fa <ICU_voidInit>:


void (*ICU_pf) (void);


void ICU_voidInit (void){
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62

	/* Select Timer1 Normal Mode */
	CLR_BIT(TCCR1A, WGM10);
    1202:	af e4       	ldi	r26, 0x4F	; 79
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	ef e4       	ldi	r30, 0x4F	; 79
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	8e 7f       	andi	r24, 0xFE	; 254
    120e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM11);
    1210:	af e4       	ldi	r26, 0x4F	; 79
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	ef e4       	ldi	r30, 0x4F	; 79
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	8d 7f       	andi	r24, 0xFD	; 253
    121c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM12);
    121e:	ae e4       	ldi	r26, 0x4E	; 78
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	ee e4       	ldi	r30, 0x4E	; 78
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	87 7f       	andi	r24, 0xF7	; 247
    122a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM13);
    122c:	ae e4       	ldi	r26, 0x4E	; 78
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	ee e4       	ldi	r30, 0x4E	; 78
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8f 7e       	andi	r24, 0xEF	; 239
    1238:	8c 93       	st	X, r24

	/* Prescaler (8) */
	TCCR1B &= 0b11111000;
    123a:	ae e4       	ldi	r26, 0x4E	; 78
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	ee e4       	ldi	r30, 0x4E	; 78
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	88 7f       	andi	r24, 0xF8	; 248
    1246:	8c 93       	st	X, r24
	TCCR1B |= 0b00000010;
    1248:	ae e4       	ldi	r26, 0x4E	; 78
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	ee e4       	ldi	r30, 0x4E	; 78
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	82 60       	ori	r24, 0x02	; 2
    1254:	8c 93       	st	X, r24

	/* enable interrupt */
	SET_BIT(TIMSK, TICIE1);
    1256:	a9 e5       	ldi	r26, 0x59	; 89
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e9 e5       	ldi	r30, 0x59	; 89
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	80 62       	ori	r24, 0x20	; 32
    1262:	8c 93       	st	X, r24

	/* select trigger(Rising) */
	SET_BIT(TCCR1B, ICES1);
    1264:	ae e4       	ldi	r26, 0x4E	; 78
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	ee e4       	ldi	r30, 0x4E	; 78
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	80 64       	ori	r24, 0x40	; 64
    1270:	8c 93       	st	X, r24

}
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <ICU_voidChangeTrigger>:


void ICU_voidChangeTrigger	 (u8 Copy_u8Trigger){
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	00 d0       	rcall	.+0      	; 0x127e <ICU_voidChangeTrigger+0x6>
    127e:	0f 92       	push	r0
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8Trigger) {
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	3b 83       	std	Y+3, r19	; 0x03
    128e:	2a 83       	std	Y+2, r18	; 0x02
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	9b 81       	ldd	r25, Y+3	; 0x03
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	31 f0       	breq	.+12     	; 0x12a4 <ICU_voidChangeTrigger+0x2c>
    1298:	2a 81       	ldd	r18, Y+2	; 0x02
    129a:	3b 81       	ldd	r19, Y+3	; 0x03
    129c:	21 30       	cpi	r18, 0x01	; 1
    129e:	31 05       	cpc	r19, r1
    12a0:	49 f0       	breq	.+18     	; 0x12b4 <ICU_voidChangeTrigger+0x3c>
    12a2:	0f c0       	rjmp	.+30     	; 0x12c2 <ICU_voidChangeTrigger+0x4a>
		case ICU_FALLING_EDGE: CLR_BIT(TCCR1B, ICES1);	break;
    12a4:	ae e4       	ldi	r26, 0x4E	; 78
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	ee e4       	ldi	r30, 0x4E	; 78
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	8f 7b       	andi	r24, 0xBF	; 191
    12b0:	8c 93       	st	X, r24
    12b2:	07 c0       	rjmp	.+14     	; 0x12c2 <ICU_voidChangeTrigger+0x4a>
		case ICU_RISING_EDGE:  SET_BIT(TCCR1B, ICES1);	break;
    12b4:	ae e4       	ldi	r26, 0x4E	; 78
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	ee e4       	ldi	r30, 0x4E	; 78
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	80 64       	ori	r24, 0x40	; 64
    12c0:	8c 93       	st	X, r24
	}

}
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <ICU_voidSetCallback>:


void ICU_voidSetCallback  	(void (*Copy_pf) (void)){
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	00 d0       	rcall	.+0      	; 0x12d4 <ICU_voidSetCallback+0x6>
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	9a 83       	std	Y+2, r25	; 0x02
    12da:	89 83       	std	Y+1, r24	; 0x01

	ICU_pf = Copy_pf;
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	9a 81       	ldd	r25, Y+2	; 0x02
    12e0:	90 93 dd 01 	sts	0x01DD, r25
    12e4:	80 93 dc 01 	sts	0x01DC, r24

}
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <ICU_u16ReadValue>:


u16	 ICU_u16ReadValue (void){
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62

	return ICR1;
    12fa:	e6 e4       	ldi	r30, 0x46	; 70
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	91 81       	ldd	r25, Z+1	; 0x01
}
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <ICU_voidDisableInterrupt>:


void ICU_voidDisableInterrupt(void){
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62

	/* disable interrupt */
	CLR_BIT(TIMSK, TICIE1);
    1310:	a9 e5       	ldi	r26, 0x59	; 89
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e9 e5       	ldi	r30, 0x59	; 89
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	8f 7d       	andi	r24, 0xDF	; 223
    131c:	8c 93       	st	X, r24

}
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <__vector_6>:


ISR(TIMER1_CAPT_vect){
    1324:	1f 92       	push	r1
    1326:	0f 92       	push	r0
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	0f 92       	push	r0
    132c:	11 24       	eor	r1, r1
    132e:	2f 93       	push	r18
    1330:	3f 93       	push	r19
    1332:	4f 93       	push	r20
    1334:	5f 93       	push	r21
    1336:	6f 93       	push	r22
    1338:	7f 93       	push	r23
    133a:	8f 93       	push	r24
    133c:	9f 93       	push	r25
    133e:	af 93       	push	r26
    1340:	bf 93       	push	r27
    1342:	ef 93       	push	r30
    1344:	ff 93       	push	r31
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62

	ICU_pf();
    134e:	e0 91 dc 01 	lds	r30, 0x01DC
    1352:	f0 91 dd 01 	lds	r31, 0x01DD
    1356:	09 95       	icall

}
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	ff 91       	pop	r31
    135e:	ef 91       	pop	r30
    1360:	bf 91       	pop	r27
    1362:	af 91       	pop	r26
    1364:	9f 91       	pop	r25
    1366:	8f 91       	pop	r24
    1368:	7f 91       	pop	r23
    136a:	6f 91       	pop	r22
    136c:	5f 91       	pop	r21
    136e:	4f 91       	pop	r20
    1370:	3f 91       	pop	r19
    1372:	2f 91       	pop	r18
    1374:	0f 90       	pop	r0
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	0f 90       	pop	r0
    137a:	1f 90       	pop	r1
    137c:	18 95       	reti

0000137e <DIO_voidSetPinDirection>:
#include <avr/io.h>
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
#include "DIO.h"

void DIO_voidSetPinDirection (u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction){ 		//DDRA,B,C,D
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	27 97       	sbiw	r28, 0x07	; 7
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	89 83       	std	Y+1, r24	; 0x01
    1394:	6a 83       	std	Y+2, r22	; 0x02
    1396:	4b 83       	std	Y+3, r20	; 0x03
	if( Copy_u8Pin <8){
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	88 30       	cpi	r24, 0x08	; 8
    139c:	08 f0       	brcs	.+2      	; 0x13a0 <DIO_voidSetPinDirection+0x22>
    139e:	ea c0       	rjmp	.+468    	; 0x1574 <DIO_voidSetPinDirection+0x1f6>
		
		if(Copy_u8Direction == DIO_OUTPUT){
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <DIO_voidSetPinDirection+0x2a>
    13a6:	6f c0       	rjmp	.+222    	; 0x1486 <DIO_voidSetPinDirection+0x108>
			switch(Copy_u8Port)
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	3f 83       	std	Y+7, r19	; 0x07
    13b0:	2e 83       	std	Y+6, r18	; 0x06
    13b2:	8e 81       	ldd	r24, Y+6	; 0x06
    13b4:	9f 81       	ldd	r25, Y+7	; 0x07
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	91 05       	cpc	r25, r1
    13ba:	49 f1       	breq	.+82     	; 0x140e <DIO_voidSetPinDirection+0x90>
    13bc:	2e 81       	ldd	r18, Y+6	; 0x06
    13be:	3f 81       	ldd	r19, Y+7	; 0x07
    13c0:	22 30       	cpi	r18, 0x02	; 2
    13c2:	31 05       	cpc	r19, r1
    13c4:	2c f4       	brge	.+10     	; 0x13d0 <DIO_voidSetPinDirection+0x52>
    13c6:	8e 81       	ldd	r24, Y+6	; 0x06
    13c8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	61 f0       	breq	.+24     	; 0x13e6 <DIO_voidSetPinDirection+0x68>
    13ce:	d2 c0       	rjmp	.+420    	; 0x1574 <DIO_voidSetPinDirection+0x1f6>
    13d0:	2e 81       	ldd	r18, Y+6	; 0x06
    13d2:	3f 81       	ldd	r19, Y+7	; 0x07
    13d4:	22 30       	cpi	r18, 0x02	; 2
    13d6:	31 05       	cpc	r19, r1
    13d8:	71 f1       	breq	.+92     	; 0x1436 <DIO_voidSetPinDirection+0xb8>
    13da:	8e 81       	ldd	r24, Y+6	; 0x06
    13dc:	9f 81       	ldd	r25, Y+7	; 0x07
    13de:	83 30       	cpi	r24, 0x03	; 3
    13e0:	91 05       	cpc	r25, r1
    13e2:	e9 f1       	breq	.+122    	; 0x145e <DIO_voidSetPinDirection+0xe0>
    13e4:	c7 c0       	rjmp	.+398    	; 0x1574 <DIO_voidSetPinDirection+0x1f6>
			{
				case DIO_PORTA :	SET_BIT(DDRA, Copy_u8Pin); break;
    13e6:	aa e3       	ldi	r26, 0x3A	; 58
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	ea e3       	ldi	r30, 0x3A	; 58
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 2e       	mov	r0, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_voidSetPinDirection+0x86>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	0a 94       	dec	r0
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <DIO_voidSetPinDirection+0x82>
    1408:	84 2b       	or	r24, r20
    140a:	8c 93       	st	X, r24
    140c:	b3 c0       	rjmp	.+358    	; 0x1574 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTB :	SET_BIT(DDRB, Copy_u8Pin); break;
    140e:	a7 e3       	ldi	r26, 0x37	; 55
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e7 e3       	ldi	r30, 0x37	; 55
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	48 2f       	mov	r20, r24
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 2e       	mov	r0, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <DIO_voidSetPinDirection+0xae>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	0a 94       	dec	r0
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <DIO_voidSetPinDirection+0xaa>
    1430:	84 2b       	or	r24, r20
    1432:	8c 93       	st	X, r24
    1434:	9f c0       	rjmp	.+318    	; 0x1574 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTC :	SET_BIT(DDRC, Copy_u8Pin); break;
    1436:	a4 e3       	ldi	r26, 0x34	; 52
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e4 e3       	ldi	r30, 0x34	; 52
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 2e       	mov	r0, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <DIO_voidSetPinDirection+0xd6>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <DIO_voidSetPinDirection+0xd2>
    1458:	84 2b       	or	r24, r20
    145a:	8c 93       	st	X, r24
    145c:	8b c0       	rjmp	.+278    	; 0x1574 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTD :	SET_BIT(DDRD, Copy_u8Pin); break;
    145e:	a1 e3       	ldi	r26, 0x31	; 49
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e1 e3       	ldi	r30, 0x31	; 49
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	48 2f       	mov	r20, r24
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 2e       	mov	r0, r18
    1476:	02 c0       	rjmp	.+4      	; 0x147c <DIO_voidSetPinDirection+0xfe>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	0a 94       	dec	r0
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <DIO_voidSetPinDirection+0xfa>
    1480:	84 2b       	or	r24, r20
    1482:	8c 93       	st	X, r24
    1484:	77 c0       	rjmp	.+238    	; 0x1574 <DIO_voidSetPinDirection+0x1f6>
				default		   :		/* do nothing */	   break;
			}
			
		}
		else if(Copy_u8Direction == DIO_INPUT){
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	88 23       	and	r24, r24
    148a:	09 f0       	breq	.+2      	; 0x148e <DIO_voidSetPinDirection+0x110>
    148c:	73 c0       	rjmp	.+230    	; 0x1574 <DIO_voidSetPinDirection+0x1f6>
			switch(Copy_u8Port)
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	3d 83       	std	Y+5, r19	; 0x05
    1496:	2c 83       	std	Y+4, r18	; 0x04
    1498:	8c 81       	ldd	r24, Y+4	; 0x04
    149a:	9d 81       	ldd	r25, Y+5	; 0x05
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	91 05       	cpc	r25, r1
    14a0:	59 f1       	breq	.+86     	; 0x14f8 <DIO_voidSetPinDirection+0x17a>
    14a2:	2c 81       	ldd	r18, Y+4	; 0x04
    14a4:	3d 81       	ldd	r19, Y+5	; 0x05
    14a6:	22 30       	cpi	r18, 0x02	; 2
    14a8:	31 05       	cpc	r19, r1
    14aa:	2c f4       	brge	.+10     	; 0x14b6 <DIO_voidSetPinDirection+0x138>
    14ac:	8c 81       	ldd	r24, Y+4	; 0x04
    14ae:	9d 81       	ldd	r25, Y+5	; 0x05
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	69 f0       	breq	.+26     	; 0x14ce <DIO_voidSetPinDirection+0x150>
    14b4:	5f c0       	rjmp	.+190    	; 0x1574 <DIO_voidSetPinDirection+0x1f6>
    14b6:	2c 81       	ldd	r18, Y+4	; 0x04
    14b8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ba:	22 30       	cpi	r18, 0x02	; 2
    14bc:	31 05       	cpc	r19, r1
    14be:	89 f1       	breq	.+98     	; 0x1522 <DIO_voidSetPinDirection+0x1a4>
    14c0:	8c 81       	ldd	r24, Y+4	; 0x04
    14c2:	9d 81       	ldd	r25, Y+5	; 0x05
    14c4:	83 30       	cpi	r24, 0x03	; 3
    14c6:	91 05       	cpc	r25, r1
    14c8:	09 f4       	brne	.+2      	; 0x14cc <DIO_voidSetPinDirection+0x14e>
    14ca:	40 c0       	rjmp	.+128    	; 0x154c <DIO_voidSetPinDirection+0x1ce>
    14cc:	53 c0       	rjmp	.+166    	; 0x1574 <DIO_voidSetPinDirection+0x1f6>
			{
				case DIO_PORTA :	CLR_BIT(DDRA, Copy_u8Pin); break;
    14ce:	aa e3       	ldi	r26, 0x3A	; 58
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	ea e3       	ldi	r30, 0x3A	; 58
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <DIO_voidSetPinDirection+0x16e>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <DIO_voidSetPinDirection+0x16a>
    14f0:	80 95       	com	r24
    14f2:	84 23       	and	r24, r20
    14f4:	8c 93       	st	X, r24
    14f6:	3e c0       	rjmp	.+124    	; 0x1574 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTB :	CLR_BIT(DDRB, Copy_u8Pin); break;
    14f8:	a7 e3       	ldi	r26, 0x37	; 55
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e7 e3       	ldi	r30, 0x37	; 55
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <DIO_voidSetPinDirection+0x198>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <DIO_voidSetPinDirection+0x194>
    151a:	80 95       	com	r24
    151c:	84 23       	and	r24, r20
    151e:	8c 93       	st	X, r24
    1520:	29 c0       	rjmp	.+82     	; 0x1574 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTC :	CLR_BIT(DDRC, Copy_u8Pin); break;
    1522:	a4 e3       	ldi	r26, 0x34	; 52
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e4 e3       	ldi	r30, 0x34	; 52
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 2e       	mov	r0, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <DIO_voidSetPinDirection+0x1c2>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <DIO_voidSetPinDirection+0x1be>
    1544:	80 95       	com	r24
    1546:	84 23       	and	r24, r20
    1548:	8c 93       	st	X, r24
    154a:	14 c0       	rjmp	.+40     	; 0x1574 <DIO_voidSetPinDirection+0x1f6>
				case DIO_PORTD :	CLR_BIT(DDRD, Copy_u8Pin); break;
    154c:	a1 e3       	ldi	r26, 0x31	; 49
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e1 e3       	ldi	r30, 0x31	; 49
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	48 2f       	mov	r20, r24
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 2e       	mov	r0, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <DIO_voidSetPinDirection+0x1ec>
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	0a 94       	dec	r0
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <DIO_voidSetPinDirection+0x1e8>
    156e:	80 95       	com	r24
    1570:	84 23       	and	r24, r20
    1572:	8c 93       	st	X, r24
	}
	else{
		/* do nothing */
	}
	
}
    1574:	27 96       	adiw	r28, 0x07	; 7
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <DIO_voidSetPinValue>:


void DIO_voidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){ 		//PORT
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	27 97       	sbiw	r28, 0x07	; 7
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	6a 83       	std	Y+2, r22	; 0x02
    159e:	4b 83       	std	Y+3, r20	; 0x03
	if( Copy_u8Pin <8){
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	88 30       	cpi	r24, 0x08	; 8
    15a4:	08 f0       	brcs	.+2      	; 0x15a8 <DIO_voidSetPinValue+0x22>
    15a6:	ea c0       	rjmp	.+468    	; 0x177c <DIO_voidSetPinValue+0x1f6>
		
		if(Copy_u8Value == DIO_HIGH){
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <DIO_voidSetPinValue+0x2a>
    15ae:	6f c0       	rjmp	.+222    	; 0x168e <DIO_voidSetPinValue+0x108>
			switch(Copy_u8Port)
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	3f 83       	std	Y+7, r19	; 0x07
    15b8:	2e 83       	std	Y+6, r18	; 0x06
    15ba:	8e 81       	ldd	r24, Y+6	; 0x06
    15bc:	9f 81       	ldd	r25, Y+7	; 0x07
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	91 05       	cpc	r25, r1
    15c2:	49 f1       	breq	.+82     	; 0x1616 <DIO_voidSetPinValue+0x90>
    15c4:	2e 81       	ldd	r18, Y+6	; 0x06
    15c6:	3f 81       	ldd	r19, Y+7	; 0x07
    15c8:	22 30       	cpi	r18, 0x02	; 2
    15ca:	31 05       	cpc	r19, r1
    15cc:	2c f4       	brge	.+10     	; 0x15d8 <DIO_voidSetPinValue+0x52>
    15ce:	8e 81       	ldd	r24, Y+6	; 0x06
    15d0:	9f 81       	ldd	r25, Y+7	; 0x07
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	61 f0       	breq	.+24     	; 0x15ee <DIO_voidSetPinValue+0x68>
    15d6:	d2 c0       	rjmp	.+420    	; 0x177c <DIO_voidSetPinValue+0x1f6>
    15d8:	2e 81       	ldd	r18, Y+6	; 0x06
    15da:	3f 81       	ldd	r19, Y+7	; 0x07
    15dc:	22 30       	cpi	r18, 0x02	; 2
    15de:	31 05       	cpc	r19, r1
    15e0:	71 f1       	breq	.+92     	; 0x163e <DIO_voidSetPinValue+0xb8>
    15e2:	8e 81       	ldd	r24, Y+6	; 0x06
    15e4:	9f 81       	ldd	r25, Y+7	; 0x07
    15e6:	83 30       	cpi	r24, 0x03	; 3
    15e8:	91 05       	cpc	r25, r1
    15ea:	e9 f1       	breq	.+122    	; 0x1666 <DIO_voidSetPinValue+0xe0>
    15ec:	c7 c0       	rjmp	.+398    	; 0x177c <DIO_voidSetPinValue+0x1f6>
			{
				case DIO_PORTA :	SET_BIT(PORTA, Copy_u8Pin); break;
    15ee:	ab e3       	ldi	r26, 0x3B	; 59
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	eb e3       	ldi	r30, 0x3B	; 59
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	48 2f       	mov	r20, r24
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 2e       	mov	r0, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <DIO_voidSetPinValue+0x86>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	0a 94       	dec	r0
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <DIO_voidSetPinValue+0x82>
    1610:	84 2b       	or	r24, r20
    1612:	8c 93       	st	X, r24
    1614:	b3 c0       	rjmp	.+358    	; 0x177c <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTB :	SET_BIT(PORTB, Copy_u8Pin); break;
    1616:	a8 e3       	ldi	r26, 0x38	; 56
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e8 e3       	ldi	r30, 0x38	; 56
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	48 2f       	mov	r20, r24
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 2e       	mov	r0, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <DIO_voidSetPinValue+0xae>
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	0a 94       	dec	r0
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <DIO_voidSetPinValue+0xaa>
    1638:	84 2b       	or	r24, r20
    163a:	8c 93       	st	X, r24
    163c:	9f c0       	rjmp	.+318    	; 0x177c <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTC :	SET_BIT(PORTC, Copy_u8Pin); break;
    163e:	a5 e3       	ldi	r26, 0x35	; 53
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e5 e3       	ldi	r30, 0x35	; 53
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	48 2f       	mov	r20, r24
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	02 2e       	mov	r0, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <DIO_voidSetPinValue+0xd6>
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	0a 94       	dec	r0
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <DIO_voidSetPinValue+0xd2>
    1660:	84 2b       	or	r24, r20
    1662:	8c 93       	st	X, r24
    1664:	8b c0       	rjmp	.+278    	; 0x177c <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTD :	SET_BIT(PORTD, Copy_u8Pin); break;
    1666:	a2 e3       	ldi	r26, 0x32	; 50
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e2 e3       	ldi	r30, 0x32	; 50
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	48 2f       	mov	r20, r24
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	02 2e       	mov	r0, r18
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <DIO_voidSetPinValue+0xfe>
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	0a 94       	dec	r0
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <DIO_voidSetPinValue+0xfa>
    1688:	84 2b       	or	r24, r20
    168a:	8c 93       	st	X, r24
    168c:	77 c0       	rjmp	.+238    	; 0x177c <DIO_voidSetPinValue+0x1f6>
				default		   :		/* do nothing */	    break;
			}
			
		}
		else if(Copy_u8Value == DIO_LOW){
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	88 23       	and	r24, r24
    1692:	09 f0       	breq	.+2      	; 0x1696 <DIO_voidSetPinValue+0x110>
    1694:	73 c0       	rjmp	.+230    	; 0x177c <DIO_voidSetPinValue+0x1f6>
			switch(Copy_u8Port)
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	3d 83       	std	Y+5, r19	; 0x05
    169e:	2c 83       	std	Y+4, r18	; 0x04
    16a0:	8c 81       	ldd	r24, Y+4	; 0x04
    16a2:	9d 81       	ldd	r25, Y+5	; 0x05
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	91 05       	cpc	r25, r1
    16a8:	59 f1       	breq	.+86     	; 0x1700 <DIO_voidSetPinValue+0x17a>
    16aa:	2c 81       	ldd	r18, Y+4	; 0x04
    16ac:	3d 81       	ldd	r19, Y+5	; 0x05
    16ae:	22 30       	cpi	r18, 0x02	; 2
    16b0:	31 05       	cpc	r19, r1
    16b2:	2c f4       	brge	.+10     	; 0x16be <DIO_voidSetPinValue+0x138>
    16b4:	8c 81       	ldd	r24, Y+4	; 0x04
    16b6:	9d 81       	ldd	r25, Y+5	; 0x05
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	69 f0       	breq	.+26     	; 0x16d6 <DIO_voidSetPinValue+0x150>
    16bc:	5f c0       	rjmp	.+190    	; 0x177c <DIO_voidSetPinValue+0x1f6>
    16be:	2c 81       	ldd	r18, Y+4	; 0x04
    16c0:	3d 81       	ldd	r19, Y+5	; 0x05
    16c2:	22 30       	cpi	r18, 0x02	; 2
    16c4:	31 05       	cpc	r19, r1
    16c6:	89 f1       	breq	.+98     	; 0x172a <DIO_voidSetPinValue+0x1a4>
    16c8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ca:	9d 81       	ldd	r25, Y+5	; 0x05
    16cc:	83 30       	cpi	r24, 0x03	; 3
    16ce:	91 05       	cpc	r25, r1
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <DIO_voidSetPinValue+0x14e>
    16d2:	40 c0       	rjmp	.+128    	; 0x1754 <DIO_voidSetPinValue+0x1ce>
    16d4:	53 c0       	rjmp	.+166    	; 0x177c <DIO_voidSetPinValue+0x1f6>
			{
				case DIO_PORTA :	CLR_BIT(PORTA, Copy_u8Pin); break;
    16d6:	ab e3       	ldi	r26, 0x3B	; 59
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	eb e3       	ldi	r30, 0x3B	; 59
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	48 2f       	mov	r20, r24
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 2e       	mov	r0, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <DIO_voidSetPinValue+0x16e>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	0a 94       	dec	r0
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <DIO_voidSetPinValue+0x16a>
    16f8:	80 95       	com	r24
    16fa:	84 23       	and	r24, r20
    16fc:	8c 93       	st	X, r24
    16fe:	3e c0       	rjmp	.+124    	; 0x177c <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTB :	CLR_BIT(PORTB, Copy_u8Pin); break;
    1700:	a8 e3       	ldi	r26, 0x38	; 56
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e8 e3       	ldi	r30, 0x38	; 56
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <DIO_voidSetPinValue+0x198>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <DIO_voidSetPinValue+0x194>
    1722:	80 95       	com	r24
    1724:	84 23       	and	r24, r20
    1726:	8c 93       	st	X, r24
    1728:	29 c0       	rjmp	.+82     	; 0x177c <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTC :	CLR_BIT(PORTC, Copy_u8Pin); break;
    172a:	a5 e3       	ldi	r26, 0x35	; 53
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e5 e3       	ldi	r30, 0x35	; 53
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	48 2f       	mov	r20, r24
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 2e       	mov	r0, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <DIO_voidSetPinValue+0x1c2>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <DIO_voidSetPinValue+0x1be>
    174c:	80 95       	com	r24
    174e:	84 23       	and	r24, r20
    1750:	8c 93       	st	X, r24
    1752:	14 c0       	rjmp	.+40     	; 0x177c <DIO_voidSetPinValue+0x1f6>
				case DIO_PORTD :	CLR_BIT(PORTD, Copy_u8Pin); break;
    1754:	a2 e3       	ldi	r26, 0x32	; 50
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e2 e3       	ldi	r30, 0x32	; 50
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <DIO_voidSetPinValue+0x1ec>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <DIO_voidSetPinValue+0x1e8>
    1776:	80 95       	com	r24
    1778:	84 23       	and	r24, r20
    177a:	8c 93       	st	X, r24
		}	
	}
	else{
		/* do nothing */
	}
}
    177c:	27 96       	adiw	r28, 0x07	; 7
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin){		// PINA,B,C,D
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	00 d0       	rcall	.+0      	; 0x1794 <DIO_u8GetPinValue+0x6>
    1794:	00 d0       	rcall	.+0      	; 0x1796 <DIO_u8GetPinValue+0x8>
    1796:	00 d0       	rcall	.+0      	; 0x1798 <DIO_u8GetPinValue+0xa>
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	6a 83       	std	Y+2, r22	; 0x02
	if( Copy_u8Pin <8){
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	88 30       	cpi	r24, 0x08	; 8
    17a4:	08 f0       	brcs	.+2      	; 0x17a8 <DIO_u8GetPinValue+0x1a>
    17a6:	6f c0       	rjmp	.+222    	; 0x1886 <DIO_u8GetPinValue+0xf8>
		switch(Copy_u8Port)
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	3d 83       	std	Y+5, r19	; 0x05
    17b0:	2c 83       	std	Y+4, r18	; 0x04
    17b2:	4c 81       	ldd	r20, Y+4	; 0x04
    17b4:	5d 81       	ldd	r21, Y+5	; 0x05
    17b6:	41 30       	cpi	r20, 0x01	; 1
    17b8:	51 05       	cpc	r21, r1
    17ba:	49 f1       	breq	.+82     	; 0x180e <DIO_u8GetPinValue+0x80>
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
    17be:	9d 81       	ldd	r25, Y+5	; 0x05
    17c0:	82 30       	cpi	r24, 0x02	; 2
    17c2:	91 05       	cpc	r25, r1
    17c4:	34 f4       	brge	.+12     	; 0x17d2 <DIO_u8GetPinValue+0x44>
    17c6:	2c 81       	ldd	r18, Y+4	; 0x04
    17c8:	3d 81       	ldd	r19, Y+5	; 0x05
    17ca:	21 15       	cp	r18, r1
    17cc:	31 05       	cpc	r19, r1
    17ce:	61 f0       	breq	.+24     	; 0x17e8 <DIO_u8GetPinValue+0x5a>
    17d0:	57 c0       	rjmp	.+174    	; 0x1880 <DIO_u8GetPinValue+0xf2>
    17d2:	4c 81       	ldd	r20, Y+4	; 0x04
    17d4:	5d 81       	ldd	r21, Y+5	; 0x05
    17d6:	42 30       	cpi	r20, 0x02	; 2
    17d8:	51 05       	cpc	r21, r1
    17da:	61 f1       	breq	.+88     	; 0x1834 <DIO_u8GetPinValue+0xa6>
    17dc:	8c 81       	ldd	r24, Y+4	; 0x04
    17de:	9d 81       	ldd	r25, Y+5	; 0x05
    17e0:	83 30       	cpi	r24, 0x03	; 3
    17e2:	91 05       	cpc	r25, r1
    17e4:	d1 f1       	breq	.+116    	; 0x185a <DIO_u8GetPinValue+0xcc>
    17e6:	4c c0       	rjmp	.+152    	; 0x1880 <DIO_u8GetPinValue+0xf2>
		{
			case DIO_PORTA :	return GET_BIT(PINA, Copy_u8Pin);
    17e8:	e9 e3       	ldi	r30, 0x39	; 57
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	88 2f       	mov	r24, r24
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	a9 01       	movw	r20, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <DIO_u8GetPinValue+0x72>
    17fc:	55 95       	asr	r21
    17fe:	47 95       	ror	r20
    1800:	8a 95       	dec	r24
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <DIO_u8GetPinValue+0x6e>
    1804:	ca 01       	movw	r24, r20
    1806:	58 2f       	mov	r21, r24
    1808:	51 70       	andi	r21, 0x01	; 1
    180a:	5b 83       	std	Y+3, r21	; 0x03
    180c:	3d c0       	rjmp	.+122    	; 0x1888 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTB :	return GET_BIT(PINB, Copy_u8Pin);
    180e:	e6 e3       	ldi	r30, 0x36	; 54
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	88 2f       	mov	r24, r24
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	a9 01       	movw	r20, r18
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <DIO_u8GetPinValue+0x98>
    1822:	55 95       	asr	r21
    1824:	47 95       	ror	r20
    1826:	8a 95       	dec	r24
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <DIO_u8GetPinValue+0x94>
    182a:	ca 01       	movw	r24, r20
    182c:	58 2f       	mov	r21, r24
    182e:	51 70       	andi	r21, 0x01	; 1
    1830:	5b 83       	std	Y+3, r21	; 0x03
    1832:	2a c0       	rjmp	.+84     	; 0x1888 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTC :	return GET_BIT(PINC, Copy_u8Pin);
    1834:	e3 e3       	ldi	r30, 0x33	; 51
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	88 2f       	mov	r24, r24
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	a9 01       	movw	r20, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <DIO_u8GetPinValue+0xbe>
    1848:	55 95       	asr	r21
    184a:	47 95       	ror	r20
    184c:	8a 95       	dec	r24
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <DIO_u8GetPinValue+0xba>
    1850:	ca 01       	movw	r24, r20
    1852:	58 2f       	mov	r21, r24
    1854:	51 70       	andi	r21, 0x01	; 1
    1856:	5b 83       	std	Y+3, r21	; 0x03
    1858:	17 c0       	rjmp	.+46     	; 0x1888 <DIO_u8GetPinValue+0xfa>
			case DIO_PORTD :	return GET_BIT(PIND, Copy_u8Pin);
    185a:	e0 e3       	ldi	r30, 0x30	; 48
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	88 2f       	mov	r24, r24
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	a9 01       	movw	r20, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <DIO_u8GetPinValue+0xe4>
    186e:	55 95       	asr	r21
    1870:	47 95       	ror	r20
    1872:	8a 95       	dec	r24
    1874:	e2 f7       	brpl	.-8      	; 0x186e <DIO_u8GetPinValue+0xe0>
    1876:	ca 01       	movw	r24, r20
    1878:	58 2f       	mov	r21, r24
    187a:	51 70       	andi	r21, 0x01	; 1
    187c:	5b 83       	std	Y+3, r21	; 0x03
    187e:	04 c0       	rjmp	.+8      	; 0x1888 <DIO_u8GetPinValue+0xfa>
			default		   :	return 0xff;/* as a wrong entry */
    1880:	8f ef       	ldi	r24, 0xFF	; 255
    1882:	8b 83       	std	Y+3, r24	; 0x03
    1884:	01 c0       	rjmp	.+2      	; 0x1888 <DIO_u8GetPinValue+0xfa>
    1886:	02 c0       	rjmp	.+4      	; 0x188c <DIO_u8GetPinValue+0xfe>
	}
	else{
		/* do nothing */
	}
	
}
    1888:	9b 81       	ldd	r25, Y+3	; 0x03
    188a:	9e 83       	std	Y+6, r25	; 0x06
    188c:	8e 81       	ldd	r24, Y+6	; 0x06
    188e:	26 96       	adiw	r28, 0x06	; 6
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction){ // Copy_u8Direction = 0b11100000
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <DIO_voidSetPortDirection+0x6>
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <DIO_voidSetPortDirection+0x8>
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	3c 83       	std	Y+4, r19	; 0x04
    18b8:	2b 83       	std	Y+3, r18	; 0x03
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	9c 81       	ldd	r25, Y+4	; 0x04
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	91 05       	cpc	r25, r1
    18c2:	d1 f0       	breq	.+52     	; 0x18f8 <DIO_voidSetPortDirection+0x58>
    18c4:	2b 81       	ldd	r18, Y+3	; 0x03
    18c6:	3c 81       	ldd	r19, Y+4	; 0x04
    18c8:	22 30       	cpi	r18, 0x02	; 2
    18ca:	31 05       	cpc	r19, r1
    18cc:	2c f4       	brge	.+10     	; 0x18d8 <DIO_voidSetPortDirection+0x38>
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	61 f0       	breq	.+24     	; 0x18ee <DIO_voidSetPortDirection+0x4e>
    18d6:	1e c0       	rjmp	.+60     	; 0x1914 <DIO_voidSetPortDirection+0x74>
    18d8:	2b 81       	ldd	r18, Y+3	; 0x03
    18da:	3c 81       	ldd	r19, Y+4	; 0x04
    18dc:	22 30       	cpi	r18, 0x02	; 2
    18de:	31 05       	cpc	r19, r1
    18e0:	81 f0       	breq	.+32     	; 0x1902 <DIO_voidSetPortDirection+0x62>
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	9c 81       	ldd	r25, Y+4	; 0x04
    18e6:	83 30       	cpi	r24, 0x03	; 3
    18e8:	91 05       	cpc	r25, r1
    18ea:	81 f0       	breq	.+32     	; 0x190c <DIO_voidSetPortDirection+0x6c>
    18ec:	13 c0       	rjmp	.+38     	; 0x1914 <DIO_voidSetPortDirection+0x74>
	{
		case DIO_PORTA :	DDRA = Copy_u8Direction; break;
    18ee:	ea e3       	ldi	r30, 0x3A	; 58
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	80 83       	st	Z, r24
    18f6:	0e c0       	rjmp	.+28     	; 0x1914 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTB :	DDRB = Copy_u8Direction; break;
    18f8:	e7 e3       	ldi	r30, 0x37	; 55
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	80 83       	st	Z, r24
    1900:	09 c0       	rjmp	.+18     	; 0x1914 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTC :	DDRC = Copy_u8Direction; break;
    1902:	e4 e3       	ldi	r30, 0x34	; 52
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	80 83       	st	Z, r24
    190a:	04 c0       	rjmp	.+8      	; 0x1914 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTD :	DDRD = Copy_u8Direction; break;
    190c:	e1 e3       	ldi	r30, 0x31	; 49
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	80 83       	st	Z, r24
		default		   :		/* do nothing */	 break;
	}
	
}
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	00 d0       	rcall	.+0      	; 0x1928 <DIO_voidSetPortValue+0x6>
    1928:	00 d0       	rcall	.+0      	; 0x192a <DIO_voidSetPortValue+0x8>
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	3c 83       	std	Y+4, r19	; 0x04
    193a:	2b 83       	std	Y+3, r18	; 0x03
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	9c 81       	ldd	r25, Y+4	; 0x04
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	91 05       	cpc	r25, r1
    1944:	d1 f0       	breq	.+52     	; 0x197a <DIO_voidSetPortValue+0x58>
    1946:	2b 81       	ldd	r18, Y+3	; 0x03
    1948:	3c 81       	ldd	r19, Y+4	; 0x04
    194a:	22 30       	cpi	r18, 0x02	; 2
    194c:	31 05       	cpc	r19, r1
    194e:	2c f4       	brge	.+10     	; 0x195a <DIO_voidSetPortValue+0x38>
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	61 f0       	breq	.+24     	; 0x1970 <DIO_voidSetPortValue+0x4e>
    1958:	1e c0       	rjmp	.+60     	; 0x1996 <DIO_voidSetPortValue+0x74>
    195a:	2b 81       	ldd	r18, Y+3	; 0x03
    195c:	3c 81       	ldd	r19, Y+4	; 0x04
    195e:	22 30       	cpi	r18, 0x02	; 2
    1960:	31 05       	cpc	r19, r1
    1962:	81 f0       	breq	.+32     	; 0x1984 <DIO_voidSetPortValue+0x62>
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	83 30       	cpi	r24, 0x03	; 3
    196a:	91 05       	cpc	r25, r1
    196c:	81 f0       	breq	.+32     	; 0x198e <DIO_voidSetPortValue+0x6c>
    196e:	13 c0       	rjmp	.+38     	; 0x1996 <DIO_voidSetPortValue+0x74>
	{
		case DIO_PORTA :	PORTA = Copy_u8Value; break;
    1970:	eb e3       	ldi	r30, 0x3B	; 59
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	80 83       	st	Z, r24
    1978:	0e c0       	rjmp	.+28     	; 0x1996 <DIO_voidSetPortValue+0x74>
		case DIO_PORTB :	PORTB = Copy_u8Value; break;
    197a:	e8 e3       	ldi	r30, 0x38	; 56
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	80 83       	st	Z, r24
    1982:	09 c0       	rjmp	.+18     	; 0x1996 <DIO_voidSetPortValue+0x74>
		case DIO_PORTC :	PORTC = Copy_u8Value; break;
    1984:	e5 e3       	ldi	r30, 0x35	; 53
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	80 83       	st	Z, r24
    198c:	04 c0       	rjmp	.+8      	; 0x1996 <DIO_voidSetPortValue+0x74>
		case DIO_PORTD :	PORTD = Copy_u8Value; break;
    198e:	e2 e3       	ldi	r30, 0x32	; 50
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	80 83       	st	Z, r24
		default		   :		/* do nothing */  break;
	}	
	
} 
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <DIO_voidTogglePin>:


void DIO_voidTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin){
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <DIO_voidTogglePin+0x6>
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	6a 83       	std	Y+2, r22	; 0x02
	
	/* Complete this func */
	
}
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <RTOS_voidInit>:
RTOS_Task RTOS_tasks_array[RTOS_MAX_NUMBER_OF_TASKS];
u8 RTOS_tasks_array_index = 0;
char RTOS_running_task[] = "NULL";
/* PV END */

void RTOS_voidInit(u8 Copy_u8Prescaler, u8 Copy_u8CmpMatVal){
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <RTOS_voidInit+0x6>
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	6a 83       	std	Y+2, r22	; 0x02
	sei(); //set global intr
    19ca:	78 94       	sei
	TIM2_voidInit();
    19cc:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <TIM2_voidInit>
	TIM2_voidSetCmpValue(Copy_u8CmpMatVal);
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <TIM2_voidSetCmpValue>
	TIM2_voidCmpCallback(&RTOS_schedule);
    19d6:	82 e9       	ldi	r24, 0x92	; 146
    19d8:	9e e0       	ldi	r25, 0x0E	; 14
    19da:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <TIM2_voidCmpCallback>

	/* -> check every task period
	 * -> set prescaler value based on it */
	TIM2_voidTimerStart(Copy_u8Prescaler);
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <TIM2_voidTimerStart>
}
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <RTOS_create_task>:

/* PFI BEGIN */
RTOS_error_t RTOS_create_task(char copy_name[RTOS_MAX_TASK_NAME_LEN], u8 copy_priority, u8 copy_piriodicty, void (*copy_service_routine_ptr)(void)){
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <RTOS_create_task+0x6>
    19f4:	00 d0       	rcall	.+0      	; 0x19f6 <RTOS_create_task+0x8>
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <RTOS_create_task+0xa>
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	9a 83       	std	Y+2, r25	; 0x02
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	6b 83       	std	Y+3, r22	; 0x03
    1a02:	4c 83       	std	Y+4, r20	; 0x04
    1a04:	3e 83       	std	Y+6, r19	; 0x06
    1a06:	2d 83       	std	Y+5, r18	; 0x05

	strcpy(RTOS_tasks_array[RTOS_tasks_array_index].name, copy_name);
    1a08:	80 91 ca 01 	lds	r24, 0x01CA
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	9c 01       	movw	r18, r24
    1a1a:	22 0f       	add	r18, r18
    1a1c:	33 1f       	adc	r19, r19
    1a1e:	22 0f       	add	r18, r18
    1a20:	33 1f       	adc	r19, r19
    1a22:	22 0f       	add	r18, r18
    1a24:	33 1f       	adc	r19, r19
    1a26:	82 0f       	add	r24, r18
    1a28:	93 1f       	adc	r25, r19
    1a2a:	82 52       	subi	r24, 0x22	; 34
    1a2c:	9e 4f       	sbci	r25, 0xFE	; 254
    1a2e:	29 81       	ldd	r18, Y+1	; 0x01
    1a30:	3a 81       	ldd	r19, Y+2	; 0x02
    1a32:	b9 01       	movw	r22, r18
    1a34:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <strcpy>
    RTOS_tasks_array[RTOS_tasks_array_index].ID = RTOS_tasks_array_index;
    1a38:	80 91 ca 01 	lds	r24, 0x01CA
    1a3c:	88 2f       	mov	r24, r24
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	40 91 ca 01 	lds	r20, 0x01CA
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	9c 01       	movw	r18, r24
    1a4e:	22 0f       	add	r18, r18
    1a50:	33 1f       	adc	r19, r19
    1a52:	22 0f       	add	r18, r18
    1a54:	33 1f       	adc	r19, r19
    1a56:	22 0f       	add	r18, r18
    1a58:	33 1f       	adc	r19, r19
    1a5a:	82 0f       	add	r24, r18
    1a5c:	93 1f       	adc	r25, r19
    1a5e:	fc 01       	movw	r30, r24
    1a60:	e4 50       	subi	r30, 0x04	; 4
    1a62:	fe 4f       	sbci	r31, 0xFE	; 254
    1a64:	40 83       	st	Z, r20
    RTOS_tasks_array[RTOS_tasks_array_index].priority = copy_priority;
    1a66:	80 91 ca 01 	lds	r24, 0x01CA
    1a6a:	88 2f       	mov	r24, r24
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	9c 01       	movw	r18, r24
    1a78:	22 0f       	add	r18, r18
    1a7a:	33 1f       	adc	r19, r19
    1a7c:	22 0f       	add	r18, r18
    1a7e:	33 1f       	adc	r19, r19
    1a80:	22 0f       	add	r18, r18
    1a82:	33 1f       	adc	r19, r19
    1a84:	82 0f       	add	r24, r18
    1a86:	93 1f       	adc	r25, r19
    1a88:	fc 01       	movw	r30, r24
    1a8a:	e3 50       	subi	r30, 0x03	; 3
    1a8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	80 83       	st	Z, r24
    RTOS_tasks_array[RTOS_tasks_array_index].pirodicity = copy_piriodicty;
    1a92:	80 91 ca 01 	lds	r24, 0x01CA
    1a96:	88 2f       	mov	r24, r24
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	9c 01       	movw	r18, r24
    1aa4:	22 0f       	add	r18, r18
    1aa6:	33 1f       	adc	r19, r19
    1aa8:	22 0f       	add	r18, r18
    1aaa:	33 1f       	adc	r19, r19
    1aac:	22 0f       	add	r18, r18
    1aae:	33 1f       	adc	r19, r19
    1ab0:	82 0f       	add	r24, r18
    1ab2:	93 1f       	adc	r25, r19
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	e2 50       	subi	r30, 0x02	; 2
    1ab8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aba:	8c 81       	ldd	r24, Y+4	; 0x04
    1abc:	80 83       	st	Z, r24
    RTOS_tasks_array[RTOS_tasks_array_index].wait_countdown = copy_piriodicty;
    1abe:	80 91 ca 01 	lds	r24, 0x01CA
    1ac2:	88 2f       	mov	r24, r24
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	9c 01       	movw	r18, r24
    1ad0:	22 0f       	add	r18, r18
    1ad2:	33 1f       	adc	r19, r19
    1ad4:	22 0f       	add	r18, r18
    1ad6:	33 1f       	adc	r19, r19
    1ad8:	22 0f       	add	r18, r18
    1ada:	33 1f       	adc	r19, r19
    1adc:	82 0f       	add	r24, r18
    1ade:	93 1f       	adc	r25, r19
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	e1 50       	subi	r30, 0x01	; 1
    1ae4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae8:	80 83       	st	Z, r24
    RTOS_tasks_array[RTOS_tasks_array_index].service_routine_ptr = copy_service_routine_ptr;
    1aea:	80 91 ca 01 	lds	r24, 0x01CA
    1aee:	88 2f       	mov	r24, r24
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	9c 01       	movw	r18, r24
    1afc:	22 0f       	add	r18, r18
    1afe:	33 1f       	adc	r19, r19
    1b00:	22 0f       	add	r18, r18
    1b02:	33 1f       	adc	r19, r19
    1b04:	22 0f       	add	r18, r18
    1b06:	33 1f       	adc	r19, r19
    1b08:	82 0f       	add	r24, r18
    1b0a:	93 1f       	adc	r25, r19
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	e0 50       	subi	r30, 0x00	; 0
    1b10:	fe 4f       	sbci	r31, 0xFE	; 254
    1b12:	8d 81       	ldd	r24, Y+5	; 0x05
    1b14:	9e 81       	ldd	r25, Y+6	; 0x06
    1b16:	91 83       	std	Z+1, r25	; 0x01
    1b18:	80 83       	st	Z, r24
    
    RTOS_tasks_array_index ++;
    1b1a:	80 91 ca 01 	lds	r24, 0x01CA
    1b1e:	8f 5f       	subi	r24, 0xFF	; 255
    1b20:	80 93 ca 01 	sts	0x01CA, r24

    return(TASK_OK);
    1b24:	80 e0       	ldi	r24, 0x00	; 0
}
    1b26:	26 96       	adiw	r28, 0x06	; 6
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <RTOS_bubble_sort_task>:

void RTOS_bubble_sort_task(u8 copy_start_index){
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	e6 97       	sbiw	r28, 0x36	; 54
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	cd bf       	out	0x3d, r28	; 61
    1b4c:	8f a3       	std	Y+39, r24	; 0x27
    RTOS_Task temp_task;
    for(int index=copy_start_index; index<RTOS_MAX_NUMBER_OF_TASKS; index++){
    1b4e:	8f a1       	ldd	r24, Y+39	; 0x27
    1b50:	88 2f       	mov	r24, r24
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9a 83       	std	Y+2, r25	; 0x02
    1b56:	89 83       	std	Y+1, r24	; 0x01
    1b58:	d6 c0       	rjmp	.+428    	; 0x1d06 <RTOS_bubble_sort_task+0x1ce>
        if(RTOS_tasks_array[index].priority < RTOS_tasks_array[copy_start_index].priority){
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	9c 01       	movw	r18, r24
    1b68:	22 0f       	add	r18, r18
    1b6a:	33 1f       	adc	r19, r19
    1b6c:	22 0f       	add	r18, r18
    1b6e:	33 1f       	adc	r19, r19
    1b70:	22 0f       	add	r18, r18
    1b72:	33 1f       	adc	r19, r19
    1b74:	82 0f       	add	r24, r18
    1b76:	93 1f       	adc	r25, r19
    1b78:	fc 01       	movw	r30, r24
    1b7a:	e3 50       	subi	r30, 0x03	; 3
    1b7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b7e:	40 81       	ld	r20, Z
    1b80:	8f a1       	ldd	r24, Y+39	; 0x27
    1b82:	88 2f       	mov	r24, r24
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	9c 01       	movw	r18, r24
    1b90:	22 0f       	add	r18, r18
    1b92:	33 1f       	adc	r19, r19
    1b94:	22 0f       	add	r18, r18
    1b96:	33 1f       	adc	r19, r19
    1b98:	22 0f       	add	r18, r18
    1b9a:	33 1f       	adc	r19, r19
    1b9c:	82 0f       	add	r24, r18
    1b9e:	93 1f       	adc	r25, r19
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	e3 50       	subi	r30, 0x03	; 3
    1ba4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba6:	80 81       	ld	r24, Z
    1ba8:	48 17       	cp	r20, r24
    1baa:	08 f0       	brcs	.+2      	; 0x1bae <RTOS_bubble_sort_task+0x76>
    1bac:	a7 c0       	rjmp	.+334    	; 0x1cfc <RTOS_bubble_sort_task+0x1c4>
            // swap to get the higher priority task at the start of the task array 
            temp_task = RTOS_tasks_array[copy_start_index];
    1bae:	8f a1       	ldd	r24, Y+39	; 0x27
    1bb0:	88 2f       	mov	r24, r24
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	9c 01       	movw	r18, r24
    1bbe:	22 0f       	add	r18, r18
    1bc0:	33 1f       	adc	r19, r19
    1bc2:	22 0f       	add	r18, r18
    1bc4:	33 1f       	adc	r19, r19
    1bc6:	22 0f       	add	r18, r18
    1bc8:	33 1f       	adc	r19, r19
    1bca:	82 0f       	add	r24, r18
    1bcc:	93 1f       	adc	r25, r19
    1bce:	82 52       	subi	r24, 0x22	; 34
    1bd0:	9e 4f       	sbci	r25, 0xFE	; 254
    1bd2:	9e 01       	movw	r18, r28
    1bd4:	2d 5f       	subi	r18, 0xFD	; 253
    1bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd8:	39 a7       	std	Y+41, r19	; 0x29
    1bda:	28 a7       	std	Y+40, r18	; 0x28
    1bdc:	9b a7       	std	Y+43, r25	; 0x2b
    1bde:	8a a7       	std	Y+42, r24	; 0x2a
    1be0:	34 e2       	ldi	r19, 0x24	; 36
    1be2:	3c a7       	std	Y+44, r19	; 0x2c
    1be4:	ea a5       	ldd	r30, Y+42	; 0x2a
    1be6:	fb a5       	ldd	r31, Y+43	; 0x2b
    1be8:	00 80       	ld	r0, Z
    1bea:	2a a5       	ldd	r18, Y+42	; 0x2a
    1bec:	3b a5       	ldd	r19, Y+43	; 0x2b
    1bee:	2f 5f       	subi	r18, 0xFF	; 255
    1bf0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf2:	3b a7       	std	Y+43, r19	; 0x2b
    1bf4:	2a a7       	std	Y+42, r18	; 0x2a
    1bf6:	e8 a5       	ldd	r30, Y+40	; 0x28
    1bf8:	f9 a5       	ldd	r31, Y+41	; 0x29
    1bfa:	00 82       	st	Z, r0
    1bfc:	28 a5       	ldd	r18, Y+40	; 0x28
    1bfe:	39 a5       	ldd	r19, Y+41	; 0x29
    1c00:	2f 5f       	subi	r18, 0xFF	; 255
    1c02:	3f 4f       	sbci	r19, 0xFF	; 255
    1c04:	39 a7       	std	Y+41, r19	; 0x29
    1c06:	28 a7       	std	Y+40, r18	; 0x28
    1c08:	3c a5       	ldd	r19, Y+44	; 0x2c
    1c0a:	31 50       	subi	r19, 0x01	; 1
    1c0c:	3c a7       	std	Y+44, r19	; 0x2c
    1c0e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c10:	88 23       	and	r24, r24
    1c12:	41 f7       	brne	.-48     	; 0x1be4 <RTOS_bubble_sort_task+0xac>
            RTOS_tasks_array[copy_start_index] = RTOS_tasks_array[index];
    1c14:	8f a1       	ldd	r24, Y+39	; 0x27
    1c16:	88 2f       	mov	r24, r24
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	49 81       	ldd	r20, Y+1	; 0x01
    1c1c:	5a 81       	ldd	r21, Y+2	; 0x02
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	9c 01       	movw	r18, r24
    1c28:	22 0f       	add	r18, r18
    1c2a:	33 1f       	adc	r19, r19
    1c2c:	22 0f       	add	r18, r18
    1c2e:	33 1f       	adc	r19, r19
    1c30:	22 0f       	add	r18, r18
    1c32:	33 1f       	adc	r19, r19
    1c34:	82 0f       	add	r24, r18
    1c36:	93 1f       	adc	r25, r19
    1c38:	bc 01       	movw	r22, r24
    1c3a:	62 52       	subi	r22, 0x22	; 34
    1c3c:	7e 4f       	sbci	r23, 0xFE	; 254
    1c3e:	ca 01       	movw	r24, r20
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	9c 01       	movw	r18, r24
    1c4a:	22 0f       	add	r18, r18
    1c4c:	33 1f       	adc	r19, r19
    1c4e:	22 0f       	add	r18, r18
    1c50:	33 1f       	adc	r19, r19
    1c52:	22 0f       	add	r18, r18
    1c54:	33 1f       	adc	r19, r19
    1c56:	82 0f       	add	r24, r18
    1c58:	93 1f       	adc	r25, r19
    1c5a:	82 52       	subi	r24, 0x22	; 34
    1c5c:	9e 4f       	sbci	r25, 0xFE	; 254
    1c5e:	7e a7       	std	Y+46, r23	; 0x2e
    1c60:	6d a7       	std	Y+45, r22	; 0x2d
    1c62:	98 ab       	std	Y+48, r25	; 0x30
    1c64:	8f a7       	std	Y+47, r24	; 0x2f
    1c66:	94 e2       	ldi	r25, 0x24	; 36
    1c68:	99 ab       	std	Y+49, r25	; 0x31
    1c6a:	ef a5       	ldd	r30, Y+47	; 0x2f
    1c6c:	f8 a9       	ldd	r31, Y+48	; 0x30
    1c6e:	00 80       	ld	r0, Z
    1c70:	2f a5       	ldd	r18, Y+47	; 0x2f
    1c72:	38 a9       	ldd	r19, Y+48	; 0x30
    1c74:	2f 5f       	subi	r18, 0xFF	; 255
    1c76:	3f 4f       	sbci	r19, 0xFF	; 255
    1c78:	38 ab       	std	Y+48, r19	; 0x30
    1c7a:	2f a7       	std	Y+47, r18	; 0x2f
    1c7c:	ed a5       	ldd	r30, Y+45	; 0x2d
    1c7e:	fe a5       	ldd	r31, Y+46	; 0x2e
    1c80:	00 82       	st	Z, r0
    1c82:	2d a5       	ldd	r18, Y+45	; 0x2d
    1c84:	3e a5       	ldd	r19, Y+46	; 0x2e
    1c86:	2f 5f       	subi	r18, 0xFF	; 255
    1c88:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8a:	3e a7       	std	Y+46, r19	; 0x2e
    1c8c:	2d a7       	std	Y+45, r18	; 0x2d
    1c8e:	39 a9       	ldd	r19, Y+49	; 0x31
    1c90:	31 50       	subi	r19, 0x01	; 1
    1c92:	39 ab       	std	Y+49, r19	; 0x31
    1c94:	89 a9       	ldd	r24, Y+49	; 0x31
    1c96:	88 23       	and	r24, r24
    1c98:	41 f7       	brne	.-48     	; 0x1c6a <RTOS_bubble_sort_task+0x132>
            RTOS_tasks_array[index] = temp_task;
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
    1c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	9c 01       	movw	r18, r24
    1ca8:	22 0f       	add	r18, r18
    1caa:	33 1f       	adc	r19, r19
    1cac:	22 0f       	add	r18, r18
    1cae:	33 1f       	adc	r19, r19
    1cb0:	22 0f       	add	r18, r18
    1cb2:	33 1f       	adc	r19, r19
    1cb4:	82 0f       	add	r24, r18
    1cb6:	93 1f       	adc	r25, r19
    1cb8:	82 52       	subi	r24, 0x22	; 34
    1cba:	9e 4f       	sbci	r25, 0xFE	; 254
    1cbc:	9b ab       	std	Y+51, r25	; 0x33
    1cbe:	8a ab       	std	Y+50, r24	; 0x32
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	33 96       	adiw	r30, 0x03	; 3
    1cc4:	fd ab       	std	Y+53, r31	; 0x35
    1cc6:	ec ab       	std	Y+52, r30	; 0x34
    1cc8:	f4 e2       	ldi	r31, 0x24	; 36
    1cca:	fe ab       	std	Y+54, r31	; 0x36
    1ccc:	ec a9       	ldd	r30, Y+52	; 0x34
    1cce:	fd a9       	ldd	r31, Y+53	; 0x35
    1cd0:	00 80       	ld	r0, Z
    1cd2:	2c a9       	ldd	r18, Y+52	; 0x34
    1cd4:	3d a9       	ldd	r19, Y+53	; 0x35
    1cd6:	2f 5f       	subi	r18, 0xFF	; 255
    1cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cda:	3d ab       	std	Y+53, r19	; 0x35
    1cdc:	2c ab       	std	Y+52, r18	; 0x34
    1cde:	ea a9       	ldd	r30, Y+50	; 0x32
    1ce0:	fb a9       	ldd	r31, Y+51	; 0x33
    1ce2:	00 82       	st	Z, r0
    1ce4:	2a a9       	ldd	r18, Y+50	; 0x32
    1ce6:	3b a9       	ldd	r19, Y+51	; 0x33
    1ce8:	2f 5f       	subi	r18, 0xFF	; 255
    1cea:	3f 4f       	sbci	r19, 0xFF	; 255
    1cec:	3b ab       	std	Y+51, r19	; 0x33
    1cee:	2a ab       	std	Y+50, r18	; 0x32
    1cf0:	3e a9       	ldd	r19, Y+54	; 0x36
    1cf2:	31 50       	subi	r19, 0x01	; 1
    1cf4:	3e ab       	std	Y+54, r19	; 0x36
    1cf6:	8e a9       	ldd	r24, Y+54	; 0x36
    1cf8:	88 23       	and	r24, r24
    1cfa:	41 f7       	brne	.-48     	; 0x1ccc <RTOS_bubble_sort_task+0x194>
    return(TASK_OK);
}

void RTOS_bubble_sort_task(u8 copy_start_index){
    RTOS_Task temp_task;
    for(int index=copy_start_index; index<RTOS_MAX_NUMBER_OF_TASKS; index++){
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1d00:	01 96       	adiw	r24, 0x01	; 1
    1d02:	9a 83       	std	Y+2, r25	; 0x02
    1d04:	89 83       	std	Y+1, r24	; 0x01
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0a:	85 30       	cpi	r24, 0x05	; 5
    1d0c:	91 05       	cpc	r25, r1
    1d0e:	0c f4       	brge	.+2      	; 0x1d12 <RTOS_bubble_sort_task+0x1da>
    1d10:	24 cf       	rjmp	.-440    	; 0x1b5a <RTOS_bubble_sort_task+0x22>
            temp_task = RTOS_tasks_array[copy_start_index];
            RTOS_tasks_array[copy_start_index] = RTOS_tasks_array[index];
            RTOS_tasks_array[index] = temp_task;
        }
    }
}
    1d12:	e6 96       	adiw	r28, 0x36	; 54
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	f8 94       	cli
    1d18:	de bf       	out	0x3e, r29	; 62
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	cd bf       	out	0x3d, r28	; 61
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <RTOS_schedule>:

void RTOS_schedule(void){
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <RTOS_schedule+0x6>
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    for(int index=0; index<RTOS_tasks_array_index; index++){
    1d2e:	1a 82       	std	Y+2, r1	; 0x02
    1d30:	19 82       	std	Y+1, r1	; 0x01
    1d32:	9b c0       	rjmp	.+310    	; 0x1e6a <RTOS_schedule+0x146>
            if(RTOS_tasks_array[index].wait_countdown <= 0){
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	9c 01       	movw	r18, r24
    1d42:	22 0f       	add	r18, r18
    1d44:	33 1f       	adc	r19, r19
    1d46:	22 0f       	add	r18, r18
    1d48:	33 1f       	adc	r19, r19
    1d4a:	22 0f       	add	r18, r18
    1d4c:	33 1f       	adc	r19, r19
    1d4e:	82 0f       	add	r24, r18
    1d50:	93 1f       	adc	r25, r19
    1d52:	fc 01       	movw	r30, r24
    1d54:	e1 50       	subi	r30, 0x01	; 1
    1d56:	fe 4f       	sbci	r31, 0xFE	; 254
    1d58:	80 81       	ld	r24, Z
    1d5a:	88 23       	and	r24, r24
    1d5c:	09 f0       	breq	.+2      	; 0x1d60 <RTOS_schedule+0x3c>
    1d5e:	55 c0       	rjmp	.+170    	; 0x1e0a <RTOS_schedule+0xe6>
                // task ready to run
                RTOS_tasks_array[index].wait_countdown = RTOS_tasks_array[index].pirodicity;
    1d60:	49 81       	ldd	r20, Y+1	; 0x01
    1d62:	5a 81       	ldd	r21, Y+2	; 0x02
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	9a 81       	ldd	r25, Y+2	; 0x02
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	9c 01       	movw	r18, r24
    1d72:	22 0f       	add	r18, r18
    1d74:	33 1f       	adc	r19, r19
    1d76:	22 0f       	add	r18, r18
    1d78:	33 1f       	adc	r19, r19
    1d7a:	22 0f       	add	r18, r18
    1d7c:	33 1f       	adc	r19, r19
    1d7e:	82 0f       	add	r24, r18
    1d80:	93 1f       	adc	r25, r19
    1d82:	fc 01       	movw	r30, r24
    1d84:	e2 50       	subi	r30, 0x02	; 2
    1d86:	fe 4f       	sbci	r31, 0xFE	; 254
    1d88:	60 81       	ld	r22, Z
    1d8a:	ca 01       	movw	r24, r20
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	9c 01       	movw	r18, r24
    1d96:	22 0f       	add	r18, r18
    1d98:	33 1f       	adc	r19, r19
    1d9a:	22 0f       	add	r18, r18
    1d9c:	33 1f       	adc	r19, r19
    1d9e:	22 0f       	add	r18, r18
    1da0:	33 1f       	adc	r19, r19
    1da2:	82 0f       	add	r24, r18
    1da4:	93 1f       	adc	r25, r19
    1da6:	fc 01       	movw	r30, r24
    1da8:	e1 50       	subi	r30, 0x01	; 1
    1daa:	fe 4f       	sbci	r31, 0xFE	; 254
    1dac:	60 83       	st	Z, r22
                strcpy(RTOS_running_task, RTOS_tasks_array[index].name);
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	9a 81       	ldd	r25, Y+2	; 0x02
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	9c 01       	movw	r18, r24
    1dbc:	22 0f       	add	r18, r18
    1dbe:	33 1f       	adc	r19, r19
    1dc0:	22 0f       	add	r18, r18
    1dc2:	33 1f       	adc	r19, r19
    1dc4:	22 0f       	add	r18, r18
    1dc6:	33 1f       	adc	r19, r19
    1dc8:	82 0f       	add	r24, r18
    1dca:	93 1f       	adc	r25, r19
    1dcc:	9c 01       	movw	r18, r24
    1dce:	22 52       	subi	r18, 0x22	; 34
    1dd0:	3e 4f       	sbci	r19, 0xFE	; 254
    1dd2:	84 ec       	ldi	r24, 0xC4	; 196
    1dd4:	91 e0       	ldi	r25, 0x01	; 1
    1dd6:	b9 01       	movw	r22, r18
    1dd8:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <strcpy>
                RTOS_tasks_array[index].service_routine_ptr();
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	9a 81       	ldd	r25, Y+2	; 0x02
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	9c 01       	movw	r18, r24
    1dea:	22 0f       	add	r18, r18
    1dec:	33 1f       	adc	r19, r19
    1dee:	22 0f       	add	r18, r18
    1df0:	33 1f       	adc	r19, r19
    1df2:	22 0f       	add	r18, r18
    1df4:	33 1f       	adc	r19, r19
    1df6:	82 0f       	add	r24, r18
    1df8:	93 1f       	adc	r25, r19
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	e0 50       	subi	r30, 0x00	; 0
    1dfe:	fe 4f       	sbci	r31, 0xFE	; 254
    1e00:	01 90       	ld	r0, Z+
    1e02:	f0 81       	ld	r31, Z
    1e04:	e0 2d       	mov	r30, r0
    1e06:	09 95       	icall
    1e08:	28 c0       	rjmp	.+80     	; 0x1e5a <RTOS_schedule+0x136>
            }
            else{
                // task should wait for upcoming ticks
                RTOS_tasks_array[index].wait_countdown--;
    1e0a:	49 81       	ldd	r20, Y+1	; 0x01
    1e0c:	5a 81       	ldd	r21, Y+2	; 0x02
    1e0e:	ca 01       	movw	r24, r20
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	9c 01       	movw	r18, r24
    1e1a:	22 0f       	add	r18, r18
    1e1c:	33 1f       	adc	r19, r19
    1e1e:	22 0f       	add	r18, r18
    1e20:	33 1f       	adc	r19, r19
    1e22:	22 0f       	add	r18, r18
    1e24:	33 1f       	adc	r19, r19
    1e26:	82 0f       	add	r24, r18
    1e28:	93 1f       	adc	r25, r19
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	e1 50       	subi	r30, 0x01	; 1
    1e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e30:	80 81       	ld	r24, Z
    1e32:	68 2f       	mov	r22, r24
    1e34:	61 50       	subi	r22, 0x01	; 1
    1e36:	ca 01       	movw	r24, r20
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	9c 01       	movw	r18, r24
    1e42:	22 0f       	add	r18, r18
    1e44:	33 1f       	adc	r19, r19
    1e46:	22 0f       	add	r18, r18
    1e48:	33 1f       	adc	r19, r19
    1e4a:	22 0f       	add	r18, r18
    1e4c:	33 1f       	adc	r19, r19
    1e4e:	82 0f       	add	r24, r18
    1e50:	93 1f       	adc	r25, r19
    1e52:	fc 01       	movw	r30, r24
    1e54:	e1 50       	subi	r30, 0x01	; 1
    1e56:	fe 4f       	sbci	r31, 0xFE	; 254
    1e58:	60 83       	st	Z, r22
            }

            // bubble sort the at the current index (highest priority on the left)
            RTOS_bubble_sort_task(index); 
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <RTOS_bubble_sort_task>
        }
    }
}

void RTOS_schedule(void){
    for(int index=0; index<RTOS_tasks_array_index; index++){
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	9a 81       	ldd	r25, Y+2	; 0x02
    1e64:	01 96       	adiw	r24, 0x01	; 1
    1e66:	9a 83       	std	Y+2, r25	; 0x02
    1e68:	89 83       	std	Y+1, r24	; 0x01
    1e6a:	80 91 ca 01 	lds	r24, 0x01CA
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	9a 81       	ldd	r25, Y+2	; 0x02
    1e76:	82 17       	cp	r24, r18
    1e78:	93 07       	cpc	r25, r19
    1e7a:	0c f4       	brge	.+2      	; 0x1e7e <RTOS_schedule+0x15a>
    1e7c:	5b cf       	rjmp	.-330    	; 0x1d34 <RTOS_schedule+0x10>
            }

            // bubble sort the at the current index (highest priority on the left)
            RTOS_bubble_sort_task(index); 
    }
}
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <RTOS_set_priority>:

void RTOS_set_priority(char copy_name[], u8 copy_prioirty){
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <RTOS_set_priority+0x6>
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <RTOS_set_priority+0x8>
    1e90:	0f 92       	push	r0
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	9c 83       	std	Y+4, r25	; 0x04
    1e98:	8b 83       	std	Y+3, r24	; 0x03
    1e9a:	6d 83       	std	Y+5, r22	; 0x05
    // serach for the name in the tasks array and set the priopirty to the given value
    for(int index=0; index<RTOS_tasks_array_index; index++){
    1e9c:	1a 82       	std	Y+2, r1	; 0x02
    1e9e:	19 82       	std	Y+1, r1	; 0x01
    1ea0:	3c c0       	rjmp	.+120    	; 0x1f1a <RTOS_set_priority+0x92>
        if(!strcmp(RTOS_tasks_array[index].name, copy_name)){
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea6:	88 0f       	add	r24, r24
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	9c 01       	movw	r18, r24
    1eb0:	22 0f       	add	r18, r18
    1eb2:	33 1f       	adc	r19, r19
    1eb4:	22 0f       	add	r18, r18
    1eb6:	33 1f       	adc	r19, r19
    1eb8:	22 0f       	add	r18, r18
    1eba:	33 1f       	adc	r19, r19
    1ebc:	82 0f       	add	r24, r18
    1ebe:	93 1f       	adc	r25, r19
    1ec0:	82 52       	subi	r24, 0x22	; 34
    1ec2:	9e 4f       	sbci	r25, 0xFE	; 254
    1ec4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec8:	b9 01       	movw	r22, r18
    1eca:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <strcmp>
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	f9 f4       	brne	.+62     	; 0x1f10 <RTOS_set_priority+0x88>
            strcpy(RTOS_tasks_array[index].priority,copy_prioirty);
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	9c 01       	movw	r18, r24
    1ee0:	22 0f       	add	r18, r18
    1ee2:	33 1f       	adc	r19, r19
    1ee4:	22 0f       	add	r18, r18
    1ee6:	33 1f       	adc	r19, r19
    1ee8:	22 0f       	add	r18, r18
    1eea:	33 1f       	adc	r19, r19
    1eec:	82 0f       	add	r24, r18
    1eee:	93 1f       	adc	r25, r19
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	e3 50       	subi	r30, 0x03	; 3
    1ef4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ef6:	80 81       	ld	r24, Z
    1ef8:	88 2f       	mov	r24, r24
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	ac 01       	movw	r20, r24
    1efe:	8d 81       	ldd	r24, Y+5	; 0x05
    1f00:	88 2f       	mov	r24, r24
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	9c 01       	movw	r18, r24
    1f06:	ca 01       	movw	r24, r20
    1f08:	b9 01       	movw	r22, r18
    1f0a:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <strcpy>
    1f0e:	0f c0       	rjmp	.+30     	; 0x1f2e <RTOS_set_priority+0xa6>
    }
}

void RTOS_set_priority(char copy_name[], u8 copy_prioirty){
    // serach for the name in the tasks array and set the priopirty to the given value
    for(int index=0; index<RTOS_tasks_array_index; index++){
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	9a 81       	ldd	r25, Y+2	; 0x02
    1f14:	01 96       	adiw	r24, 0x01	; 1
    1f16:	9a 83       	std	Y+2, r25	; 0x02
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	80 91 ca 01 	lds	r24, 0x01CA
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	9a 81       	ldd	r25, Y+2	; 0x02
    1f26:	82 17       	cp	r24, r18
    1f28:	93 07       	cpc	r25, r19
    1f2a:	0c f4       	brge	.+2      	; 0x1f2e <RTOS_set_priority+0xa6>
    1f2c:	ba cf       	rjmp	.-140    	; 0x1ea2 <RTOS_set_priority+0x1a>
        if(!strcmp(RTOS_tasks_array[index].name, copy_name)){
            strcpy(RTOS_tasks_array[index].priority,copy_prioirty);
            break; 
        }
    }
}
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <TIM2_voidInit>:

/* Global pointer to function */
void (*TIM2_pfTIM2Cmp)(void);


void TIM2_voidInit	(void){
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
	/* select CTC mode */

	CLR_BIT(TCCR2, WGM00);
    1f46:	a5 e4       	ldi	r26, 0x45	; 69
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e5 e4       	ldi	r30, 0x45	; 69
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	8f 7b       	andi	r24, 0xBF	; 191
    1f52:	8c 93       	st	X, r24
	SET_BIT(TCCR2, WGM01);
    1f54:	a5 e4       	ldi	r26, 0x45	; 69
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e5 e4       	ldi	r30, 0x45	; 69
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	88 60       	ori	r24, 0x08	; 8
    1f60:	8c 93       	st	X, r24

	/* CTC INT Enable for RTOS*/
	SET_BIT(TIMSK, OCIE2);
    1f62:	a9 e5       	ldi	r26, 0x59	; 89
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e9 e5       	ldi	r30, 0x59	; 89
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	80 68       	ori	r24, 0x80	; 128
    1f6e:	8c 93       	st	X, r24
}
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <TIM2_voidTimerStart>:

void TIM2_voidTimerStart	(u8 Copy_u8Prescaler){
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	0f 92       	push	r0
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	89 83       	std	Y+1, r24	; 0x01
	/* Set prescaler */
	TCCR2 &= 0b11111000;
    1f82:	a5 e4       	ldi	r26, 0x45	; 69
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e5 e4       	ldi	r30, 0x45	; 69
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	88 7f       	andi	r24, 0xF8	; 248
    1f8e:	8c 93       	st	X, r24
	TCCR2 |= Copy_u8Prescaler;
    1f90:	a5 e4       	ldi	r26, 0x45	; 69
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e5 e4       	ldi	r30, 0x45	; 69
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	90 81       	ld	r25, Z
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	89 2b       	or	r24, r25
    1f9e:	8c 93       	st	X, r24

}
    1fa0:	0f 90       	pop	r0
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <TIM2_voidSetCmpValue>:

void TIM2_voidSetCmpValue	(u8 Copy_u8CmpMatVal){
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	0f 92       	push	r0
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	89 83       	std	Y+1, r24	; 0x01

	/* Set Compare value */
	OCR2 = Copy_u8CmpMatVal;
    1fb4:	e3 e4       	ldi	r30, 0x43	; 67
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	80 83       	st	Z, r24

}
    1fbc:	0f 90       	pop	r0
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	08 95       	ret

00001fc4 <TIM2_voidTimerStop>:

void TIM2_voidTimerStop		(void){
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62

	TCCR2 &= 0b11111000;
    1fcc:	a5 e4       	ldi	r26, 0x45	; 69
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e5 e4       	ldi	r30, 0x45	; 69
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	88 7f       	andi	r24, 0xF8	; 248
    1fd8:	8c 93       	st	X, r24

}
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	08 95       	ret

00001fe0 <TIM2_voidCmpCallback>:

void TIM2_voidCmpCallback   ( void (*Copy_pfTIM2Cmp)(void) ){
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <TIM2_voidCmpCallback+0x6>
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	9a 83       	std	Y+2, r25	; 0x02
    1fec:	89 83       	std	Y+1, r24	; 0x01

	TIM2_pfTIM2Cmp = Copy_pfTIM2Cmp;
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff2:	90 93 93 02 	sts	0x0293, r25
    1ff6:	80 93 92 02 	sts	0x0292, r24

}
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <__vector_4>:


ISR(TIMER2_COMP_vect){
    2004:	1f 92       	push	r1
    2006:	0f 92       	push	r0
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	0f 92       	push	r0
    200c:	11 24       	eor	r1, r1
    200e:	2f 93       	push	r18
    2010:	3f 93       	push	r19
    2012:	4f 93       	push	r20
    2014:	5f 93       	push	r21
    2016:	6f 93       	push	r22
    2018:	7f 93       	push	r23
    201a:	8f 93       	push	r24
    201c:	9f 93       	push	r25
    201e:	af 93       	push	r26
    2020:	bf 93       	push	r27
    2022:	ef 93       	push	r30
    2024:	ff 93       	push	r31
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62

	TIM2_pfTIM2Cmp();
    202e:	e0 91 92 02 	lds	r30, 0x0292
    2032:	f0 91 93 02 	lds	r31, 0x0293
    2036:	09 95       	icall
}
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	ff 91       	pop	r31
    203e:	ef 91       	pop	r30
    2040:	bf 91       	pop	r27
    2042:	af 91       	pop	r26
    2044:	9f 91       	pop	r25
    2046:	8f 91       	pop	r24
    2048:	7f 91       	pop	r23
    204a:	6f 91       	pop	r22
    204c:	5f 91       	pop	r21
    204e:	4f 91       	pop	r20
    2050:	3f 91       	pop	r19
    2052:	2f 91       	pop	r18
    2054:	0f 90       	pop	r0
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	0f 90       	pop	r0
    205a:	1f 90       	pop	r1
    205c:	18 95       	reti

0000205e <ULTRASONIC_voidInit>:


volatile u16 TravelTime =0;


void ULTRASONIC_voidInit(void) {
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
    // Configure trigger pin as an output
	DIO_voidSetPinDirection(ULTRASONIC_TRIG_PORT, ULTRASONIC_TRIG_PIN, DIO_OUTPUT);
    2066:	83 e0       	ldi	r24, 0x03	; 3
    2068:	65 e0       	ldi	r22, 0x05	; 5
    206a:	41 e0       	ldi	r20, 0x01	; 1
    206c:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>

    // Configure echo pin as an input
    DIO_voidSetPinDirection(ULTRASONIC_ECHO_PORT, ULTRASONIC_ECHO_PIN, DIO_INPUT);
    2070:	83 e0       	ldi	r24, 0x03	; 3
    2072:	66 e0       	ldi	r22, 0x06	; 6
    2074:	40 e0       	ldi	r20, 0x00	; 0
    2076:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>

    // Set up Timer1 for input capture mode
	ICU_voidInit();
    207a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <ICU_voidInit>
    ICU_voidSetCallback(ULTRASONIC_TravelTimeCB);
    207e:	81 e2       	ldi	r24, 0x21	; 33
    2080:	91 e1       	ldi	r25, 0x11	; 17
    2082:	0e 94 67 09 	call	0x12ce	; 0x12ce <ICU_voidSetCallback>
}
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <ULTRASONIC_voidStartTrigger>:

void ULTRASONIC_voidStartTrigger(void) {
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	68 97       	sbiw	r28, 0x18	; 24
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61
    // Send a 10us pulse on the trigger pin
	DIO_voidSetPinValue(ULTRASONIC_TRIG_PORT, ULTRASONIC_TRIG_PIN, DIO_HIGH);
    20a0:	83 e0       	ldi	r24, 0x03	; 3
    20a2:	65 e0       	ldi	r22, 0x05	; 5
    20a4:	41 e0       	ldi	r20, 0x01	; 1
    20a6:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_voidSetPinValue>
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	a0 e2       	ldi	r26, 0x20	; 32
    20b0:	b1 e4       	ldi	r27, 0x41	; 65
    20b2:	8d 8b       	std	Y+21, r24	; 0x15
    20b4:	9e 8b       	std	Y+22, r25	; 0x16
    20b6:	af 8b       	std	Y+23, r26	; 0x17
    20b8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20ba:	6d 89       	ldd	r22, Y+21	; 0x15
    20bc:	7e 89       	ldd	r23, Y+22	; 0x16
    20be:	8f 89       	ldd	r24, Y+23	; 0x17
    20c0:	98 8d       	ldd	r25, Y+24	; 0x18
    20c2:	2b ea       	ldi	r18, 0xAB	; 171
    20c4:	3a ea       	ldi	r19, 0xAA	; 170
    20c6:	4a e2       	ldi	r20, 0x2A	; 42
    20c8:	50 e4       	ldi	r21, 0x40	; 64
    20ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	89 8b       	std	Y+17, r24	; 0x11
    20d4:	9a 8b       	std	Y+18, r25	; 0x12
    20d6:	ab 8b       	std	Y+19, r26	; 0x13
    20d8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    20da:	69 89       	ldd	r22, Y+17	; 0x11
    20dc:	7a 89       	ldd	r23, Y+18	; 0x12
    20de:	8b 89       	ldd	r24, Y+19	; 0x13
    20e0:	9c 89       	ldd	r25, Y+20	; 0x14
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	40 e8       	ldi	r20, 0x80	; 128
    20e8:	5f e3       	ldi	r21, 0x3F	; 63
    20ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ee:	88 23       	and	r24, r24
    20f0:	1c f4       	brge	.+6      	; 0x20f8 <ULTRASONIC_voidStartTrigger+0x6c>
		__ticks = 1;
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	88 8b       	std	Y+16, r24	; 0x10
    20f6:	91 c0       	rjmp	.+290    	; 0x221a <ULTRASONIC_voidStartTrigger+0x18e>
	else if (__tmp > 255)
    20f8:	69 89       	ldd	r22, Y+17	; 0x11
    20fa:	7a 89       	ldd	r23, Y+18	; 0x12
    20fc:	8b 89       	ldd	r24, Y+19	; 0x13
    20fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	4f e7       	ldi	r20, 0x7F	; 127
    2106:	53 e4       	ldi	r21, 0x43	; 67
    2108:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    210c:	18 16       	cp	r1, r24
    210e:	0c f0       	brlt	.+2      	; 0x2112 <ULTRASONIC_voidStartTrigger+0x86>
    2110:	7b c0       	rjmp	.+246    	; 0x2208 <ULTRASONIC_voidStartTrigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2112:	6d 89       	ldd	r22, Y+21	; 0x15
    2114:	7e 89       	ldd	r23, Y+22	; 0x16
    2116:	8f 89       	ldd	r24, Y+23	; 0x17
    2118:	98 8d       	ldd	r25, Y+24	; 0x18
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	4a e7       	ldi	r20, 0x7A	; 122
    2120:	54 e4       	ldi	r21, 0x44	; 68
    2122:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	8c 87       	std	Y+12, r24	; 0x0c
    212c:	9d 87       	std	Y+13, r25	; 0x0d
    212e:	ae 87       	std	Y+14, r26	; 0x0e
    2130:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2132:	6c 85       	ldd	r22, Y+12	; 0x0c
    2134:	7d 85       	ldd	r23, Y+13	; 0x0d
    2136:	8e 85       	ldd	r24, Y+14	; 0x0e
    2138:	9f 85       	ldd	r25, Y+15	; 0x0f
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	4a ef       	ldi	r20, 0xFA	; 250
    2140:	54 e4       	ldi	r21, 0x44	; 68
    2142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	88 87       	std	Y+8, r24	; 0x08
    214c:	99 87       	std	Y+9, r25	; 0x09
    214e:	aa 87       	std	Y+10, r26	; 0x0a
    2150:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2152:	68 85       	ldd	r22, Y+8	; 0x08
    2154:	79 85       	ldd	r23, Y+9	; 0x09
    2156:	8a 85       	ldd	r24, Y+10	; 0x0a
    2158:	9b 85       	ldd	r25, Y+11	; 0x0b
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e8       	ldi	r20, 0x80	; 128
    2160:	5f e3       	ldi	r21, 0x3F	; 63
    2162:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2166:	88 23       	and	r24, r24
    2168:	2c f4       	brge	.+10     	; 0x2174 <ULTRASONIC_voidStartTrigger+0xe8>
		__ticks = 1;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	9f 83       	std	Y+7, r25	; 0x07
    2170:	8e 83       	std	Y+6, r24	; 0x06
    2172:	3f c0       	rjmp	.+126    	; 0x21f2 <ULTRASONIC_voidStartTrigger+0x166>
	else if (__tmp > 65535)
    2174:	68 85       	ldd	r22, Y+8	; 0x08
    2176:	79 85       	ldd	r23, Y+9	; 0x09
    2178:	8a 85       	ldd	r24, Y+10	; 0x0a
    217a:	9b 85       	ldd	r25, Y+11	; 0x0b
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	3f ef       	ldi	r19, 0xFF	; 255
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	57 e4       	ldi	r21, 0x47	; 71
    2184:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2188:	18 16       	cp	r1, r24
    218a:	4c f5       	brge	.+82     	; 0x21de <ULTRASONIC_voidStartTrigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218c:	6c 85       	ldd	r22, Y+12	; 0x0c
    218e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2190:	8e 85       	ldd	r24, Y+14	; 0x0e
    2192:	9f 85       	ldd	r25, Y+15	; 0x0f
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e2       	ldi	r20, 0x20	; 32
    219a:	51 e4       	ldi	r21, 0x41	; 65
    219c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	bc 01       	movw	r22, r24
    21a6:	cd 01       	movw	r24, r26
    21a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	9f 83       	std	Y+7, r25	; 0x07
    21b2:	8e 83       	std	Y+6, r24	; 0x06
    21b4:	0f c0       	rjmp	.+30     	; 0x21d4 <ULTRASONIC_voidStartTrigger+0x148>
    21b6:	88 ec       	ldi	r24, 0xC8	; 200
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	9d 83       	std	Y+5, r25	; 0x05
    21bc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21be:	8c 81       	ldd	r24, Y+4	; 0x04
    21c0:	9d 81       	ldd	r25, Y+5	; 0x05
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <ULTRASONIC_voidStartTrigger+0x136>
    21c6:	9d 83       	std	Y+5, r25	; 0x05
    21c8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ca:	8e 81       	ldd	r24, Y+6	; 0x06
    21cc:	9f 81       	ldd	r25, Y+7	; 0x07
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	9f 83       	std	Y+7, r25	; 0x07
    21d2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d4:	8e 81       	ldd	r24, Y+6	; 0x06
    21d6:	9f 81       	ldd	r25, Y+7	; 0x07
    21d8:	00 97       	sbiw	r24, 0x00	; 0
    21da:	69 f7       	brne	.-38     	; 0x21b6 <ULTRASONIC_voidStartTrigger+0x12a>
    21dc:	24 c0       	rjmp	.+72     	; 0x2226 <ULTRASONIC_voidStartTrigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21de:	68 85       	ldd	r22, Y+8	; 0x08
    21e0:	79 85       	ldd	r23, Y+9	; 0x09
    21e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    21e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    21e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	9f 83       	std	Y+7, r25	; 0x07
    21f0:	8e 83       	std	Y+6, r24	; 0x06
    21f2:	8e 81       	ldd	r24, Y+6	; 0x06
    21f4:	9f 81       	ldd	r25, Y+7	; 0x07
    21f6:	9b 83       	std	Y+3, r25	; 0x03
    21f8:	8a 83       	std	Y+2, r24	; 0x02
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
    21fc:	9b 81       	ldd	r25, Y+3	; 0x03
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <ULTRASONIC_voidStartTrigger+0x172>
    2202:	9b 83       	std	Y+3, r25	; 0x03
    2204:	8a 83       	std	Y+2, r24	; 0x02
    2206:	0f c0       	rjmp	.+30     	; 0x2226 <ULTRASONIC_voidStartTrigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2208:	69 89       	ldd	r22, Y+17	; 0x11
    220a:	7a 89       	ldd	r23, Y+18	; 0x12
    220c:	8b 89       	ldd	r24, Y+19	; 0x13
    220e:	9c 89       	ldd	r25, Y+20	; 0x14
    2210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	88 8b       	std	Y+16, r24	; 0x10
    221a:	88 89       	ldd	r24, Y+16	; 0x10
    221c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	8a 95       	dec	r24
    2222:	f1 f7       	brne	.-4      	; 0x2220 <ULTRASONIC_voidStartTrigger+0x194>
    2224:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(10);
    DIO_voidSetPinValue(ULTRASONIC_TRIG_PORT, ULTRASONIC_TRIG_PIN, DIO_LOW);
    2226:	83 e0       	ldi	r24, 0x03	; 3
    2228:	65 e0       	ldi	r22, 0x05	; 5
    222a:	40 e0       	ldi	r20, 0x00	; 0
    222c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_voidSetPinValue>
}
    2230:	68 96       	adiw	r28, 0x18	; 24
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	f8 94       	cli
    2236:	de bf       	out	0x3e, r29	; 62
    2238:	0f be       	out	0x3f, r0	; 63
    223a:	cd bf       	out	0x3d, r28	; 61
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <ULTRASONIC_TravelTimeCB>:

void ULTRASONIC_TravelTimeCB (void)
{
    2242:	df 93       	push	r29
    2244:	cf 93       	push	r28
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	60 97       	sbiw	r28, 0x10	; 16
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	f8 94       	cli
    2250:	de bf       	out	0x3e, r29	; 62
    2252:	0f be       	out	0x3f, r0	; 63
    2254:	cd bf       	out	0x3d, r28	; 61
    static u16 start_time = 0;
    static u8 capture_count = 0;

    if (capture_count == 0) {
    2256:	80 91 cd 01 	lds	r24, 0x01CD
    225a:	88 23       	and	r24, r24
    225c:	79 f4       	brne	.+30     	; 0x227c <ULTRASONIC_TravelTimeCB+0x3a>
        // Capture rising edge, store the timer value
        start_time = ICU_u16ReadValue();
    225e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <ICU_u16ReadValue>
    2262:	90 93 cf 01 	sts	0x01CF, r25
    2266:	80 93 ce 01 	sts	0x01CE, r24
        ICU_voidChangeTrigger(ICU_FALLING_EDGE); // Switch to capture on falling edge
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	0e 94 3c 09 	call	0x1278	; 0x1278 <ICU_voidChangeTrigger>
        capture_count++;
    2270:	80 91 cd 01 	lds	r24, 0x01CD
    2274:	8f 5f       	subi	r24, 0xFF	; 255
    2276:	80 93 cd 01 	sts	0x01CD, r24
    227a:	8c c0       	rjmp	.+280    	; 0x2394 <ULTRASONIC_TravelTimeCB+0x152>
    }
    else if (capture_count == 1) {
    227c:	80 91 cd 01 	lds	r24, 0x01CD
    2280:	81 30       	cpi	r24, 0x01	; 1
    2282:	09 f0       	breq	.+2      	; 0x2286 <ULTRASONIC_TravelTimeCB+0x44>
    2284:	87 c0       	rjmp	.+270    	; 0x2394 <ULTRASONIC_TravelTimeCB+0x152>
        // Capture falling edge
        u16 end_time = ICU_u16ReadValue();
    2286:	0e 94 79 09 	call	0x12f2	; 0x12f2 <ICU_u16ReadValue>
    228a:	98 8b       	std	Y+16, r25	; 0x10
    228c:	8f 87       	std	Y+15, r24	; 0x0f
        TravelTime = end_time - start_time;
    228e:	20 91 ce 01 	lds	r18, 0x01CE
    2292:	30 91 cf 01 	lds	r19, 0x01CF
    2296:	8f 85       	ldd	r24, Y+15	; 0x0f
    2298:	98 89       	ldd	r25, Y+16	; 0x10
    229a:	82 1b       	sub	r24, r18
    229c:	93 0b       	sbc	r25, r19
    229e:	90 93 cc 01 	sts	0x01CC, r25
    22a2:	80 93 cb 01 	sts	0x01CB, r24
        ICU_voidChangeTrigger(ICU_RISING_EDGE); // Switch back to capture on rising edge
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	0e 94 3c 09 	call	0x1278	; 0x1278 <ICU_voidChangeTrigger>
        capture_count = 0;
    22ac:	10 92 cd 01 	sts	0x01CD, r1
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	a0 e2       	ldi	r26, 0x20	; 32
    22b6:	b1 e4       	ldi	r27, 0x41	; 65
    22b8:	8b 87       	std	Y+11, r24	; 0x0b
    22ba:	9c 87       	std	Y+12, r25	; 0x0c
    22bc:	ad 87       	std	Y+13, r26	; 0x0d
    22be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	4a ef       	ldi	r20, 0xFA	; 250
    22ce:	54 e4       	ldi	r21, 0x44	; 68
    22d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	8f 83       	std	Y+7, r24	; 0x07
    22da:	98 87       	std	Y+8, r25	; 0x08
    22dc:	a9 87       	std	Y+9, r26	; 0x09
    22de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22e0:	6f 81       	ldd	r22, Y+7	; 0x07
    22e2:	78 85       	ldd	r23, Y+8	; 0x08
    22e4:	89 85       	ldd	r24, Y+9	; 0x09
    22e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e8       	ldi	r20, 0x80	; 128
    22ee:	5f e3       	ldi	r21, 0x3F	; 63
    22f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f4:	88 23       	and	r24, r24
    22f6:	2c f4       	brge	.+10     	; 0x2302 <ULTRASONIC_TravelTimeCB+0xc0>
		__ticks = 1;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9e 83       	std	Y+6, r25	; 0x06
    22fe:	8d 83       	std	Y+5, r24	; 0x05
    2300:	3f c0       	rjmp	.+126    	; 0x2380 <ULTRASONIC_TravelTimeCB+0x13e>
	else if (__tmp > 65535)
    2302:	6f 81       	ldd	r22, Y+7	; 0x07
    2304:	78 85       	ldd	r23, Y+8	; 0x08
    2306:	89 85       	ldd	r24, Y+9	; 0x09
    2308:	9a 85       	ldd	r25, Y+10	; 0x0a
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	3f ef       	ldi	r19, 0xFF	; 255
    230e:	4f e7       	ldi	r20, 0x7F	; 127
    2310:	57 e4       	ldi	r21, 0x47	; 71
    2312:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2316:	18 16       	cp	r1, r24
    2318:	4c f5       	brge	.+82     	; 0x236c <ULTRASONIC_TravelTimeCB+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231a:	6b 85       	ldd	r22, Y+11	; 0x0b
    231c:	7c 85       	ldd	r23, Y+12	; 0x0c
    231e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2320:	9e 85       	ldd	r25, Y+14	; 0x0e
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e2       	ldi	r20, 0x20	; 32
    2328:	51 e4       	ldi	r21, 0x41	; 65
    232a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	bc 01       	movw	r22, r24
    2334:	cd 01       	movw	r24, r26
    2336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	9e 83       	std	Y+6, r25	; 0x06
    2340:	8d 83       	std	Y+5, r24	; 0x05
    2342:	0f c0       	rjmp	.+30     	; 0x2362 <ULTRASONIC_TravelTimeCB+0x120>
    2344:	88 ec       	ldi	r24, 0xC8	; 200
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	9c 83       	std	Y+4, r25	; 0x04
    234a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	9c 81       	ldd	r25, Y+4	; 0x04
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <ULTRASONIC_TravelTimeCB+0x10e>
    2354:	9c 83       	std	Y+4, r25	; 0x04
    2356:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2358:	8d 81       	ldd	r24, Y+5	; 0x05
    235a:	9e 81       	ldd	r25, Y+6	; 0x06
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	9e 83       	std	Y+6, r25	; 0x06
    2360:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2362:	8d 81       	ldd	r24, Y+5	; 0x05
    2364:	9e 81       	ldd	r25, Y+6	; 0x06
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	69 f7       	brne	.-38     	; 0x2344 <ULTRASONIC_TravelTimeCB+0x102>
    236a:	14 c0       	rjmp	.+40     	; 0x2394 <ULTRASONIC_TravelTimeCB+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236c:	6f 81       	ldd	r22, Y+7	; 0x07
    236e:	78 85       	ldd	r23, Y+8	; 0x08
    2370:	89 85       	ldd	r24, Y+9	; 0x09
    2372:	9a 85       	ldd	r25, Y+10	; 0x0a
    2374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	9e 83       	std	Y+6, r25	; 0x06
    237e:	8d 83       	std	Y+5, r24	; 0x05
    2380:	8d 81       	ldd	r24, Y+5	; 0x05
    2382:	9e 81       	ldd	r25, Y+6	; 0x06
    2384:	9a 83       	std	Y+2, r25	; 0x02
    2386:	89 83       	std	Y+1, r24	; 0x01
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	9a 81       	ldd	r25, Y+2	; 0x02
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <ULTRASONIC_TravelTimeCB+0x14a>
    2390:	9a 83       	std	Y+2, r25	; 0x02
    2392:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(10);
    }


}
    2394:	60 96       	adiw	r28, 0x10	; 16
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <ULTRASONIC_voidReturnDistanceCm>:



u32 ULTRASONIC_voidReturnDistanceCm(void)
{
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	00 d0       	rcall	.+0      	; 0x23ac <ULTRASONIC_voidReturnDistanceCm+0x6>
    23ac:	00 d0       	rcall	.+0      	; 0x23ae <ULTRASONIC_voidReturnDistanceCm+0x8>
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
	u32 Local_ULTRASONIC_Distance_Cm =0;
    23b2:	19 82       	std	Y+1, r1	; 0x01
    23b4:	1a 82       	std	Y+2, r1	; 0x02
    23b6:	1b 82       	std	Y+3, r1	; 0x03
    23b8:	1c 82       	std	Y+4, r1	; 0x04
	if(TravelTime>36000)
    23ba:	80 91 cb 01 	lds	r24, 0x01CB
    23be:	90 91 cc 01 	lds	r25, 0x01CC
    23c2:	2c e8       	ldi	r18, 0x8C	; 140
    23c4:	81 3a       	cpi	r24, 0xA1	; 161
    23c6:	92 07       	cpc	r25, r18
    23c8:	48 f0       	brcs	.+18     	; 0x23dc <ULTRASONIC_voidReturnDistanceCm+0x36>
	{
		Local_ULTRASONIC_Distance_Cm ='O'; // Indicate error in echo
    23ca:	8f e4       	ldi	r24, 0x4F	; 79
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	a0 e0       	ldi	r26, 0x00	; 0
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	9a 83       	std	Y+2, r25	; 0x02
    23d6:	ab 83       	std	Y+3, r26	; 0x03
    23d8:	bc 83       	std	Y+4, r27	; 0x04
    23da:	11 c0       	rjmp	.+34     	; 0x23fe <ULTRASONIC_voidReturnDistanceCm+0x58>
	}
	else
	{
		Local_ULTRASONIC_Distance_Cm = (u32)(( TravelTime/29)/2);
    23dc:	80 91 cb 01 	lds	r24, 0x01CB
    23e0:	90 91 cc 01 	lds	r25, 0x01CC
    23e4:	2a e3       	ldi	r18, 0x3A	; 58
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	b9 01       	movw	r22, r18
    23ea:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <__udivmodhi4>
    23ee:	cb 01       	movw	r24, r22
    23f0:	cc 01       	movw	r24, r24
    23f2:	a0 e0       	ldi	r26, 0x00	; 0
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	89 83       	std	Y+1, r24	; 0x01
    23f8:	9a 83       	std	Y+2, r25	; 0x02
    23fa:	ab 83       	std	Y+3, r26	; 0x03
    23fc:	bc 83       	std	Y+4, r27	; 0x04
	}

	return Local_ULTRASONIC_Distance_Cm;
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	9a 81       	ldd	r25, Y+2	; 0x02
    2402:	ab 81       	ldd	r26, Y+3	; 0x03
    2404:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	cf 91       	pop	r28
    2414:	df 91       	pop	r29
    2416:	08 95       	ret

00002418 <LCD_voidInit>:
#include "../../LIB/STD_Types.h"
#include "../../LIB/BIT_Math.h"
#include "../../MCAL/DIO/DIO.h"
#include "LCD.h"

void LCD_voidInit(void){
    2418:	0f 93       	push	r16
    241a:	1f 93       	push	r17
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	cc 54       	subi	r28, 0x4C	; 76
    2426:	d0 40       	sbci	r29, 0x00	; 0
    2428:	0f b6       	in	r0, 0x3f	; 63
    242a:	f8 94       	cli
    242c:	de bf       	out	0x3e, r29	; 62
    242e:	0f be       	out	0x3f, r0	; 63
    2430:	cd bf       	out	0x3d, r28	; 61
	/* Data port -> output*/
	DIO_voidSetPortDirection(LCD_DATA_PORT, 0XFF);
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	6f ef       	ldi	r22, 0xFF	; 255
    2436:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <DIO_voidSetPortDirection>
	/* RS, RW, E  -> output */
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RS, DIO_OUTPUT);
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	60 e0       	ldi	r22, 0x00	; 0
    243e:	41 e0       	ldi	r20, 0x01	; 1
    2440:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RW, DIO_OUTPUT);
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	61 e0       	ldi	r22, 0x01	; 1
    2448:	41 e0       	ldi	r20, 0x01	; 1
    244a:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, EN, DIO_OUTPUT);
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	62 e0       	ldi	r22, 0x02	; 2
    2452:	41 e0       	ldi	r20, 0x01	; 1
    2454:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_voidSetPinDirection>
    2458:	fe 01       	movw	r30, r28
    245a:	e7 5b       	subi	r30, 0xB7	; 183
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	ac e0       	ldi	r26, 0x0C	; 12
    2464:	b2 e4       	ldi	r27, 0x42	; 66
    2466:	80 83       	st	Z, r24
    2468:	91 83       	std	Z+1, r25	; 0x01
    246a:	a2 83       	std	Z+2, r26	; 0x02
    246c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246e:	8e 01       	movw	r16, r28
    2470:	0b 5b       	subi	r16, 0xBB	; 187
    2472:	1f 4f       	sbci	r17, 0xFF	; 255
    2474:	fe 01       	movw	r30, r28
    2476:	e7 5b       	subi	r30, 0xB7	; 183
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	60 81       	ld	r22, Z
    247c:	71 81       	ldd	r23, Z+1	; 0x01
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	4a ef       	ldi	r20, 0xFA	; 250
    2488:	54 e4       	ldi	r21, 0x44	; 68
    248a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	f8 01       	movw	r30, r16
    2494:	80 83       	st	Z, r24
    2496:	91 83       	std	Z+1, r25	; 0x01
    2498:	a2 83       	std	Z+2, r26	; 0x02
    249a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    249c:	fe 01       	movw	r30, r28
    249e:	eb 5b       	subi	r30, 0xBB	; 187
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	60 81       	ld	r22, Z
    24a4:	71 81       	ldd	r23, Z+1	; 0x01
    24a6:	82 81       	ldd	r24, Z+2	; 0x02
    24a8:	93 81       	ldd	r25, Z+3	; 0x03
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e8       	ldi	r20, 0x80	; 128
    24b0:	5f e3       	ldi	r21, 0x3F	; 63
    24b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24b6:	88 23       	and	r24, r24
    24b8:	44 f4       	brge	.+16     	; 0x24ca <LCD_voidInit+0xb2>
		__ticks = 1;
    24ba:	fe 01       	movw	r30, r28
    24bc:	ed 5b       	subi	r30, 0xBD	; 189
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	91 83       	std	Z+1, r25	; 0x01
    24c6:	80 83       	st	Z, r24
    24c8:	64 c0       	rjmp	.+200    	; 0x2592 <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
    24ca:	fe 01       	movw	r30, r28
    24cc:	eb 5b       	subi	r30, 0xBB	; 187
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	60 81       	ld	r22, Z
    24d2:	71 81       	ldd	r23, Z+1	; 0x01
    24d4:	82 81       	ldd	r24, Z+2	; 0x02
    24d6:	93 81       	ldd	r25, Z+3	; 0x03
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	3f ef       	ldi	r19, 0xFF	; 255
    24dc:	4f e7       	ldi	r20, 0x7F	; 127
    24de:	57 e4       	ldi	r21, 0x47	; 71
    24e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24e4:	18 16       	cp	r1, r24
    24e6:	0c f0       	brlt	.+2      	; 0x24ea <LCD_voidInit+0xd2>
    24e8:	43 c0       	rjmp	.+134    	; 0x2570 <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ea:	fe 01       	movw	r30, r28
    24ec:	e7 5b       	subi	r30, 0xB7	; 183
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	60 81       	ld	r22, Z
    24f2:	71 81       	ldd	r23, Z+1	; 0x01
    24f4:	82 81       	ldd	r24, Z+2	; 0x02
    24f6:	93 81       	ldd	r25, Z+3	; 0x03
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e2       	ldi	r20, 0x20	; 32
    24fe:	51 e4       	ldi	r21, 0x41	; 65
    2500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	8e 01       	movw	r16, r28
    250a:	0d 5b       	subi	r16, 0xBD	; 189
    250c:	1f 4f       	sbci	r17, 0xFF	; 255
    250e:	bc 01       	movw	r22, r24
    2510:	cd 01       	movw	r24, r26
    2512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	f8 01       	movw	r30, r16
    251c:	91 83       	std	Z+1, r25	; 0x01
    251e:	80 83       	st	Z, r24
    2520:	1f c0       	rjmp	.+62     	; 0x2560 <LCD_voidInit+0x148>
    2522:	fe 01       	movw	r30, r28
    2524:	ef 5b       	subi	r30, 0xBF	; 191
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	88 ec       	ldi	r24, 0xC8	; 200
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	91 83       	std	Z+1, r25	; 0x01
    252e:	80 83       	st	Z, r24
    2530:	fe 01       	movw	r30, r28
    2532:	ef 5b       	subi	r30, 0xBF	; 191
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	80 81       	ld	r24, Z
    2538:	91 81       	ldd	r25, Z+1	; 0x01
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <LCD_voidInit+0x122>
    253e:	fe 01       	movw	r30, r28
    2540:	ef 5b       	subi	r30, 0xBF	; 191
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	91 83       	std	Z+1, r25	; 0x01
    2546:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2548:	de 01       	movw	r26, r28
    254a:	ad 5b       	subi	r26, 0xBD	; 189
    254c:	bf 4f       	sbci	r27, 0xFF	; 255
    254e:	fe 01       	movw	r30, r28
    2550:	ed 5b       	subi	r30, 0xBD	; 189
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	80 81       	ld	r24, Z
    2556:	91 81       	ldd	r25, Z+1	; 0x01
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	11 96       	adiw	r26, 0x01	; 1
    255c:	9c 93       	st	X, r25
    255e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2560:	fe 01       	movw	r30, r28
    2562:	ed 5b       	subi	r30, 0xBD	; 189
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 81       	ld	r24, Z
    2568:	91 81       	ldd	r25, Z+1	; 0x01
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	d1 f6       	brne	.-76     	; 0x2522 <LCD_voidInit+0x10a>
    256e:	24 c0       	rjmp	.+72     	; 0x25b8 <LCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2570:	8e 01       	movw	r16, r28
    2572:	0d 5b       	subi	r16, 0xBD	; 189
    2574:	1f 4f       	sbci	r17, 0xFF	; 255
    2576:	fe 01       	movw	r30, r28
    2578:	eb 5b       	subi	r30, 0xBB	; 187
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	60 81       	ld	r22, Z
    257e:	71 81       	ldd	r23, Z+1	; 0x01
    2580:	82 81       	ldd	r24, Z+2	; 0x02
    2582:	93 81       	ldd	r25, Z+3	; 0x03
    2584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	f8 01       	movw	r30, r16
    258e:	91 83       	std	Z+1, r25	; 0x01
    2590:	80 83       	st	Z, r24
    2592:	fe 01       	movw	r30, r28
    2594:	ed 5b       	subi	r30, 0xBD	; 189
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	80 81       	ld	r24, Z
    259a:	91 81       	ldd	r25, Z+1	; 0x01
    259c:	fe 01       	movw	r30, r28
    259e:	ff 96       	adiw	r30, 0x3f	; 63
    25a0:	91 83       	std	Z+1, r25	; 0x01
    25a2:	80 83       	st	Z, r24
    25a4:	fe 01       	movw	r30, r28
    25a6:	ff 96       	adiw	r30, 0x3f	; 63
    25a8:	80 81       	ld	r24, Z
    25aa:	91 81       	ldd	r25, Z+1	; 0x01
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <LCD_voidInit+0x194>
    25b0:	fe 01       	movw	r30, r28
    25b2:	ff 96       	adiw	r30, 0x3f	; 63
    25b4:	91 83       	std	Z+1, r25	; 0x01
    25b6:	80 83       	st	Z, r24
	
	_delay_ms(35);
	LCD_voidSendCommand(FUNCTION_SET);
    25b8:	88 e3       	ldi	r24, 0x38	; 56
    25ba:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_voidSendCommand>
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	a8 e4       	ldi	r26, 0x48	; 72
    25c4:	b2 e4       	ldi	r27, 0x42	; 66
    25c6:	8b af       	std	Y+59, r24	; 0x3b
    25c8:	9c af       	std	Y+60, r25	; 0x3c
    25ca:	ad af       	std	Y+61, r26	; 0x3d
    25cc:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25ce:	6b ad       	ldd	r22, Y+59	; 0x3b
    25d0:	7c ad       	ldd	r23, Y+60	; 0x3c
    25d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    25d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    25d6:	2b ea       	ldi	r18, 0xAB	; 171
    25d8:	3a ea       	ldi	r19, 0xAA	; 170
    25da:	4a e2       	ldi	r20, 0x2A	; 42
    25dc:	50 e4       	ldi	r21, 0x40	; 64
    25de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	8f ab       	std	Y+55, r24	; 0x37
    25e8:	98 af       	std	Y+56, r25	; 0x38
    25ea:	a9 af       	std	Y+57, r26	; 0x39
    25ec:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    25ee:	6f a9       	ldd	r22, Y+55	; 0x37
    25f0:	78 ad       	ldd	r23, Y+56	; 0x38
    25f2:	89 ad       	ldd	r24, Y+57	; 0x39
    25f4:	9a ad       	ldd	r25, Y+58	; 0x3a
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e8       	ldi	r20, 0x80	; 128
    25fc:	5f e3       	ldi	r21, 0x3F	; 63
    25fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2602:	88 23       	and	r24, r24
    2604:	1c f4       	brge	.+6      	; 0x260c <LCD_voidInit+0x1f4>
		__ticks = 1;
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	8e ab       	std	Y+54, r24	; 0x36
    260a:	91 c0       	rjmp	.+290    	; 0x272e <LCD_voidInit+0x316>
	else if (__tmp > 255)
    260c:	6f a9       	ldd	r22, Y+55	; 0x37
    260e:	78 ad       	ldd	r23, Y+56	; 0x38
    2610:	89 ad       	ldd	r24, Y+57	; 0x39
    2612:	9a ad       	ldd	r25, Y+58	; 0x3a
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	4f e7       	ldi	r20, 0x7F	; 127
    261a:	53 e4       	ldi	r21, 0x43	; 67
    261c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2620:	18 16       	cp	r1, r24
    2622:	0c f0       	brlt	.+2      	; 0x2626 <LCD_voidInit+0x20e>
    2624:	7b c0       	rjmp	.+246    	; 0x271c <LCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    2626:	6b ad       	ldd	r22, Y+59	; 0x3b
    2628:	7c ad       	ldd	r23, Y+60	; 0x3c
    262a:	8d ad       	ldd	r24, Y+61	; 0x3d
    262c:	9e ad       	ldd	r25, Y+62	; 0x3e
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	4a e7       	ldi	r20, 0x7A	; 122
    2634:	54 e4       	ldi	r21, 0x44	; 68
    2636:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	8a ab       	std	Y+50, r24	; 0x32
    2640:	9b ab       	std	Y+51, r25	; 0x33
    2642:	ac ab       	std	Y+52, r26	; 0x34
    2644:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2646:	6a a9       	ldd	r22, Y+50	; 0x32
    2648:	7b a9       	ldd	r23, Y+51	; 0x33
    264a:	8c a9       	ldd	r24, Y+52	; 0x34
    264c:	9d a9       	ldd	r25, Y+53	; 0x35
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	4a ef       	ldi	r20, 0xFA	; 250
    2654:	54 e4       	ldi	r21, 0x44	; 68
    2656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	8e a7       	std	Y+46, r24	; 0x2e
    2660:	9f a7       	std	Y+47, r25	; 0x2f
    2662:	a8 ab       	std	Y+48, r26	; 0x30
    2664:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2666:	6e a5       	ldd	r22, Y+46	; 0x2e
    2668:	7f a5       	ldd	r23, Y+47	; 0x2f
    266a:	88 a9       	ldd	r24, Y+48	; 0x30
    266c:	99 a9       	ldd	r25, Y+49	; 0x31
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	40 e8       	ldi	r20, 0x80	; 128
    2674:	5f e3       	ldi	r21, 0x3F	; 63
    2676:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    267a:	88 23       	and	r24, r24
    267c:	2c f4       	brge	.+10     	; 0x2688 <LCD_voidInit+0x270>
		__ticks = 1;
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	9d a7       	std	Y+45, r25	; 0x2d
    2684:	8c a7       	std	Y+44, r24	; 0x2c
    2686:	3f c0       	rjmp	.+126    	; 0x2706 <LCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    2688:	6e a5       	ldd	r22, Y+46	; 0x2e
    268a:	7f a5       	ldd	r23, Y+47	; 0x2f
    268c:	88 a9       	ldd	r24, Y+48	; 0x30
    268e:	99 a9       	ldd	r25, Y+49	; 0x31
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	3f ef       	ldi	r19, 0xFF	; 255
    2694:	4f e7       	ldi	r20, 0x7F	; 127
    2696:	57 e4       	ldi	r21, 0x47	; 71
    2698:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    269c:	18 16       	cp	r1, r24
    269e:	4c f5       	brge	.+82     	; 0x26f2 <LCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a0:	6a a9       	ldd	r22, Y+50	; 0x32
    26a2:	7b a9       	ldd	r23, Y+51	; 0x33
    26a4:	8c a9       	ldd	r24, Y+52	; 0x34
    26a6:	9d a9       	ldd	r25, Y+53	; 0x35
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e2       	ldi	r20, 0x20	; 32
    26ae:	51 e4       	ldi	r21, 0x41	; 65
    26b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	bc 01       	movw	r22, r24
    26ba:	cd 01       	movw	r24, r26
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9d a7       	std	Y+45, r25	; 0x2d
    26c6:	8c a7       	std	Y+44, r24	; 0x2c
    26c8:	0f c0       	rjmp	.+30     	; 0x26e8 <LCD_voidInit+0x2d0>
    26ca:	88 ec       	ldi	r24, 0xC8	; 200
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	9b a7       	std	Y+43, r25	; 0x2b
    26d0:	8a a7       	std	Y+42, r24	; 0x2a
    26d2:	8a a5       	ldd	r24, Y+42	; 0x2a
    26d4:	9b a5       	ldd	r25, Y+43	; 0x2b
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <LCD_voidInit+0x2be>
    26da:	9b a7       	std	Y+43, r25	; 0x2b
    26dc:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26de:	8c a5       	ldd	r24, Y+44	; 0x2c
    26e0:	9d a5       	ldd	r25, Y+45	; 0x2d
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	9d a7       	std	Y+45, r25	; 0x2d
    26e6:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e8:	8c a5       	ldd	r24, Y+44	; 0x2c
    26ea:	9d a5       	ldd	r25, Y+45	; 0x2d
    26ec:	00 97       	sbiw	r24, 0x00	; 0
    26ee:	69 f7       	brne	.-38     	; 0x26ca <LCD_voidInit+0x2b2>
    26f0:	24 c0       	rjmp	.+72     	; 0x273a <LCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f2:	6e a5       	ldd	r22, Y+46	; 0x2e
    26f4:	7f a5       	ldd	r23, Y+47	; 0x2f
    26f6:	88 a9       	ldd	r24, Y+48	; 0x30
    26f8:	99 a9       	ldd	r25, Y+49	; 0x31
    26fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	9d a7       	std	Y+45, r25	; 0x2d
    2704:	8c a7       	std	Y+44, r24	; 0x2c
    2706:	8c a5       	ldd	r24, Y+44	; 0x2c
    2708:	9d a5       	ldd	r25, Y+45	; 0x2d
    270a:	99 a7       	std	Y+41, r25	; 0x29
    270c:	88 a7       	std	Y+40, r24	; 0x28
    270e:	88 a5       	ldd	r24, Y+40	; 0x28
    2710:	99 a5       	ldd	r25, Y+41	; 0x29
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	f1 f7       	brne	.-4      	; 0x2712 <LCD_voidInit+0x2fa>
    2716:	99 a7       	std	Y+41, r25	; 0x29
    2718:	88 a7       	std	Y+40, r24	; 0x28
    271a:	0f c0       	rjmp	.+30     	; 0x273a <LCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    271c:	6f a9       	ldd	r22, Y+55	; 0x37
    271e:	78 ad       	ldd	r23, Y+56	; 0x38
    2720:	89 ad       	ldd	r24, Y+57	; 0x39
    2722:	9a ad       	ldd	r25, Y+58	; 0x3a
    2724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	8e ab       	std	Y+54, r24	; 0x36
    272e:	8e a9       	ldd	r24, Y+54	; 0x36
    2730:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2732:	8f a1       	ldd	r24, Y+39	; 0x27
    2734:	8a 95       	dec	r24
    2736:	f1 f7       	brne	.-4      	; 0x2734 <LCD_voidInit+0x31c>
    2738:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	LCD_voidSendCommand(DISPLAY_ON_OFF);
    273a:	8f e0       	ldi	r24, 0x0F	; 15
    273c:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_voidSendCommand>
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	a8 e4       	ldi	r26, 0x48	; 72
    2746:	b2 e4       	ldi	r27, 0x42	; 66
    2748:	8b a3       	std	Y+35, r24	; 0x23
    274a:	9c a3       	std	Y+36, r25	; 0x24
    274c:	ad a3       	std	Y+37, r26	; 0x25
    274e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2750:	6b a1       	ldd	r22, Y+35	; 0x23
    2752:	7c a1       	ldd	r23, Y+36	; 0x24
    2754:	8d a1       	ldd	r24, Y+37	; 0x25
    2756:	9e a1       	ldd	r25, Y+38	; 0x26
    2758:	2b ea       	ldi	r18, 0xAB	; 171
    275a:	3a ea       	ldi	r19, 0xAA	; 170
    275c:	4a e2       	ldi	r20, 0x2A	; 42
    275e:	50 e4       	ldi	r21, 0x40	; 64
    2760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	8f 8f       	std	Y+31, r24	; 0x1f
    276a:	98 a3       	std	Y+32, r25	; 0x20
    276c:	a9 a3       	std	Y+33, r26	; 0x21
    276e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2770:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2772:	78 a1       	ldd	r23, Y+32	; 0x20
    2774:	89 a1       	ldd	r24, Y+33	; 0x21
    2776:	9a a1       	ldd	r25, Y+34	; 0x22
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e8       	ldi	r20, 0x80	; 128
    277e:	5f e3       	ldi	r21, 0x3F	; 63
    2780:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2784:	88 23       	and	r24, r24
    2786:	1c f4       	brge	.+6      	; 0x278e <LCD_voidInit+0x376>
		__ticks = 1;
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	8e 8f       	std	Y+30, r24	; 0x1e
    278c:	91 c0       	rjmp	.+290    	; 0x28b0 <LCD_voidInit+0x498>
	else if (__tmp > 255)
    278e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2790:	78 a1       	ldd	r23, Y+32	; 0x20
    2792:	89 a1       	ldd	r24, Y+33	; 0x21
    2794:	9a a1       	ldd	r25, Y+34	; 0x22
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	4f e7       	ldi	r20, 0x7F	; 127
    279c:	53 e4       	ldi	r21, 0x43	; 67
    279e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27a2:	18 16       	cp	r1, r24
    27a4:	0c f0       	brlt	.+2      	; 0x27a8 <LCD_voidInit+0x390>
    27a6:	7b c0       	rjmp	.+246    	; 0x289e <LCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    27a8:	6b a1       	ldd	r22, Y+35	; 0x23
    27aa:	7c a1       	ldd	r23, Y+36	; 0x24
    27ac:	8d a1       	ldd	r24, Y+37	; 0x25
    27ae:	9e a1       	ldd	r25, Y+38	; 0x26
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	4a e7       	ldi	r20, 0x7A	; 122
    27b6:	54 e4       	ldi	r21, 0x44	; 68
    27b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	8a 8f       	std	Y+26, r24	; 0x1a
    27c2:	9b 8f       	std	Y+27, r25	; 0x1b
    27c4:	ac 8f       	std	Y+28, r26	; 0x1c
    27c6:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    27ca:	7b 8d       	ldd	r23, Y+27	; 0x1b
    27cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27ce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	4a ef       	ldi	r20, 0xFA	; 250
    27d6:	54 e4       	ldi	r21, 0x44	; 68
    27d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	8e 8b       	std	Y+22, r24	; 0x16
    27e2:	9f 8b       	std	Y+23, r25	; 0x17
    27e4:	a8 8f       	std	Y+24, r26	; 0x18
    27e6:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    27e8:	6e 89       	ldd	r22, Y+22	; 0x16
    27ea:	7f 89       	ldd	r23, Y+23	; 0x17
    27ec:	88 8d       	ldd	r24, Y+24	; 0x18
    27ee:	99 8d       	ldd	r25, Y+25	; 0x19
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e8       	ldi	r20, 0x80	; 128
    27f6:	5f e3       	ldi	r21, 0x3F	; 63
    27f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27fc:	88 23       	and	r24, r24
    27fe:	2c f4       	brge	.+10     	; 0x280a <LCD_voidInit+0x3f2>
		__ticks = 1;
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9d 8b       	std	Y+21, r25	; 0x15
    2806:	8c 8b       	std	Y+20, r24	; 0x14
    2808:	3f c0       	rjmp	.+126    	; 0x2888 <LCD_voidInit+0x470>
	else if (__tmp > 65535)
    280a:	6e 89       	ldd	r22, Y+22	; 0x16
    280c:	7f 89       	ldd	r23, Y+23	; 0x17
    280e:	88 8d       	ldd	r24, Y+24	; 0x18
    2810:	99 8d       	ldd	r25, Y+25	; 0x19
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	3f ef       	ldi	r19, 0xFF	; 255
    2816:	4f e7       	ldi	r20, 0x7F	; 127
    2818:	57 e4       	ldi	r21, 0x47	; 71
    281a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    281e:	18 16       	cp	r1, r24
    2820:	4c f5       	brge	.+82     	; 0x2874 <LCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2822:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2824:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2826:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2828:	9d 8d       	ldd	r25, Y+29	; 0x1d
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e2       	ldi	r20, 0x20	; 32
    2830:	51 e4       	ldi	r21, 0x41	; 65
    2832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	bc 01       	movw	r22, r24
    283c:	cd 01       	movw	r24, r26
    283e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	9d 8b       	std	Y+21, r25	; 0x15
    2848:	8c 8b       	std	Y+20, r24	; 0x14
    284a:	0f c0       	rjmp	.+30     	; 0x286a <LCD_voidInit+0x452>
    284c:	88 ec       	ldi	r24, 0xC8	; 200
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	9b 8b       	std	Y+19, r25	; 0x13
    2852:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2854:	8a 89       	ldd	r24, Y+18	; 0x12
    2856:	9b 89       	ldd	r25, Y+19	; 0x13
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	f1 f7       	brne	.-4      	; 0x2858 <LCD_voidInit+0x440>
    285c:	9b 8b       	std	Y+19, r25	; 0x13
    285e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2860:	8c 89       	ldd	r24, Y+20	; 0x14
    2862:	9d 89       	ldd	r25, Y+21	; 0x15
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	9d 8b       	std	Y+21, r25	; 0x15
    2868:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286a:	8c 89       	ldd	r24, Y+20	; 0x14
    286c:	9d 89       	ldd	r25, Y+21	; 0x15
    286e:	00 97       	sbiw	r24, 0x00	; 0
    2870:	69 f7       	brne	.-38     	; 0x284c <LCD_voidInit+0x434>
    2872:	24 c0       	rjmp	.+72     	; 0x28bc <LCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2874:	6e 89       	ldd	r22, Y+22	; 0x16
    2876:	7f 89       	ldd	r23, Y+23	; 0x17
    2878:	88 8d       	ldd	r24, Y+24	; 0x18
    287a:	99 8d       	ldd	r25, Y+25	; 0x19
    287c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	9d 8b       	std	Y+21, r25	; 0x15
    2886:	8c 8b       	std	Y+20, r24	; 0x14
    2888:	8c 89       	ldd	r24, Y+20	; 0x14
    288a:	9d 89       	ldd	r25, Y+21	; 0x15
    288c:	99 8b       	std	Y+17, r25	; 0x11
    288e:	88 8b       	std	Y+16, r24	; 0x10
    2890:	88 89       	ldd	r24, Y+16	; 0x10
    2892:	99 89       	ldd	r25, Y+17	; 0x11
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	f1 f7       	brne	.-4      	; 0x2894 <LCD_voidInit+0x47c>
    2898:	99 8b       	std	Y+17, r25	; 0x11
    289a:	88 8b       	std	Y+16, r24	; 0x10
    289c:	0f c0       	rjmp	.+30     	; 0x28bc <LCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    289e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    28a0:	78 a1       	ldd	r23, Y+32	; 0x20
    28a2:	89 a1       	ldd	r24, Y+33	; 0x21
    28a4:	9a a1       	ldd	r25, Y+34	; 0x22
    28a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	8e 8f       	std	Y+30, r24	; 0x1e
    28b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28b2:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28b6:	8a 95       	dec	r24
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <LCD_voidInit+0x49e>
    28ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	LCD_voidSendCommand(CLEAR);
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_voidSendCommand>
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	a0 e0       	ldi	r26, 0x00	; 0
    28c8:	b0 e4       	ldi	r27, 0x40	; 64
    28ca:	8b 87       	std	Y+11, r24	; 0x0b
    28cc:	9c 87       	std	Y+12, r25	; 0x0c
    28ce:	ad 87       	std	Y+13, r26	; 0x0d
    28d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	4a ef       	ldi	r20, 0xFA	; 250
    28e0:	54 e4       	ldi	r21, 0x44	; 68
    28e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	8f 83       	std	Y+7, r24	; 0x07
    28ec:	98 87       	std	Y+8, r25	; 0x08
    28ee:	a9 87       	std	Y+9, r26	; 0x09
    28f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28f2:	6f 81       	ldd	r22, Y+7	; 0x07
    28f4:	78 85       	ldd	r23, Y+8	; 0x08
    28f6:	89 85       	ldd	r24, Y+9	; 0x09
    28f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	40 e8       	ldi	r20, 0x80	; 128
    2900:	5f e3       	ldi	r21, 0x3F	; 63
    2902:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2906:	88 23       	and	r24, r24
    2908:	2c f4       	brge	.+10     	; 0x2914 <LCD_voidInit+0x4fc>
		__ticks = 1;
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	9e 83       	std	Y+6, r25	; 0x06
    2910:	8d 83       	std	Y+5, r24	; 0x05
    2912:	3f c0       	rjmp	.+126    	; 0x2992 <LCD_voidInit+0x57a>
	else if (__tmp > 65535)
    2914:	6f 81       	ldd	r22, Y+7	; 0x07
    2916:	78 85       	ldd	r23, Y+8	; 0x08
    2918:	89 85       	ldd	r24, Y+9	; 0x09
    291a:	9a 85       	ldd	r25, Y+10	; 0x0a
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	3f ef       	ldi	r19, 0xFF	; 255
    2920:	4f e7       	ldi	r20, 0x7F	; 127
    2922:	57 e4       	ldi	r21, 0x47	; 71
    2924:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2928:	18 16       	cp	r1, r24
    292a:	4c f5       	brge	.+82     	; 0x297e <LCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    292c:	6b 85       	ldd	r22, Y+11	; 0x0b
    292e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2930:	8d 85       	ldd	r24, Y+13	; 0x0d
    2932:	9e 85       	ldd	r25, Y+14	; 0x0e
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	40 e2       	ldi	r20, 0x20	; 32
    293a:	51 e4       	ldi	r21, 0x41	; 65
    293c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	bc 01       	movw	r22, r24
    2946:	cd 01       	movw	r24, r26
    2948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	9e 83       	std	Y+6, r25	; 0x06
    2952:	8d 83       	std	Y+5, r24	; 0x05
    2954:	0f c0       	rjmp	.+30     	; 0x2974 <LCD_voidInit+0x55c>
    2956:	88 ec       	ldi	r24, 0xC8	; 200
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	9c 83       	std	Y+4, r25	; 0x04
    295c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
    2960:	9c 81       	ldd	r25, Y+4	; 0x04
    2962:	01 97       	sbiw	r24, 0x01	; 1
    2964:	f1 f7       	brne	.-4      	; 0x2962 <LCD_voidInit+0x54a>
    2966:	9c 83       	std	Y+4, r25	; 0x04
    2968:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    296a:	8d 81       	ldd	r24, Y+5	; 0x05
    296c:	9e 81       	ldd	r25, Y+6	; 0x06
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	9e 83       	std	Y+6, r25	; 0x06
    2972:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2974:	8d 81       	ldd	r24, Y+5	; 0x05
    2976:	9e 81       	ldd	r25, Y+6	; 0x06
    2978:	00 97       	sbiw	r24, 0x00	; 0
    297a:	69 f7       	brne	.-38     	; 0x2956 <LCD_voidInit+0x53e>
    297c:	14 c0       	rjmp	.+40     	; 0x29a6 <LCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297e:	6f 81       	ldd	r22, Y+7	; 0x07
    2980:	78 85       	ldd	r23, Y+8	; 0x08
    2982:	89 85       	ldd	r24, Y+9	; 0x09
    2984:	9a 85       	ldd	r25, Y+10	; 0x0a
    2986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	9e 83       	std	Y+6, r25	; 0x06
    2990:	8d 83       	std	Y+5, r24	; 0x05
    2992:	8d 81       	ldd	r24, Y+5	; 0x05
    2994:	9e 81       	ldd	r25, Y+6	; 0x06
    2996:	9a 83       	std	Y+2, r25	; 0x02
    2998:	89 83       	std	Y+1, r24	; 0x01
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	9a 81       	ldd	r25, Y+2	; 0x02
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	f1 f7       	brne	.-4      	; 0x299e <LCD_voidInit+0x586>
    29a2:	9a 83       	std	Y+2, r25	; 0x02
    29a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    29a6:	c4 5b       	subi	r28, 0xB4	; 180
    29a8:	df 4f       	sbci	r29, 0xFF	; 255
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	1f 91       	pop	r17
    29ba:	0f 91       	pop	r16
    29bc:	08 95       	ret

000029be <LCD_voidSendCommand>:


void LCD_voidSendCommand(u8 Copy_u8Command){
    29be:	df 93       	push	r29
    29c0:	cf 93       	push	r28
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	69 97       	sbiw	r28, 0x19	; 25
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	89 8f       	std	Y+25, r24	; 0x19
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_LOW);
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	60 e0       	ldi	r22, 0x00	; 0
    29d8:	40 e0       	ldi	r20, 0x00	; 0
    29da:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	61 e0       	ldi	r22, 0x01	; 1
    29e2:	40 e0       	ldi	r20, 0x00	; 0
    29e4:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_u8Command);
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	69 8d       	ldd	r22, Y+25	; 0x19
    29ec:	0e 94 91 0c 	call	0x1922	; 0x1922 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	62 e0       	ldi	r22, 0x02	; 2
    29f4:	41 e0       	ldi	r20, 0x01	; 1
    29f6:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_voidSetPinValue>
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	a0 e8       	ldi	r26, 0x80	; 128
    2a00:	bf e3       	ldi	r27, 0x3F	; 63
    2a02:	8d 8b       	std	Y+21, r24	; 0x15
    2a04:	9e 8b       	std	Y+22, r25	; 0x16
    2a06:	af 8b       	std	Y+23, r26	; 0x17
    2a08:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a10:	98 8d       	ldd	r25, Y+24	; 0x18
    2a12:	2b ea       	ldi	r18, 0xAB	; 171
    2a14:	3a ea       	ldi	r19, 0xAA	; 170
    2a16:	4a e2       	ldi	r20, 0x2A	; 42
    2a18:	50 e4       	ldi	r21, 0x40	; 64
    2a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	89 8b       	std	Y+17, r24	; 0x11
    2a24:	9a 8b       	std	Y+18, r25	; 0x12
    2a26:	ab 8b       	std	Y+19, r26	; 0x13
    2a28:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2a2a:	69 89       	ldd	r22, Y+17	; 0x11
    2a2c:	7a 89       	ldd	r23, Y+18	; 0x12
    2a2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a30:	9c 89       	ldd	r25, Y+20	; 0x14
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e8       	ldi	r20, 0x80	; 128
    2a38:	5f e3       	ldi	r21, 0x3F	; 63
    2a3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a3e:	88 23       	and	r24, r24
    2a40:	1c f4       	brge	.+6      	; 0x2a48 <LCD_voidSendCommand+0x8a>
		__ticks = 1;
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	88 8b       	std	Y+16, r24	; 0x10
    2a46:	91 c0       	rjmp	.+290    	; 0x2b6a <LCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    2a48:	69 89       	ldd	r22, Y+17	; 0x11
    2a4a:	7a 89       	ldd	r23, Y+18	; 0x12
    2a4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	4f e7       	ldi	r20, 0x7F	; 127
    2a56:	53 e4       	ldi	r21, 0x43	; 67
    2a58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a5c:	18 16       	cp	r1, r24
    2a5e:	0c f0       	brlt	.+2      	; 0x2a62 <LCD_voidSendCommand+0xa4>
    2a60:	7b c0       	rjmp	.+246    	; 0x2b58 <LCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2a62:	6d 89       	ldd	r22, Y+21	; 0x15
    2a64:	7e 89       	ldd	r23, Y+22	; 0x16
    2a66:	8f 89       	ldd	r24, Y+23	; 0x17
    2a68:	98 8d       	ldd	r25, Y+24	; 0x18
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	4a e7       	ldi	r20, 0x7A	; 122
    2a70:	54 e4       	ldi	r21, 0x44	; 68
    2a72:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	8c 87       	std	Y+12, r24	; 0x0c
    2a7c:	9d 87       	std	Y+13, r25	; 0x0d
    2a7e:	ae 87       	std	Y+14, r26	; 0x0e
    2a80:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a82:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a84:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a86:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a88:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	4a ef       	ldi	r20, 0xFA	; 250
    2a90:	54 e4       	ldi	r21, 0x44	; 68
    2a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	88 87       	std	Y+8, r24	; 0x08
    2a9c:	99 87       	std	Y+9, r25	; 0x09
    2a9e:	aa 87       	std	Y+10, r26	; 0x0a
    2aa0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2aa2:	68 85       	ldd	r22, Y+8	; 0x08
    2aa4:	79 85       	ldd	r23, Y+9	; 0x09
    2aa6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aa8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e8       	ldi	r20, 0x80	; 128
    2ab0:	5f e3       	ldi	r21, 0x3F	; 63
    2ab2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ab6:	88 23       	and	r24, r24
    2ab8:	2c f4       	brge	.+10     	; 0x2ac4 <LCD_voidSendCommand+0x106>
		__ticks = 1;
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	9f 83       	std	Y+7, r25	; 0x07
    2ac0:	8e 83       	std	Y+6, r24	; 0x06
    2ac2:	3f c0       	rjmp	.+126    	; 0x2b42 <LCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    2ac4:	68 85       	ldd	r22, Y+8	; 0x08
    2ac6:	79 85       	ldd	r23, Y+9	; 0x09
    2ac8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aca:	9b 85       	ldd	r25, Y+11	; 0x0b
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	3f ef       	ldi	r19, 0xFF	; 255
    2ad0:	4f e7       	ldi	r20, 0x7F	; 127
    2ad2:	57 e4       	ldi	r21, 0x47	; 71
    2ad4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ad8:	18 16       	cp	r1, r24
    2ada:	4c f5       	brge	.+82     	; 0x2b2e <LCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2adc:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ade:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ae0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ae2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 e2       	ldi	r20, 0x20	; 32
    2aea:	51 e4       	ldi	r21, 0x41	; 65
    2aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	bc 01       	movw	r22, r24
    2af6:	cd 01       	movw	r24, r26
    2af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	9f 83       	std	Y+7, r25	; 0x07
    2b02:	8e 83       	std	Y+6, r24	; 0x06
    2b04:	0f c0       	rjmp	.+30     	; 0x2b24 <LCD_voidSendCommand+0x166>
    2b06:	88 ec       	ldi	r24, 0xC8	; 200
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	9d 83       	std	Y+5, r25	; 0x05
    2b0c:	8c 83       	std	Y+4, r24	; 0x04
    2b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b10:	9d 81       	ldd	r25, Y+5	; 0x05
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	f1 f7       	brne	.-4      	; 0x2b12 <LCD_voidSendCommand+0x154>
    2b16:	9d 83       	std	Y+5, r25	; 0x05
    2b18:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b1c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	9f 83       	std	Y+7, r25	; 0x07
    2b22:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b24:	8e 81       	ldd	r24, Y+6	; 0x06
    2b26:	9f 81       	ldd	r25, Y+7	; 0x07
    2b28:	00 97       	sbiw	r24, 0x00	; 0
    2b2a:	69 f7       	brne	.-38     	; 0x2b06 <LCD_voidSendCommand+0x148>
    2b2c:	24 c0       	rjmp	.+72     	; 0x2b76 <LCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2e:	68 85       	ldd	r22, Y+8	; 0x08
    2b30:	79 85       	ldd	r23, Y+9	; 0x09
    2b32:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b34:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	9f 83       	std	Y+7, r25	; 0x07
    2b40:	8e 83       	std	Y+6, r24	; 0x06
    2b42:	8e 81       	ldd	r24, Y+6	; 0x06
    2b44:	9f 81       	ldd	r25, Y+7	; 0x07
    2b46:	9b 83       	std	Y+3, r25	; 0x03
    2b48:	8a 83       	std	Y+2, r24	; 0x02
    2b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	f1 f7       	brne	.-4      	; 0x2b4e <LCD_voidSendCommand+0x190>
    2b52:	9b 83       	std	Y+3, r25	; 0x03
    2b54:	8a 83       	std	Y+2, r24	; 0x02
    2b56:	0f c0       	rjmp	.+30     	; 0x2b76 <LCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b58:	69 89       	ldd	r22, Y+17	; 0x11
    2b5a:	7a 89       	ldd	r23, Y+18	; 0x12
    2b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	88 8b       	std	Y+16, r24	; 0x10
    2b6a:	88 89       	ldd	r24, Y+16	; 0x10
    2b6c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	8a 95       	dec	r24
    2b72:	f1 f7       	brne	.-4      	; 0x2b70 <LCD_voidSendCommand+0x1b2>
    2b74:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);	
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	62 e0       	ldi	r22, 0x02	; 2
    2b7a:	40 e0       	ldi	r20, 0x00	; 0
    2b7c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_voidSetPinValue>
}
    2b80:	69 96       	adiw	r28, 0x19	; 25
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	f8 94       	cli
    2b86:	de bf       	out	0x3e, r29	; 62
    2b88:	0f be       	out	0x3f, r0	; 63
    2b8a:	cd bf       	out	0x3d, r28	; 61
    2b8c:	cf 91       	pop	r28
    2b8e:	df 91       	pop	r29
    2b90:	08 95       	ret

00002b92 <LCD_voidSendChar>:


void LCD_voidSendChar(u8 Copy_u8Char){
    2b92:	df 93       	push	r29
    2b94:	cf 93       	push	r28
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
    2b9a:	69 97       	sbiw	r28, 0x19	; 25
    2b9c:	0f b6       	in	r0, 0x3f	; 63
    2b9e:	f8 94       	cli
    2ba0:	de bf       	out	0x3e, r29	; 62
    2ba2:	0f be       	out	0x3f, r0	; 63
    2ba4:	cd bf       	out	0x3d, r28	; 61
    2ba6:	89 8f       	std	Y+25, r24	; 0x19
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_HIGH);
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	60 e0       	ldi	r22, 0x00	; 0
    2bac:	41 e0       	ldi	r20, 0x01	; 1
    2bae:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	61 e0       	ldi	r22, 0x01	; 1
    2bb6:	40 e0       	ldi	r20, 0x00	; 0
    2bb8:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT, Copy_u8Char);
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	69 8d       	ldd	r22, Y+25	; 0x19
    2bc0:	0e 94 91 0c 	call	0x1922	; 0x1922 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_HIGH);
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	62 e0       	ldi	r22, 0x02	; 2
    2bc8:	41 e0       	ldi	r20, 0x01	; 1
    2bca:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_voidSetPinValue>
    2bce:	80 e0       	ldi	r24, 0x00	; 0
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	a0 e8       	ldi	r26, 0x80	; 128
    2bd4:	bf e3       	ldi	r27, 0x3F	; 63
    2bd6:	8d 8b       	std	Y+21, r24	; 0x15
    2bd8:	9e 8b       	std	Y+22, r25	; 0x16
    2bda:	af 8b       	std	Y+23, r26	; 0x17
    2bdc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2bde:	6d 89       	ldd	r22, Y+21	; 0x15
    2be0:	7e 89       	ldd	r23, Y+22	; 0x16
    2be2:	8f 89       	ldd	r24, Y+23	; 0x17
    2be4:	98 8d       	ldd	r25, Y+24	; 0x18
    2be6:	2b ea       	ldi	r18, 0xAB	; 171
    2be8:	3a ea       	ldi	r19, 0xAA	; 170
    2bea:	4a e2       	ldi	r20, 0x2A	; 42
    2bec:	50 e4       	ldi	r21, 0x40	; 64
    2bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	89 8b       	std	Y+17, r24	; 0x11
    2bf8:	9a 8b       	std	Y+18, r25	; 0x12
    2bfa:	ab 8b       	std	Y+19, r26	; 0x13
    2bfc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2bfe:	69 89       	ldd	r22, Y+17	; 0x11
    2c00:	7a 89       	ldd	r23, Y+18	; 0x12
    2c02:	8b 89       	ldd	r24, Y+19	; 0x13
    2c04:	9c 89       	ldd	r25, Y+20	; 0x14
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	40 e8       	ldi	r20, 0x80	; 128
    2c0c:	5f e3       	ldi	r21, 0x3F	; 63
    2c0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c12:	88 23       	and	r24, r24
    2c14:	1c f4       	brge	.+6      	; 0x2c1c <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	88 8b       	std	Y+16, r24	; 0x10
    2c1a:	91 c0       	rjmp	.+290    	; 0x2d3e <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    2c1c:	69 89       	ldd	r22, Y+17	; 0x11
    2c1e:	7a 89       	ldd	r23, Y+18	; 0x12
    2c20:	8b 89       	ldd	r24, Y+19	; 0x13
    2c22:	9c 89       	ldd	r25, Y+20	; 0x14
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	4f e7       	ldi	r20, 0x7F	; 127
    2c2a:	53 e4       	ldi	r21, 0x43	; 67
    2c2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c30:	18 16       	cp	r1, r24
    2c32:	0c f0       	brlt	.+2      	; 0x2c36 <LCD_voidSendChar+0xa4>
    2c34:	7b c0       	rjmp	.+246    	; 0x2d2c <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2c36:	6d 89       	ldd	r22, Y+21	; 0x15
    2c38:	7e 89       	ldd	r23, Y+22	; 0x16
    2c3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	4a e7       	ldi	r20, 0x7A	; 122
    2c44:	54 e4       	ldi	r21, 0x44	; 68
    2c46:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	8c 87       	std	Y+12, r24	; 0x0c
    2c50:	9d 87       	std	Y+13, r25	; 0x0d
    2c52:	ae 87       	std	Y+14, r26	; 0x0e
    2c54:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c56:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c58:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c5a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c5c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	4a ef       	ldi	r20, 0xFA	; 250
    2c64:	54 e4       	ldi	r21, 0x44	; 68
    2c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	88 87       	std	Y+8, r24	; 0x08
    2c70:	99 87       	std	Y+9, r25	; 0x09
    2c72:	aa 87       	std	Y+10, r26	; 0x0a
    2c74:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2c76:	68 85       	ldd	r22, Y+8	; 0x08
    2c78:	79 85       	ldd	r23, Y+9	; 0x09
    2c7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	40 e8       	ldi	r20, 0x80	; 128
    2c84:	5f e3       	ldi	r21, 0x3F	; 63
    2c86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c8a:	88 23       	and	r24, r24
    2c8c:	2c f4       	brge	.+10     	; 0x2c98 <LCD_voidSendChar+0x106>
		__ticks = 1;
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	9f 83       	std	Y+7, r25	; 0x07
    2c94:	8e 83       	std	Y+6, r24	; 0x06
    2c96:	3f c0       	rjmp	.+126    	; 0x2d16 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2c98:	68 85       	ldd	r22, Y+8	; 0x08
    2c9a:	79 85       	ldd	r23, Y+9	; 0x09
    2c9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	3f ef       	ldi	r19, 0xFF	; 255
    2ca4:	4f e7       	ldi	r20, 0x7F	; 127
    2ca6:	57 e4       	ldi	r21, 0x47	; 71
    2ca8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cac:	18 16       	cp	r1, r24
    2cae:	4c f5       	brge	.+82     	; 0x2d02 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb0:	6c 85       	ldd	r22, Y+12	; 0x0c
    2cb2:	7d 85       	ldd	r23, Y+13	; 0x0d
    2cb4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cb6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	40 e2       	ldi	r20, 0x20	; 32
    2cbe:	51 e4       	ldi	r21, 0x41	; 65
    2cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	bc 01       	movw	r22, r24
    2cca:	cd 01       	movw	r24, r26
    2ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	9f 83       	std	Y+7, r25	; 0x07
    2cd6:	8e 83       	std	Y+6, r24	; 0x06
    2cd8:	0f c0       	rjmp	.+30     	; 0x2cf8 <LCD_voidSendChar+0x166>
    2cda:	88 ec       	ldi	r24, 0xC8	; 200
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	9d 83       	std	Y+5, r25	; 0x05
    2ce0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	f1 f7       	brne	.-4      	; 0x2ce6 <LCD_voidSendChar+0x154>
    2cea:	9d 83       	std	Y+5, r25	; 0x05
    2cec:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cee:	8e 81       	ldd	r24, Y+6	; 0x06
    2cf0:	9f 81       	ldd	r25, Y+7	; 0x07
    2cf2:	01 97       	sbiw	r24, 0x01	; 1
    2cf4:	9f 83       	std	Y+7, r25	; 0x07
    2cf6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf8:	8e 81       	ldd	r24, Y+6	; 0x06
    2cfa:	9f 81       	ldd	r25, Y+7	; 0x07
    2cfc:	00 97       	sbiw	r24, 0x00	; 0
    2cfe:	69 f7       	brne	.-38     	; 0x2cda <LCD_voidSendChar+0x148>
    2d00:	24 c0       	rjmp	.+72     	; 0x2d4a <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d02:	68 85       	ldd	r22, Y+8	; 0x08
    2d04:	79 85       	ldd	r23, Y+9	; 0x09
    2d06:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d08:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	9f 83       	std	Y+7, r25	; 0x07
    2d14:	8e 83       	std	Y+6, r24	; 0x06
    2d16:	8e 81       	ldd	r24, Y+6	; 0x06
    2d18:	9f 81       	ldd	r25, Y+7	; 0x07
    2d1a:	9b 83       	std	Y+3, r25	; 0x03
    2d1c:	8a 83       	std	Y+2, r24	; 0x02
    2d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d20:	9b 81       	ldd	r25, Y+3	; 0x03
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	f1 f7       	brne	.-4      	; 0x2d22 <LCD_voidSendChar+0x190>
    2d26:	9b 83       	std	Y+3, r25	; 0x03
    2d28:	8a 83       	std	Y+2, r24	; 0x02
    2d2a:	0f c0       	rjmp	.+30     	; 0x2d4a <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d2c:	69 89       	ldd	r22, Y+17	; 0x11
    2d2e:	7a 89       	ldd	r23, Y+18	; 0x12
    2d30:	8b 89       	ldd	r24, Y+19	; 0x13
    2d32:	9c 89       	ldd	r25, Y+20	; 0x14
    2d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	88 8b       	std	Y+16, r24	; 0x10
    2d3e:	88 89       	ldd	r24, Y+16	; 0x10
    2d40:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
    2d44:	8a 95       	dec	r24
    2d46:	f1 f7       	brne	.-4      	; 0x2d44 <LCD_voidSendChar+0x1b2>
    2d48:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN, DIO_LOW);
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	62 e0       	ldi	r22, 0x02	; 2
    2d4e:	40 e0       	ldi	r20, 0x00	; 0
    2d50:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_voidSetPinValue>
	
}
    2d54:	69 96       	adiw	r28, 0x19	; 25
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	08 95       	ret

00002d66 <LCD_voidSendString>:

void LCD_voidSendString	(u8 *Copy_u8String){
    2d66:	df 93       	push	r29
    2d68:	cf 93       	push	r28
    2d6a:	00 d0       	rcall	.+0      	; 0x2d6c <LCD_voidSendString+0x6>
    2d6c:	0f 92       	push	r0
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	9b 83       	std	Y+3, r25	; 0x03
    2d74:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_u8String[Local_U8Counter] != '\0' ; Local_U8Counter++){
    2d76:	19 82       	std	Y+1, r1	; 0x01
    2d78:	0e c0       	rjmp	.+28     	; 0x2d96 <LCD_voidSendString+0x30>
		LCD_voidSendChar(Copy_u8String[Local_U8Counter]);}
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	28 2f       	mov	r18, r24
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	8a 81       	ldd	r24, Y+2	; 0x02
    2d82:	9b 81       	ldd	r25, Y+3	; 0x03
    2d84:	fc 01       	movw	r30, r24
    2d86:	e2 0f       	add	r30, r18
    2d88:	f3 1f       	adc	r31, r19
    2d8a:	80 81       	ld	r24, Z
    2d8c:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <LCD_voidSendChar>
}

void LCD_voidSendString	(u8 *Copy_u8String){

	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_u8String[Local_U8Counter] != '\0' ; Local_U8Counter++){
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	8f 5f       	subi	r24, 0xFF	; 255
    2d94:	89 83       	std	Y+1, r24	; 0x01
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
    2d98:	28 2f       	mov	r18, r24
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2da0:	fc 01       	movw	r30, r24
    2da2:	e2 0f       	add	r30, r18
    2da4:	f3 1f       	adc	r31, r19
    2da6:	80 81       	ld	r24, Z
    2da8:	88 23       	and	r24, r24
    2daa:	39 f7       	brne	.-50     	; 0x2d7a <LCD_voidSendString+0x14>
		LCD_voidSendChar(Copy_u8String[Local_U8Counter]);}
	
	
}
    2dac:	0f 90       	pop	r0
    2dae:	0f 90       	pop	r0
    2db0:	0f 90       	pop	r0
    2db2:	cf 91       	pop	r28
    2db4:	df 91       	pop	r29
    2db6:	08 95       	ret

00002db8 <LCD_voidSetLocation>:

void LCD_voidSetLocation(u8 Copy_u8LineNum, u8 Copy_u8CharNum){
    2db8:	df 93       	push	r29
    2dba:	cf 93       	push	r28
    2dbc:	00 d0       	rcall	.+0      	; 0x2dbe <LCD_voidSetLocation+0x6>
    2dbe:	00 d0       	rcall	.+0      	; 0x2dc0 <LCD_voidSetLocation+0x8>
    2dc0:	cd b7       	in	r28, 0x3d	; 61
    2dc2:	de b7       	in	r29, 0x3e	; 62
    2dc4:	89 83       	std	Y+1, r24	; 0x01
    2dc6:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(Copy_u8LineNum)
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	3c 83       	std	Y+4, r19	; 0x04
    2dd0:	2b 83       	std	Y+3, r18	; 0x03
    2dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd6:	81 30       	cpi	r24, 0x01	; 1
    2dd8:	91 05       	cpc	r25, r1
    2dda:	31 f0       	breq	.+12     	; 0x2de8 <LCD_voidSetLocation+0x30>
    2ddc:	2b 81       	ldd	r18, Y+3	; 0x03
    2dde:	3c 81       	ldd	r19, Y+4	; 0x04
    2de0:	22 30       	cpi	r18, 0x02	; 2
    2de2:	31 05       	cpc	r19, r1
    2de4:	31 f0       	breq	.+12     	; 0x2df2 <LCD_voidSetLocation+0x3a>
    2de6:	09 c0       	rjmp	.+18     	; 0x2dfa <LCD_voidSetLocation+0x42>
	{
	case LCD_LINE1 : LCD_voidSendCommand(0x80 + Copy_u8CharNum); break;
    2de8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dea:	80 58       	subi	r24, 0x80	; 128
    2dec:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_voidSendCommand>
    2df0:	04 c0       	rjmp	.+8      	; 0x2dfa <LCD_voidSetLocation+0x42>

	case LCD_LINE2 : LCD_voidSendCommand(0xC0 + Copy_u8CharNum); break;
    2df2:	8a 81       	ldd	r24, Y+2	; 0x02
    2df4:	80 54       	subi	r24, 0x40	; 64
    2df6:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_voidSendCommand>

	}
	
}
    2dfa:	0f 90       	pop	r0
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	08 95       	ret

00002e08 <LCD_voidSendNumber>:

void LCD_voidSendNumber	(u32 Copy_u32Number){
    2e08:	0f 93       	push	r16
    2e0a:	1f 93       	push	r17
    2e0c:	df 93       	push	r29
    2e0e:	cf 93       	push	r28
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	60 97       	sbiw	r28, 0x10	; 16
    2e16:	0f b6       	in	r0, 0x3f	; 63
    2e18:	f8 94       	cli
    2e1a:	de bf       	out	0x3e, r29	; 62
    2e1c:	0f be       	out	0x3f, r0	; 63
    2e1e:	cd bf       	out	0x3d, r28	; 61
    2e20:	6d 87       	std	Y+13, r22	; 0x0d
    2e22:	7e 87       	std	Y+14, r23	; 0x0e
    2e24:	8f 87       	std	Y+15, r24	; 0x0f
    2e26:	98 8b       	std	Y+16, r25	; 0x10
	u8 Local_u8ASingleNum[11], Local_u8Count = 9;
    2e28:	89 e0       	ldi	r24, 0x09	; 9
    2e2a:	89 83       	std	Y+1, r24	; 0x01
	
	if (Copy_u32Number == 0) { LCD_voidSendChar('0');}
    2e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e30:	af 85       	ldd	r26, Y+15	; 0x0f
    2e32:	b8 89       	ldd	r27, Y+16	; 0x10
    2e34:	00 97       	sbiw	r24, 0x00	; 0
    2e36:	a1 05       	cpc	r26, r1
    2e38:	b1 05       	cpc	r27, r1
    2e3a:	21 f4       	brne	.+8      	; 0x2e44 <LCD_voidSendNumber+0x3c>
    2e3c:	80 e3       	ldi	r24, 0x30	; 48
    2e3e:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <LCD_voidSendChar>
    2e42:	44 c0       	rjmp	.+136    	; 0x2ecc <LCD_voidSendNumber+0xc4>
	else{
		Local_u8ASingleNum[10] = '\0' ;
    2e44:	1c 86       	std	Y+12, r1	; 0x0c
    2e46:	2e c0       	rjmp	.+92     	; 0x2ea4 <LCD_voidSendNumber+0x9c>
		while (Copy_u32Number != 0)
		{
			Local_u8ASingleNum[Local_u8Count] = ((Copy_u32Number % 10) + '0') ;
    2e48:	89 81       	ldd	r24, Y+1	; 0x01
    2e4a:	08 2f       	mov	r16, r24
    2e4c:	10 e0       	ldi	r17, 0x00	; 0
    2e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e52:	af 85       	ldd	r26, Y+15	; 0x0f
    2e54:	b8 89       	ldd	r27, Y+16	; 0x10
    2e56:	2a e0       	ldi	r18, 0x0A	; 10
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	40 e0       	ldi	r20, 0x00	; 0
    2e5c:	50 e0       	ldi	r21, 0x00	; 0
    2e5e:	bc 01       	movw	r22, r24
    2e60:	cd 01       	movw	r24, r26
    2e62:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__udivmodsi4>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	28 2f       	mov	r18, r24
    2e6c:	20 5d       	subi	r18, 0xD0	; 208
    2e6e:	ce 01       	movw	r24, r28
    2e70:	02 96       	adiw	r24, 0x02	; 2
    2e72:	fc 01       	movw	r30, r24
    2e74:	e0 0f       	add	r30, r16
    2e76:	f1 1f       	adc	r31, r17
    2e78:	20 83       	st	Z, r18
			Copy_u32Number /= 10 ;
    2e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e7e:	af 85       	ldd	r26, Y+15	; 0x0f
    2e80:	b8 89       	ldd	r27, Y+16	; 0x10
    2e82:	2a e0       	ldi	r18, 0x0A	; 10
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e0       	ldi	r20, 0x00	; 0
    2e88:	50 e0       	ldi	r21, 0x00	; 0
    2e8a:	bc 01       	movw	r22, r24
    2e8c:	cd 01       	movw	r24, r26
    2e8e:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <__udivmodsi4>
    2e92:	da 01       	movw	r26, r20
    2e94:	c9 01       	movw	r24, r18
    2e96:	8d 87       	std	Y+13, r24	; 0x0d
    2e98:	9e 87       	std	Y+14, r25	; 0x0e
    2e9a:	af 87       	std	Y+15, r26	; 0x0f
    2e9c:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8Count--;
    2e9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ea0:	81 50       	subi	r24, 0x01	; 1
    2ea2:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8ASingleNum[11], Local_u8Count = 9;
	
	if (Copy_u32Number == 0) { LCD_voidSendChar('0');}
	else{
		Local_u8ASingleNum[10] = '\0' ;
		while (Copy_u32Number != 0)
    2ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea8:	af 85       	ldd	r26, Y+15	; 0x0f
    2eaa:	b8 89       	ldd	r27, Y+16	; 0x10
    2eac:	00 97       	sbiw	r24, 0x00	; 0
    2eae:	a1 05       	cpc	r26, r1
    2eb0:	b1 05       	cpc	r27, r1
    2eb2:	51 f6       	brne	.-108    	; 0x2e48 <LCD_voidSendNumber+0x40>
			Local_u8ASingleNum[Local_u8Count] = ((Copy_u32Number % 10) + '0') ;
			Copy_u32Number /= 10 ;
			Local_u8Count--;
		}
		/* send address of the first number in my array till the '\0' */
		LCD_voidSendString(Local_u8ASingleNum + Local_u8Count + 1);
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	88 2f       	mov	r24, r24
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	9c 01       	movw	r18, r24
    2ebc:	2f 5f       	subi	r18, 0xFF	; 255
    2ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec0:	ce 01       	movw	r24, r28
    2ec2:	02 96       	adiw	r24, 0x02	; 2
    2ec4:	82 0f       	add	r24, r18
    2ec6:	93 1f       	adc	r25, r19
    2ec8:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <LCD_voidSendString>
	}
}
    2ecc:	60 96       	adiw	r28, 0x10	; 16
    2ece:	0f b6       	in	r0, 0x3f	; 63
    2ed0:	f8 94       	cli
    2ed2:	de bf       	out	0x3e, r29	; 62
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	cd bf       	out	0x3d, r28	; 61
    2ed8:	cf 91       	pop	r28
    2eda:	df 91       	pop	r29
    2edc:	1f 91       	pop	r17
    2ede:	0f 91       	pop	r16
    2ee0:	08 95       	ret

00002ee2 <LCD_voidDrawSpecialChar>:


void LCD_voidDrawSpecialChar(u8 Copy_u8CharIndex, u8 *Copy_u8SpecialChar){
    2ee2:	df 93       	push	r29
    2ee4:	cf 93       	push	r28
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
    2eea:	6c 97       	sbiw	r28, 0x1c	; 28
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	8a 8f       	std	Y+26, r24	; 0x1a
    2ef8:	7c 8f       	std	Y+28, r23	; 0x1c
    2efa:	6b 8f       	std	Y+27, r22	; 0x1b
	
	LCD_voidSendCommand(0b01000000+(Copy_u8CharIndex * 8));
    2efc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2efe:	88 2f       	mov	r24, r24
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	08 96       	adiw	r24, 0x08	; 8
    2f04:	88 0f       	add	r24, r24
    2f06:	99 1f       	adc	r25, r25
    2f08:	88 0f       	add	r24, r24
    2f0a:	99 1f       	adc	r25, r25
    2f0c:	88 0f       	add	r24, r24
    2f0e:	99 1f       	adc	r25, r25
    2f10:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_voidSendCommand>
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	a0 e2       	ldi	r26, 0x20	; 32
    2f1a:	b2 e4       	ldi	r27, 0x42	; 66
    2f1c:	8d 8b       	std	Y+21, r24	; 0x15
    2f1e:	9e 8b       	std	Y+22, r25	; 0x16
    2f20:	af 8b       	std	Y+23, r26	; 0x17
    2f22:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f24:	6d 89       	ldd	r22, Y+21	; 0x15
    2f26:	7e 89       	ldd	r23, Y+22	; 0x16
    2f28:	8f 89       	ldd	r24, Y+23	; 0x17
    2f2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f2c:	2b ea       	ldi	r18, 0xAB	; 171
    2f2e:	3a ea       	ldi	r19, 0xAA	; 170
    2f30:	4a e2       	ldi	r20, 0x2A	; 42
    2f32:	50 e4       	ldi	r21, 0x40	; 64
    2f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	89 8b       	std	Y+17, r24	; 0x11
    2f3e:	9a 8b       	std	Y+18, r25	; 0x12
    2f40:	ab 8b       	std	Y+19, r26	; 0x13
    2f42:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2f44:	69 89       	ldd	r22, Y+17	; 0x11
    2f46:	7a 89       	ldd	r23, Y+18	; 0x12
    2f48:	8b 89       	ldd	r24, Y+19	; 0x13
    2f4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	40 e8       	ldi	r20, 0x80	; 128
    2f52:	5f e3       	ldi	r21, 0x3F	; 63
    2f54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f58:	88 23       	and	r24, r24
    2f5a:	1c f4       	brge	.+6      	; 0x2f62 <LCD_voidDrawSpecialChar+0x80>
		__ticks = 1;
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	88 8b       	std	Y+16, r24	; 0x10
    2f60:	91 c0       	rjmp	.+290    	; 0x3084 <LCD_voidDrawSpecialChar+0x1a2>
	else if (__tmp > 255)
    2f62:	69 89       	ldd	r22, Y+17	; 0x11
    2f64:	7a 89       	ldd	r23, Y+18	; 0x12
    2f66:	8b 89       	ldd	r24, Y+19	; 0x13
    2f68:	9c 89       	ldd	r25, Y+20	; 0x14
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	4f e7       	ldi	r20, 0x7F	; 127
    2f70:	53 e4       	ldi	r21, 0x43	; 67
    2f72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f76:	18 16       	cp	r1, r24
    2f78:	0c f0       	brlt	.+2      	; 0x2f7c <LCD_voidDrawSpecialChar+0x9a>
    2f7a:	7b c0       	rjmp	.+246    	; 0x3072 <LCD_voidDrawSpecialChar+0x190>
	{
		_delay_ms(__us / 1000.0);
    2f7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f80:	8f 89       	ldd	r24, Y+23	; 0x17
    2f82:	98 8d       	ldd	r25, Y+24	; 0x18
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	4a e7       	ldi	r20, 0x7A	; 122
    2f8a:	54 e4       	ldi	r21, 0x44	; 68
    2f8c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f90:	dc 01       	movw	r26, r24
    2f92:	cb 01       	movw	r24, r22
    2f94:	8c 87       	std	Y+12, r24	; 0x0c
    2f96:	9d 87       	std	Y+13, r25	; 0x0d
    2f98:	ae 87       	std	Y+14, r26	; 0x0e
    2f9a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f9c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f9e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2fa0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fa2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	4a ef       	ldi	r20, 0xFA	; 250
    2faa:	54 e4       	ldi	r21, 0x44	; 68
    2fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	88 87       	std	Y+8, r24	; 0x08
    2fb6:	99 87       	std	Y+9, r25	; 0x09
    2fb8:	aa 87       	std	Y+10, r26	; 0x0a
    2fba:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2fbc:	68 85       	ldd	r22, Y+8	; 0x08
    2fbe:	79 85       	ldd	r23, Y+9	; 0x09
    2fc0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fc2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	40 e8       	ldi	r20, 0x80	; 128
    2fca:	5f e3       	ldi	r21, 0x3F	; 63
    2fcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fd0:	88 23       	and	r24, r24
    2fd2:	2c f4       	brge	.+10     	; 0x2fde <LCD_voidDrawSpecialChar+0xfc>
		__ticks = 1;
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	9f 83       	std	Y+7, r25	; 0x07
    2fda:	8e 83       	std	Y+6, r24	; 0x06
    2fdc:	3f c0       	rjmp	.+126    	; 0x305c <LCD_voidDrawSpecialChar+0x17a>
	else if (__tmp > 65535)
    2fde:	68 85       	ldd	r22, Y+8	; 0x08
    2fe0:	79 85       	ldd	r23, Y+9	; 0x09
    2fe2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fe4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	3f ef       	ldi	r19, 0xFF	; 255
    2fea:	4f e7       	ldi	r20, 0x7F	; 127
    2fec:	57 e4       	ldi	r21, 0x47	; 71
    2fee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ff2:	18 16       	cp	r1, r24
    2ff4:	4c f5       	brge	.+82     	; 0x3048 <LCD_voidDrawSpecialChar+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff6:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ff8:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ffa:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ffc:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	40 e2       	ldi	r20, 0x20	; 32
    3004:	51 e4       	ldi	r21, 0x41	; 65
    3006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	bc 01       	movw	r22, r24
    3010:	cd 01       	movw	r24, r26
    3012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	9f 83       	std	Y+7, r25	; 0x07
    301c:	8e 83       	std	Y+6, r24	; 0x06
    301e:	0f c0       	rjmp	.+30     	; 0x303e <LCD_voidDrawSpecialChar+0x15c>
    3020:	88 ec       	ldi	r24, 0xC8	; 200
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	9d 83       	std	Y+5, r25	; 0x05
    3026:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3028:	8c 81       	ldd	r24, Y+4	; 0x04
    302a:	9d 81       	ldd	r25, Y+5	; 0x05
    302c:	01 97       	sbiw	r24, 0x01	; 1
    302e:	f1 f7       	brne	.-4      	; 0x302c <LCD_voidDrawSpecialChar+0x14a>
    3030:	9d 83       	std	Y+5, r25	; 0x05
    3032:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3034:	8e 81       	ldd	r24, Y+6	; 0x06
    3036:	9f 81       	ldd	r25, Y+7	; 0x07
    3038:	01 97       	sbiw	r24, 0x01	; 1
    303a:	9f 83       	std	Y+7, r25	; 0x07
    303c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    303e:	8e 81       	ldd	r24, Y+6	; 0x06
    3040:	9f 81       	ldd	r25, Y+7	; 0x07
    3042:	00 97       	sbiw	r24, 0x00	; 0
    3044:	69 f7       	brne	.-38     	; 0x3020 <LCD_voidDrawSpecialChar+0x13e>
    3046:	24 c0       	rjmp	.+72     	; 0x3090 <LCD_voidDrawSpecialChar+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3048:	68 85       	ldd	r22, Y+8	; 0x08
    304a:	79 85       	ldd	r23, Y+9	; 0x09
    304c:	8a 85       	ldd	r24, Y+10	; 0x0a
    304e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3054:	dc 01       	movw	r26, r24
    3056:	cb 01       	movw	r24, r22
    3058:	9f 83       	std	Y+7, r25	; 0x07
    305a:	8e 83       	std	Y+6, r24	; 0x06
    305c:	8e 81       	ldd	r24, Y+6	; 0x06
    305e:	9f 81       	ldd	r25, Y+7	; 0x07
    3060:	9b 83       	std	Y+3, r25	; 0x03
    3062:	8a 83       	std	Y+2, r24	; 0x02
    3064:	8a 81       	ldd	r24, Y+2	; 0x02
    3066:	9b 81       	ldd	r25, Y+3	; 0x03
    3068:	01 97       	sbiw	r24, 0x01	; 1
    306a:	f1 f7       	brne	.-4      	; 0x3068 <LCD_voidDrawSpecialChar+0x186>
    306c:	9b 83       	std	Y+3, r25	; 0x03
    306e:	8a 83       	std	Y+2, r24	; 0x02
    3070:	0f c0       	rjmp	.+30     	; 0x3090 <LCD_voidDrawSpecialChar+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3072:	69 89       	ldd	r22, Y+17	; 0x11
    3074:	7a 89       	ldd	r23, Y+18	; 0x12
    3076:	8b 89       	ldd	r24, Y+19	; 0x13
    3078:	9c 89       	ldd	r25, Y+20	; 0x14
    307a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	88 8b       	std	Y+16, r24	; 0x10
    3084:	88 89       	ldd	r24, Y+16	; 0x10
    3086:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3088:	89 81       	ldd	r24, Y+1	; 0x01
    308a:	8a 95       	dec	r24
    308c:	f1 f7       	brne	.-4      	; 0x308a <LCD_voidDrawSpecialChar+0x1a8>
    308e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(40);
	u8 LCD_U8Counter ;
	for (LCD_U8Counter=0 ; LCD_U8Counter<8 ; LCD_U8Counter++)
    3090:	19 8e       	std	Y+25, r1	; 0x19
    3092:	0e c0       	rjmp	.+28     	; 0x30b0 <LCD_voidDrawSpecialChar+0x1ce>
	{
		LCD_voidSendChar(Copy_u8SpecialChar[LCD_U8Counter]);
    3094:	89 8d       	ldd	r24, Y+25	; 0x19
    3096:	28 2f       	mov	r18, r24
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    309c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    309e:	fc 01       	movw	r30, r24
    30a0:	e2 0f       	add	r30, r18
    30a2:	f3 1f       	adc	r31, r19
    30a4:	80 81       	ld	r24, Z
    30a6:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <LCD_voidSendChar>
void LCD_voidDrawSpecialChar(u8 Copy_u8CharIndex, u8 *Copy_u8SpecialChar){
	
	LCD_voidSendCommand(0b01000000+(Copy_u8CharIndex * 8));
	_delay_us(40);
	u8 LCD_U8Counter ;
	for (LCD_U8Counter=0 ; LCD_U8Counter<8 ; LCD_U8Counter++)
    30aa:	89 8d       	ldd	r24, Y+25	; 0x19
    30ac:	8f 5f       	subi	r24, 0xFF	; 255
    30ae:	89 8f       	std	Y+25, r24	; 0x19
    30b0:	89 8d       	ldd	r24, Y+25	; 0x19
    30b2:	88 30       	cpi	r24, 0x08	; 8
    30b4:	78 f3       	brcs	.-34     	; 0x3094 <LCD_voidDrawSpecialChar+0x1b2>
	{
		LCD_voidSendChar(Copy_u8SpecialChar[LCD_U8Counter]);
	}


}
    30b6:	6c 96       	adiw	r28, 0x1c	; 28
    30b8:	0f b6       	in	r0, 0x3f	; 63
    30ba:	f8 94       	cli
    30bc:	de bf       	out	0x3e, r29	; 62
    30be:	0f be       	out	0x3f, r0	; 63
    30c0:	cd bf       	out	0x3d, r28	; 61
    30c2:	cf 91       	pop	r28
    30c4:	df 91       	pop	r29
    30c6:	08 95       	ret

000030c8 <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar(u8 Copy_u8CharIndex){
    30c8:	df 93       	push	r29
    30ca:	cf 93       	push	r28
    30cc:	0f 92       	push	r0
    30ce:	cd b7       	in	r28, 0x3d	; 61
    30d0:	de b7       	in	r29, 0x3e	; 62
    30d2:	89 83       	std	Y+1, r24	; 0x01
	
	LCD_voidSendChar(Copy_u8CharIndex);
    30d4:	89 81       	ldd	r24, Y+1	; 0x01
    30d6:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <LCD_voidSendChar>
}
    30da:	0f 90       	pop	r0
    30dc:	cf 91       	pop	r28
    30de:	df 91       	pop	r29
    30e0:	08 95       	ret

000030e2 <DCMotor_voidInit>:
 * Right motor : PB3 & PB5
 * Left motor  : PB3 & PB4
 * */


void DCMotor_voidInit(){
    30e2:	df 93       	push	r29
    30e4:	cf 93       	push	r28
    30e6:	cd b7       	in	r28, 0x3d	; 61
    30e8:	de b7       	in	r29, 0x3e	; 62
	/* Set PB3 PB4 PB5 as output pins */
	DDRB |= 0b00111000;
    30ea:	a7 e3       	ldi	r26, 0x37	; 55
    30ec:	b0 e0       	ldi	r27, 0x00	; 0
    30ee:	e7 e3       	ldi	r30, 0x37	; 55
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	80 81       	ld	r24, Z
    30f4:	88 63       	ori	r24, 0x38	; 56
    30f6:	8c 93       	st	X, r24

	/* Clear OCR0 */
	OCR0 = 0x00;
    30f8:	ec e5       	ldi	r30, 0x5C	; 92
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	10 82       	st	Z, r1

	/* Set OCR0 (Pin PB3) as output */
	DDRB |= 0b00001000;
    30fe:	a7 e3       	ldi	r26, 0x37	; 55
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	e7 e3       	ldi	r30, 0x37	; 55
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	80 81       	ld	r24, Z
    3108:	88 60       	ori	r24, 0x08	; 8
    310a:	8c 93       	st	X, r24

	/* Set Timer0 in Fast PWM mode*/
	//TIM0_voidInit(); and change mode in the TIM0.h file OR:
	SET_BIT(TCCR0, WGM00); //WGM : Wave generation mode
    310c:	a3 e5       	ldi	r26, 0x53	; 83
    310e:	b0 e0       	ldi	r27, 0x00	; 0
    3110:	e3 e5       	ldi	r30, 0x53	; 83
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 81       	ld	r24, Z
    3116:	80 64       	ori	r24, 0x40	; 64
    3118:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    311a:	a3 e5       	ldi	r26, 0x53	; 83
    311c:	b0 e0       	ldi	r27, 0x00	; 0
    311e:	e3 e5       	ldi	r30, 0x53	; 83
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
    3124:	88 60       	ori	r24, 0x08	; 8
    3126:	8c 93       	st	X, r24

	/* Set Prescaler */
	TCCR0 &= 0b11111000; //clear prescaler bits (CS00 CS01 CS02)
    3128:	a3 e5       	ldi	r26, 0x53	; 83
    312a:	b0 e0       	ldi	r27, 0x00	; 0
    312c:	e3 e5       	ldi	r30, 0x53	; 83
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	80 81       	ld	r24, Z
    3132:	88 7f       	andi	r24, 0xF8	; 248
    3134:	8c 93       	st	X, r24
	TCCR0 |= 0b00000010; //prescaler 1/8
    3136:	a3 e5       	ldi	r26, 0x53	; 83
    3138:	b0 e0       	ldi	r27, 0x00	; 0
    313a:	e3 e5       	ldi	r30, 0x53	; 83
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	80 81       	ld	r24, Z
    3140:	82 60       	ori	r24, 0x02	; 2
    3142:	8c 93       	st	X, r24

	/* Set Compare match action inverting or non-inverting*/
	SET_BIT(TCCR0, COM01);
    3144:	a3 e5       	ldi	r26, 0x53	; 83
    3146:	b0 e0       	ldi	r27, 0x00	; 0
    3148:	e3 e5       	ldi	r30, 0x53	; 83
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	80 81       	ld	r24, Z
    314e:	80 62       	ori	r24, 0x20	; 32
    3150:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, COM00);
    3152:	a3 e5       	ldi	r26, 0x53	; 83
    3154:	b0 e0       	ldi	r27, 0x00	; 0
    3156:	e3 e5       	ldi	r30, 0x53	; 83
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	80 81       	ld	r24, Z
    315c:	8f 7e       	andi	r24, 0xEF	; 239
    315e:	8c 93       	st	X, r24
}
    3160:	cf 91       	pop	r28
    3162:	df 91       	pop	r29
    3164:	08 95       	ret

00003166 <DCMotor_voidForward>:

void DCMotor_voidForward( u8 copy_u8Speed ){
    3166:	df 93       	push	r29
    3168:	cf 93       	push	r28
    316a:	0f 92       	push	r0
    316c:	cd b7       	in	r28, 0x3d	; 61
    316e:	de b7       	in	r29, 0x3e	; 62
    3170:	89 83       	std	Y+1, r24	; 0x01

	/* Set Pins Values*/
	OCR0 = 0xff * copy_u8Speed / 100 ; //PB3 PWM value
    3172:	ec e5       	ldi	r30, 0x5C	; 92
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	89 81       	ldd	r24, Y+1	; 0x01
    3178:	48 2f       	mov	r20, r24
    317a:	50 e0       	ldi	r21, 0x00	; 0
    317c:	ca 01       	movw	r24, r20
    317e:	9c 01       	movw	r18, r24
    3180:	22 0f       	add	r18, r18
    3182:	33 1f       	adc	r19, r19
    3184:	c9 01       	movw	r24, r18
    3186:	96 95       	lsr	r25
    3188:	98 2f       	mov	r25, r24
    318a:	88 27       	eor	r24, r24
    318c:	97 95       	ror	r25
    318e:	87 95       	ror	r24
    3190:	82 1b       	sub	r24, r18
    3192:	93 0b       	sbc	r25, r19
    3194:	84 0f       	add	r24, r20
    3196:	95 1f       	adc	r25, r21
    3198:	24 e6       	ldi	r18, 0x64	; 100
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	b9 01       	movw	r22, r18
    319e:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__divmodhi4>
    31a2:	cb 01       	movw	r24, r22
    31a4:	80 83       	st	Z, r24
	PORTB &= ~(1<<4); // back left
    31a6:	a8 e3       	ldi	r26, 0x38	; 56
    31a8:	b0 e0       	ldi	r27, 0x00	; 0
    31aa:	e8 e3       	ldi	r30, 0x38	; 56
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	80 81       	ld	r24, Z
    31b0:	8f 7e       	andi	r24, 0xEF	; 239
    31b2:	8c 93       	st	X, r24
	PORTB &= ~(1<<5); // back right
    31b4:	a8 e3       	ldi	r26, 0x38	; 56
    31b6:	b0 e0       	ldi	r27, 0x00	; 0
    31b8:	e8 e3       	ldi	r30, 0x38	; 56
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	80 81       	ld	r24, Z
    31be:	8f 7d       	andi	r24, 0xDF	; 223
    31c0:	8c 93       	st	X, r24

}
    31c2:	0f 90       	pop	r0
    31c4:	cf 91       	pop	r28
    31c6:	df 91       	pop	r29
    31c8:	08 95       	ret

000031ca <DCMotor_voidRotRight>:

void DCMotor_voidRotRight(){
    31ca:	df 93       	push	r29
    31cc:	cf 93       	push	r28
    31ce:	cd b7       	in	r28, 0x3d	; 61
    31d0:	de b7       	in	r29, 0x3e	; 62
	OCR0 = 0xff * MED_SPEED / 100 ;  //forward
    31d2:	ec e5       	ldi	r30, 0x5C	; 92
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	8f e7       	ldi	r24, 0x7F	; 127
    31d8:	80 83       	st	Z, r24
	PORTB &= ~(1<<4);				 // back left
    31da:	a8 e3       	ldi	r26, 0x38	; 56
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	e8 e3       	ldi	r30, 0x38	; 56
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 81       	ld	r24, Z
    31e4:	8f 7e       	andi	r24, 0xEF	; 239
    31e6:	8c 93       	st	X, r24
	PORTB |=  (1<<5); 				 // back right
    31e8:	a8 e3       	ldi	r26, 0x38	; 56
    31ea:	b0 e0       	ldi	r27, 0x00	; 0
    31ec:	e8 e3       	ldi	r30, 0x38	; 56
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 81       	ld	r24, Z
    31f2:	80 62       	ori	r24, 0x20	; 32
    31f4:	8c 93       	st	X, r24
}
    31f6:	cf 91       	pop	r28
    31f8:	df 91       	pop	r29
    31fa:	08 95       	ret

000031fc <DCMotor_voidRotLeft>:

void DCMotor_voidRotLeft(){
    31fc:	df 93       	push	r29
    31fe:	cf 93       	push	r28
    3200:	cd b7       	in	r28, 0x3d	; 61
    3202:	de b7       	in	r29, 0x3e	; 62
	OCR0 = 0xff * MED_SPEED / 100 ; //forward
    3204:	ec e5       	ldi	r30, 0x5C	; 92
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	8f e7       	ldi	r24, 0x7F	; 127
    320a:	80 83       	st	Z, r24
	PORTB &= ~(1<<5); 				// back right
    320c:	a8 e3       	ldi	r26, 0x38	; 56
    320e:	b0 e0       	ldi	r27, 0x00	; 0
    3210:	e8 e3       	ldi	r30, 0x38	; 56
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	80 81       	ld	r24, Z
    3216:	8f 7d       	andi	r24, 0xDF	; 223
    3218:	8c 93       	st	X, r24
	PORTB |=  (1<<4); 				// back left
    321a:	a8 e3       	ldi	r26, 0x38	; 56
    321c:	b0 e0       	ldi	r27, 0x00	; 0
    321e:	e8 e3       	ldi	r30, 0x38	; 56
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	80 81       	ld	r24, Z
    3224:	80 61       	ori	r24, 0x10	; 16
    3226:	8c 93       	st	X, r24
}
    3228:	cf 91       	pop	r28
    322a:	df 91       	pop	r29
    322c:	08 95       	ret

0000322e <DCMotor_voidBackward>:

void DCMotor_voidBackward( u8 copy_u8Speed ){
    322e:	df 93       	push	r29
    3230:	cf 93       	push	r28
    3232:	0f 92       	push	r0
    3234:	cd b7       	in	r28, 0x3d	; 61
    3236:	de b7       	in	r29, 0x3e	; 62
    3238:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = 0xff * (100 - copy_u8Speed) / 100 ; // forward: limits back speed
    323a:	ec e5       	ldi	r30, 0x5C	; 92
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	89 81       	ldd	r24, Y+1	; 0x01
    3240:	28 2f       	mov	r18, r24
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	84 e6       	ldi	r24, 0x64	; 100
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	ac 01       	movw	r20, r24
    324a:	42 1b       	sub	r20, r18
    324c:	53 0b       	sbc	r21, r19
    324e:	ca 01       	movw	r24, r20
    3250:	9c 01       	movw	r18, r24
    3252:	22 0f       	add	r18, r18
    3254:	33 1f       	adc	r19, r19
    3256:	c9 01       	movw	r24, r18
    3258:	96 95       	lsr	r25
    325a:	98 2f       	mov	r25, r24
    325c:	88 27       	eor	r24, r24
    325e:	97 95       	ror	r25
    3260:	87 95       	ror	r24
    3262:	82 1b       	sub	r24, r18
    3264:	93 0b       	sbc	r25, r19
    3266:	84 0f       	add	r24, r20
    3268:	95 1f       	adc	r25, r21
    326a:	24 e6       	ldi	r18, 0x64	; 100
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	b9 01       	movw	r22, r18
    3270:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__divmodhi4>
    3274:	cb 01       	movw	r24, r22
    3276:	80 83       	st	Z, r24
	PORTB |= (1<<4); 						   // back left : HIGH
    3278:	a8 e3       	ldi	r26, 0x38	; 56
    327a:	b0 e0       	ldi	r27, 0x00	; 0
    327c:	e8 e3       	ldi	r30, 0x38	; 56
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	80 81       	ld	r24, Z
    3282:	80 61       	ori	r24, 0x10	; 16
    3284:	8c 93       	st	X, r24
	PORTB |= (1<<5); 						   // back right: HIGH
    3286:	a8 e3       	ldi	r26, 0x38	; 56
    3288:	b0 e0       	ldi	r27, 0x00	; 0
    328a:	e8 e3       	ldi	r30, 0x38	; 56
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	80 81       	ld	r24, Z
    3290:	80 62       	ori	r24, 0x20	; 32
    3292:	8c 93       	st	X, r24
}
    3294:	0f 90       	pop	r0
    3296:	cf 91       	pop	r28
    3298:	df 91       	pop	r29
    329a:	08 95       	ret

0000329c <DCMotor_voidStop>:

void DCMotor_voidStop(){
    329c:	df 93       	push	r29
    329e:	cf 93       	push	r28
    32a0:	cd b7       	in	r28, 0x3d	; 61
    32a2:	de b7       	in	r29, 0x3e	; 62
	OCR0 = 0x00 ; 		//forward
    32a4:	ec e5       	ldi	r30, 0x5C	; 92
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	10 82       	st	Z, r1
	PORTB &= ~(1<<5); 	// back right
    32aa:	a8 e3       	ldi	r26, 0x38	; 56
    32ac:	b0 e0       	ldi	r27, 0x00	; 0
    32ae:	e8 e3       	ldi	r30, 0x38	; 56
    32b0:	f0 e0       	ldi	r31, 0x00	; 0
    32b2:	80 81       	ld	r24, Z
    32b4:	8f 7d       	andi	r24, 0xDF	; 223
    32b6:	8c 93       	st	X, r24
	PORTB &= ~(1<<4); 	// back left
    32b8:	a8 e3       	ldi	r26, 0x38	; 56
    32ba:	b0 e0       	ldi	r27, 0x00	; 0
    32bc:	e8 e3       	ldi	r30, 0x38	; 56
    32be:	f0 e0       	ldi	r31, 0x00	; 0
    32c0:	80 81       	ld	r24, Z
    32c2:	8f 7e       	andi	r24, 0xEF	; 239
    32c4:	8c 93       	st	X, r24
}
    32c6:	cf 91       	pop	r28
    32c8:	df 91       	pop	r29
    32ca:	08 95       	ret

000032cc <main>:

void Task_Ultrasonic (void);
void Task_Motors (void);
void Task_LCD (void);

int main(void){
    32cc:	df 93       	push	r29
    32ce:	cf 93       	push	r28
    32d0:	cd b7       	in	r28, 0x3d	; 61
    32d2:	de b7       	in	r29, 0x3e	; 62

	RTOS_voidInit(TIM0_PRESCALER_8, 1);
    32d4:	82 e0       	ldi	r24, 0x02	; 2
    32d6:	61 e0       	ldi	r22, 0x01	; 1
    32d8:	0e 94 de 0c 	call	0x19bc	; 0x19bc <RTOS_voidInit>
	LCD_voidInit();
    32dc:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_voidInit>
	ULTRASONIC_voidInit();
    32e0:	0e 94 2f 10 	call	0x205e	; 0x205e <ULTRASONIC_voidInit>
	DCMotor_voidInit();
    32e4:	0e 94 71 18 	call	0x30e2	; 0x30e2 <DCMotor_voidInit>

	RTOS_create_task(
    32e8:	80 e6       	ldi	r24, 0x60	; 96
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	2d e8       	ldi	r18, 0x8D	; 141
    32ee:	39 e1       	ldi	r19, 0x19	; 25
    32f0:	60 e0       	ldi	r22, 0x00	; 0
    32f2:	4c e3       	ldi	r20, 0x3C	; 60
    32f4:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <RTOS_create_task>
		"ULTRASONIC",
		0,                   //PRIORITY
		60,				     //PIRODICITY
		&Task_Ultrasonic);

	RTOS_create_task(
    32f8:	8b e6       	ldi	r24, 0x6B	; 107
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	28 ea       	ldi	r18, 0xA8	; 168
    32fe:	39 e1       	ldi	r19, 0x19	; 25
    3300:	61 e0       	ldi	r22, 0x01	; 1
    3302:	48 ec       	ldi	r20, 0xC8	; 200
    3304:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <RTOS_create_task>
		"MOTORS",
		1,                   //PRIORITY
		200,                 //PIRODICITY
		&Task_Motors);

	RTOS_create_task(
    3308:	82 e7       	ldi	r24, 0x72	; 114
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	21 e8       	ldi	r18, 0x81	; 129
    330e:	3c e1       	ldi	r19, 0x1C	; 28
    3310:	62 e0       	ldi	r22, 0x02	; 2
    3312:	44 ef       	ldi	r20, 0xF4	; 244
    3314:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <RTOS_create_task>
    3318:	ff cf       	rjmp	.-2      	; 0x3318 <main+0x4c>

0000331a <Task_Ultrasonic>:

	return 0;
}

void Task_Ultrasonic (void)
{
    331a:	df 93       	push	r29
    331c:	cf 93       	push	r28
    331e:	00 d0       	rcall	.+0      	; 0x3320 <Task_Ultrasonic+0x6>
    3320:	00 d0       	rcall	.+0      	; 0x3322 <Task_Ultrasonic+0x8>
    3322:	cd b7       	in	r28, 0x3d	; 61
    3324:	de b7       	in	r29, 0x3e	; 62
	u32 distance_cm=0;
    3326:	19 82       	std	Y+1, r1	; 0x01
    3328:	1a 82       	std	Y+2, r1	; 0x02
    332a:	1b 82       	std	Y+3, r1	; 0x03
    332c:	1c 82       	std	Y+4, r1	; 0x04
	ULTRASONIC_voidStartTrigger();
    332e:	0e 94 46 10 	call	0x208c	; 0x208c <ULTRASONIC_voidStartTrigger>

	distance_cm =ULTRASONIC_voidReturnDistanceCm();
    3332:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <ULTRASONIC_voidReturnDistanceCm>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	89 83       	std	Y+1, r24	; 0x01
    333c:	9a 83       	std	Y+2, r25	; 0x02
    333e:	ab 83       	std	Y+3, r26	; 0x03
    3340:	bc 83       	std	Y+4, r27	; 0x04
}
    3342:	0f 90       	pop	r0
    3344:	0f 90       	pop	r0
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	cf 91       	pop	r28
    334c:	df 91       	pop	r29
    334e:	08 95       	ret

00003350 <Task_Motors>:

void Task_Motors(void){
    3350:	df 93       	push	r29
    3352:	cf 93       	push	r28
    3354:	cd b7       	in	r28, 0x3d	; 61
    3356:	de b7       	in	r29, 0x3e	; 62
    3358:	e8 97       	sbiw	r28, 0x38	; 56
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	f8 94       	cli
    335e:	de bf       	out	0x3e, r29	; 62
    3360:	0f be       	out	0x3f, r0	; 63
    3362:	cd bf       	out	0x3d, r28	; 61
	if(distance_cm < 1){ 				//Deadlock
    3364:	80 91 d0 01 	lds	r24, 0x01D0
    3368:	90 91 d1 01 	lds	r25, 0x01D1
    336c:	a0 91 d2 01 	lds	r26, 0x01D2
    3370:	b0 91 d3 01 	lds	r27, 0x01D3
    3374:	00 97       	sbiw	r24, 0x00	; 0
    3376:	a1 05       	cpc	r26, r1
    3378:	b1 05       	cpc	r27, r1
    337a:	09 f0       	breq	.+2      	; 0x337e <Task_Motors+0x2e>
    337c:	19 c1       	rjmp	.+562    	; 0x35b0 <Task_Motors+0x260>

		DCMotor_voidBackward(LOW_SPEED);
    337e:	89 e1       	ldi	r24, 0x19	; 25
    3380:	0e 94 17 19 	call	0x322e	; 0x322e <DCMotor_voidBackward>
		direction = BACKWARD;  speed = LOW_SPEED;
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	80 93 94 02 	sts	0x0294, r24
    338a:	89 e1       	ldi	r24, 0x19	; 25
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	a0 e0       	ldi	r26, 0x00	; 0
    3390:	b0 e0       	ldi	r27, 0x00	; 0
    3392:	80 93 d4 01 	sts	0x01D4, r24
    3396:	90 93 d5 01 	sts	0x01D5, r25
    339a:	a0 93 d6 01 	sts	0x01D6, r26
    339e:	b0 93 d7 01 	sts	0x01D7, r27
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	a8 ec       	ldi	r26, 0xC8	; 200
    33a8:	b2 e4       	ldi	r27, 0x42	; 66
    33aa:	8d ab       	std	Y+53, r24	; 0x35
    33ac:	9e ab       	std	Y+54, r25	; 0x36
    33ae:	af ab       	std	Y+55, r26	; 0x37
    33b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b2:	6d a9       	ldd	r22, Y+53	; 0x35
    33b4:	7e a9       	ldd	r23, Y+54	; 0x36
    33b6:	8f a9       	ldd	r24, Y+55	; 0x37
    33b8:	98 ad       	ldd	r25, Y+56	; 0x38
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	4a ef       	ldi	r20, 0xFA	; 250
    33c0:	54 e4       	ldi	r21, 0x44	; 68
    33c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	89 ab       	std	Y+49, r24	; 0x31
    33cc:	9a ab       	std	Y+50, r25	; 0x32
    33ce:	ab ab       	std	Y+51, r26	; 0x33
    33d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    33d2:	69 a9       	ldd	r22, Y+49	; 0x31
    33d4:	7a a9       	ldd	r23, Y+50	; 0x32
    33d6:	8b a9       	ldd	r24, Y+51	; 0x33
    33d8:	9c a9       	ldd	r25, Y+52	; 0x34
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	40 e8       	ldi	r20, 0x80	; 128
    33e0:	5f e3       	ldi	r21, 0x3F	; 63
    33e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33e6:	88 23       	and	r24, r24
    33e8:	2c f4       	brge	.+10     	; 0x33f4 <Task_Motors+0xa4>
		__ticks = 1;
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	98 ab       	std	Y+48, r25	; 0x30
    33f0:	8f a7       	std	Y+47, r24	; 0x2f
    33f2:	3f c0       	rjmp	.+126    	; 0x3472 <Task_Motors+0x122>
	else if (__tmp > 65535)
    33f4:	69 a9       	ldd	r22, Y+49	; 0x31
    33f6:	7a a9       	ldd	r23, Y+50	; 0x32
    33f8:	8b a9       	ldd	r24, Y+51	; 0x33
    33fa:	9c a9       	ldd	r25, Y+52	; 0x34
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	3f ef       	ldi	r19, 0xFF	; 255
    3400:	4f e7       	ldi	r20, 0x7F	; 127
    3402:	57 e4       	ldi	r21, 0x47	; 71
    3404:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3408:	18 16       	cp	r1, r24
    340a:	4c f5       	brge	.+82     	; 0x345e <Task_Motors+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340c:	6d a9       	ldd	r22, Y+53	; 0x35
    340e:	7e a9       	ldd	r23, Y+54	; 0x36
    3410:	8f a9       	ldd	r24, Y+55	; 0x37
    3412:	98 ad       	ldd	r25, Y+56	; 0x38
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	40 e2       	ldi	r20, 0x20	; 32
    341a:	51 e4       	ldi	r21, 0x41	; 65
    341c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	bc 01       	movw	r22, r24
    3426:	cd 01       	movw	r24, r26
    3428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	98 ab       	std	Y+48, r25	; 0x30
    3432:	8f a7       	std	Y+47, r24	; 0x2f
    3434:	0f c0       	rjmp	.+30     	; 0x3454 <Task_Motors+0x104>
    3436:	88 ec       	ldi	r24, 0xC8	; 200
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	9e a7       	std	Y+46, r25	; 0x2e
    343c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    343e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3440:	9e a5       	ldd	r25, Y+46	; 0x2e
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	f1 f7       	brne	.-4      	; 0x3442 <Task_Motors+0xf2>
    3446:	9e a7       	std	Y+46, r25	; 0x2e
    3448:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344a:	8f a5       	ldd	r24, Y+47	; 0x2f
    344c:	98 a9       	ldd	r25, Y+48	; 0x30
    344e:	01 97       	sbiw	r24, 0x01	; 1
    3450:	98 ab       	std	Y+48, r25	; 0x30
    3452:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3454:	8f a5       	ldd	r24, Y+47	; 0x2f
    3456:	98 a9       	ldd	r25, Y+48	; 0x30
    3458:	00 97       	sbiw	r24, 0x00	; 0
    345a:	69 f7       	brne	.-38     	; 0x3436 <Task_Motors+0xe6>
    345c:	14 c0       	rjmp	.+40     	; 0x3486 <Task_Motors+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345e:	69 a9       	ldd	r22, Y+49	; 0x31
    3460:	7a a9       	ldd	r23, Y+50	; 0x32
    3462:	8b a9       	ldd	r24, Y+51	; 0x33
    3464:	9c a9       	ldd	r25, Y+52	; 0x34
    3466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	98 ab       	std	Y+48, r25	; 0x30
    3470:	8f a7       	std	Y+47, r24	; 0x2f
    3472:	8f a5       	ldd	r24, Y+47	; 0x2f
    3474:	98 a9       	ldd	r25, Y+48	; 0x30
    3476:	9c a7       	std	Y+44, r25	; 0x2c
    3478:	8b a7       	std	Y+43, r24	; 0x2b
    347a:	8b a5       	ldd	r24, Y+43	; 0x2b
    347c:	9c a5       	ldd	r25, Y+44	; 0x2c
    347e:	01 97       	sbiw	r24, 0x01	; 1
    3480:	f1 f7       	brne	.-4      	; 0x347e <Task_Motors+0x12e>
    3482:	9c a7       	std	Y+44, r25	; 0x2c
    3484:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(100);
		DCMotor_voidRotRight();
    3486:	0e 94 e5 18 	call	0x31ca	; 0x31ca <DCMotor_voidRotRight>
		direction = ROT_RIGHT;  speed = MED_SPEED;
    348a:	82 e0       	ldi	r24, 0x02	; 2
    348c:	80 93 94 02 	sts	0x0294, r24
    3490:	82 e3       	ldi	r24, 0x32	; 50
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	a0 e0       	ldi	r26, 0x00	; 0
    3496:	b0 e0       	ldi	r27, 0x00	; 0
    3498:	80 93 d4 01 	sts	0x01D4, r24
    349c:	90 93 d5 01 	sts	0x01D5, r25
    34a0:	a0 93 d6 01 	sts	0x01D6, r26
    34a4:	b0 93 d7 01 	sts	0x01D7, r27
    34a8:	80 e0       	ldi	r24, 0x00	; 0
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	a8 ec       	ldi	r26, 0xC8	; 200
    34ae:	b2 e4       	ldi	r27, 0x42	; 66
    34b0:	8f a3       	std	Y+39, r24	; 0x27
    34b2:	98 a7       	std	Y+40, r25	; 0x28
    34b4:	a9 a7       	std	Y+41, r26	; 0x29
    34b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b8:	6f a1       	ldd	r22, Y+39	; 0x27
    34ba:	78 a5       	ldd	r23, Y+40	; 0x28
    34bc:	89 a5       	ldd	r24, Y+41	; 0x29
    34be:	9a a5       	ldd	r25, Y+42	; 0x2a
    34c0:	20 e0       	ldi	r18, 0x00	; 0
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	4a ef       	ldi	r20, 0xFA	; 250
    34c6:	54 e4       	ldi	r21, 0x44	; 68
    34c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	8b a3       	std	Y+35, r24	; 0x23
    34d2:	9c a3       	std	Y+36, r25	; 0x24
    34d4:	ad a3       	std	Y+37, r26	; 0x25
    34d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34d8:	6b a1       	ldd	r22, Y+35	; 0x23
    34da:	7c a1       	ldd	r23, Y+36	; 0x24
    34dc:	8d a1       	ldd	r24, Y+37	; 0x25
    34de:	9e a1       	ldd	r25, Y+38	; 0x26
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	40 e8       	ldi	r20, 0x80	; 128
    34e6:	5f e3       	ldi	r21, 0x3F	; 63
    34e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34ec:	88 23       	and	r24, r24
    34ee:	2c f4       	brge	.+10     	; 0x34fa <Task_Motors+0x1aa>
		__ticks = 1;
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	9a a3       	std	Y+34, r25	; 0x22
    34f6:	89 a3       	std	Y+33, r24	; 0x21
    34f8:	3f c0       	rjmp	.+126    	; 0x3578 <Task_Motors+0x228>
	else if (__tmp > 65535)
    34fa:	6b a1       	ldd	r22, Y+35	; 0x23
    34fc:	7c a1       	ldd	r23, Y+36	; 0x24
    34fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3500:	9e a1       	ldd	r25, Y+38	; 0x26
    3502:	20 e0       	ldi	r18, 0x00	; 0
    3504:	3f ef       	ldi	r19, 0xFF	; 255
    3506:	4f e7       	ldi	r20, 0x7F	; 127
    3508:	57 e4       	ldi	r21, 0x47	; 71
    350a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    350e:	18 16       	cp	r1, r24
    3510:	4c f5       	brge	.+82     	; 0x3564 <Task_Motors+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3512:	6f a1       	ldd	r22, Y+39	; 0x27
    3514:	78 a5       	ldd	r23, Y+40	; 0x28
    3516:	89 a5       	ldd	r24, Y+41	; 0x29
    3518:	9a a5       	ldd	r25, Y+42	; 0x2a
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	40 e2       	ldi	r20, 0x20	; 32
    3520:	51 e4       	ldi	r21, 0x41	; 65
    3522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	bc 01       	movw	r22, r24
    352c:	cd 01       	movw	r24, r26
    352e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3532:	dc 01       	movw	r26, r24
    3534:	cb 01       	movw	r24, r22
    3536:	9a a3       	std	Y+34, r25	; 0x22
    3538:	89 a3       	std	Y+33, r24	; 0x21
    353a:	0f c0       	rjmp	.+30     	; 0x355a <Task_Motors+0x20a>
    353c:	88 ec       	ldi	r24, 0xC8	; 200
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	98 a3       	std	Y+32, r25	; 0x20
    3542:	8f 8f       	std	Y+31, r24	; 0x1f
    3544:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3546:	98 a1       	ldd	r25, Y+32	; 0x20
    3548:	01 97       	sbiw	r24, 0x01	; 1
    354a:	f1 f7       	brne	.-4      	; 0x3548 <Task_Motors+0x1f8>
    354c:	98 a3       	std	Y+32, r25	; 0x20
    354e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3550:	89 a1       	ldd	r24, Y+33	; 0x21
    3552:	9a a1       	ldd	r25, Y+34	; 0x22
    3554:	01 97       	sbiw	r24, 0x01	; 1
    3556:	9a a3       	std	Y+34, r25	; 0x22
    3558:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    355a:	89 a1       	ldd	r24, Y+33	; 0x21
    355c:	9a a1       	ldd	r25, Y+34	; 0x22
    355e:	00 97       	sbiw	r24, 0x00	; 0
    3560:	69 f7       	brne	.-38     	; 0x353c <Task_Motors+0x1ec>
    3562:	14 c0       	rjmp	.+40     	; 0x358c <Task_Motors+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3564:	6b a1       	ldd	r22, Y+35	; 0x23
    3566:	7c a1       	ldd	r23, Y+36	; 0x24
    3568:	8d a1       	ldd	r24, Y+37	; 0x25
    356a:	9e a1       	ldd	r25, Y+38	; 0x26
    356c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	9a a3       	std	Y+34, r25	; 0x22
    3576:	89 a3       	std	Y+33, r24	; 0x21
    3578:	89 a1       	ldd	r24, Y+33	; 0x21
    357a:	9a a1       	ldd	r25, Y+34	; 0x22
    357c:	9e 8f       	std	Y+30, r25	; 0x1e
    357e:	8d 8f       	std	Y+29, r24	; 0x1d
    3580:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3582:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3584:	01 97       	sbiw	r24, 0x01	; 1
    3586:	f1 f7       	brne	.-4      	; 0x3584 <Task_Motors+0x234>
    3588:	9e 8f       	std	Y+30, r25	; 0x1e
    358a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		DCMotor_voidForward(LOW_SPEED);
    358c:	89 e1       	ldi	r24, 0x19	; 25
    358e:	0e 94 b3 18 	call	0x3166	; 0x3166 <DCMotor_voidForward>
		direction = FORWARD;  speed = LOW_SPEED;
    3592:	10 92 94 02 	sts	0x0294, r1
    3596:	89 e1       	ldi	r24, 0x19	; 25
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	a0 e0       	ldi	r26, 0x00	; 0
    359c:	b0 e0       	ldi	r27, 0x00	; 0
    359e:	80 93 d4 01 	sts	0x01D4, r24
    35a2:	90 93 d5 01 	sts	0x01D5, r25
    35a6:	a0 93 d6 01 	sts	0x01D6, r26
    35aa:	b0 93 d7 01 	sts	0x01D7, r27
    35ae:	a0 c1       	rjmp	.+832    	; 0x38f0 <Task_Motors+0x5a0>
	}
	else if(distance_cm < 10 ){ 		//About to crash!!
    35b0:	80 91 d0 01 	lds	r24, 0x01D0
    35b4:	90 91 d1 01 	lds	r25, 0x01D1
    35b8:	a0 91 d2 01 	lds	r26, 0x01D2
    35bc:	b0 91 d3 01 	lds	r27, 0x01D3
    35c0:	8a 30       	cpi	r24, 0x0A	; 10
    35c2:	91 05       	cpc	r25, r1
    35c4:	a1 05       	cpc	r26, r1
    35c6:	b1 05       	cpc	r27, r1
    35c8:	08 f0       	brcs	.+2      	; 0x35cc <Task_Motors+0x27c>
    35ca:	14 c1       	rjmp	.+552    	; 0x37f4 <Task_Motors+0x4a4>

		DCMotor_voidStop();
    35cc:	0e 94 4e 19 	call	0x329c	; 0x329c <DCMotor_voidStop>
		direction = STOP;  speed = 0;
    35d0:	84 e0       	ldi	r24, 0x04	; 4
    35d2:	80 93 94 02 	sts	0x0294, r24
    35d6:	10 92 d4 01 	sts	0x01D4, r1
    35da:	10 92 d5 01 	sts	0x01D5, r1
    35de:	10 92 d6 01 	sts	0x01D6, r1
    35e2:	10 92 d7 01 	sts	0x01D7, r1
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	a8 ec       	ldi	r26, 0xC8	; 200
    35ec:	b2 e4       	ldi	r27, 0x42	; 66
    35ee:	89 8f       	std	Y+25, r24	; 0x19
    35f0:	9a 8f       	std	Y+26, r25	; 0x1a
    35f2:	ab 8f       	std	Y+27, r26	; 0x1b
    35f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f6:	69 8d       	ldd	r22, Y+25	; 0x19
    35f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	4a ef       	ldi	r20, 0xFA	; 250
    3604:	54 e4       	ldi	r21, 0x44	; 68
    3606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	8d 8b       	std	Y+21, r24	; 0x15
    3610:	9e 8b       	std	Y+22, r25	; 0x16
    3612:	af 8b       	std	Y+23, r26	; 0x17
    3614:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3616:	6d 89       	ldd	r22, Y+21	; 0x15
    3618:	7e 89       	ldd	r23, Y+22	; 0x16
    361a:	8f 89       	ldd	r24, Y+23	; 0x17
    361c:	98 8d       	ldd	r25, Y+24	; 0x18
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	40 e8       	ldi	r20, 0x80	; 128
    3624:	5f e3       	ldi	r21, 0x3F	; 63
    3626:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    362a:	88 23       	and	r24, r24
    362c:	2c f4       	brge	.+10     	; 0x3638 <Task_Motors+0x2e8>
		__ticks = 1;
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	9c 8b       	std	Y+20, r25	; 0x14
    3634:	8b 8b       	std	Y+19, r24	; 0x13
    3636:	3f c0       	rjmp	.+126    	; 0x36b6 <Task_Motors+0x366>
	else if (__tmp > 65535)
    3638:	6d 89       	ldd	r22, Y+21	; 0x15
    363a:	7e 89       	ldd	r23, Y+22	; 0x16
    363c:	8f 89       	ldd	r24, Y+23	; 0x17
    363e:	98 8d       	ldd	r25, Y+24	; 0x18
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	3f ef       	ldi	r19, 0xFF	; 255
    3644:	4f e7       	ldi	r20, 0x7F	; 127
    3646:	57 e4       	ldi	r21, 0x47	; 71
    3648:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    364c:	18 16       	cp	r1, r24
    364e:	4c f5       	brge	.+82     	; 0x36a2 <Task_Motors+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3650:	69 8d       	ldd	r22, Y+25	; 0x19
    3652:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3654:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3656:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	40 e2       	ldi	r20, 0x20	; 32
    365e:	51 e4       	ldi	r21, 0x41	; 65
    3660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3664:	dc 01       	movw	r26, r24
    3666:	cb 01       	movw	r24, r22
    3668:	bc 01       	movw	r22, r24
    366a:	cd 01       	movw	r24, r26
    366c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22
    3674:	9c 8b       	std	Y+20, r25	; 0x14
    3676:	8b 8b       	std	Y+19, r24	; 0x13
    3678:	0f c0       	rjmp	.+30     	; 0x3698 <Task_Motors+0x348>
    367a:	88 ec       	ldi	r24, 0xC8	; 200
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	9a 8b       	std	Y+18, r25	; 0x12
    3680:	89 8b       	std	Y+17, r24	; 0x11
    3682:	89 89       	ldd	r24, Y+17	; 0x11
    3684:	9a 89       	ldd	r25, Y+18	; 0x12
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	f1 f7       	brne	.-4      	; 0x3686 <Task_Motors+0x336>
    368a:	9a 8b       	std	Y+18, r25	; 0x12
    368c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    368e:	8b 89       	ldd	r24, Y+19	; 0x13
    3690:	9c 89       	ldd	r25, Y+20	; 0x14
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	9c 8b       	std	Y+20, r25	; 0x14
    3696:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3698:	8b 89       	ldd	r24, Y+19	; 0x13
    369a:	9c 89       	ldd	r25, Y+20	; 0x14
    369c:	00 97       	sbiw	r24, 0x00	; 0
    369e:	69 f7       	brne	.-38     	; 0x367a <Task_Motors+0x32a>
    36a0:	14 c0       	rjmp	.+40     	; 0x36ca <Task_Motors+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a2:	6d 89       	ldd	r22, Y+21	; 0x15
    36a4:	7e 89       	ldd	r23, Y+22	; 0x16
    36a6:	8f 89       	ldd	r24, Y+23	; 0x17
    36a8:	98 8d       	ldd	r25, Y+24	; 0x18
    36aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	9c 8b       	std	Y+20, r25	; 0x14
    36b4:	8b 8b       	std	Y+19, r24	; 0x13
    36b6:	8b 89       	ldd	r24, Y+19	; 0x13
    36b8:	9c 89       	ldd	r25, Y+20	; 0x14
    36ba:	98 8b       	std	Y+16, r25	; 0x10
    36bc:	8f 87       	std	Y+15, r24	; 0x0f
    36be:	8f 85       	ldd	r24, Y+15	; 0x0f
    36c0:	98 89       	ldd	r25, Y+16	; 0x10
    36c2:	01 97       	sbiw	r24, 0x01	; 1
    36c4:	f1 f7       	brne	.-4      	; 0x36c2 <Task_Motors+0x372>
    36c6:	98 8b       	std	Y+16, r25	; 0x10
    36c8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		DCMotor_voidRotRight();
    36ca:	0e 94 e5 18 	call	0x31ca	; 0x31ca <DCMotor_voidRotRight>
		direction = ROT_RIGHT;  speed = MED_SPEED;
    36ce:	82 e0       	ldi	r24, 0x02	; 2
    36d0:	80 93 94 02 	sts	0x0294, r24
    36d4:	82 e3       	ldi	r24, 0x32	; 50
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	a0 e0       	ldi	r26, 0x00	; 0
    36da:	b0 e0       	ldi	r27, 0x00	; 0
    36dc:	80 93 d4 01 	sts	0x01D4, r24
    36e0:	90 93 d5 01 	sts	0x01D5, r25
    36e4:	a0 93 d6 01 	sts	0x01D6, r26
    36e8:	b0 93 d7 01 	sts	0x01D7, r27
    36ec:	80 e0       	ldi	r24, 0x00	; 0
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	a8 ec       	ldi	r26, 0xC8	; 200
    36f2:	b2 e4       	ldi	r27, 0x42	; 66
    36f4:	8b 87       	std	Y+11, r24	; 0x0b
    36f6:	9c 87       	std	Y+12, r25	; 0x0c
    36f8:	ad 87       	std	Y+13, r26	; 0x0d
    36fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    36fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3700:	8d 85       	ldd	r24, Y+13	; 0x0d
    3702:	9e 85       	ldd	r25, Y+14	; 0x0e
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	4a ef       	ldi	r20, 0xFA	; 250
    370a:	54 e4       	ldi	r21, 0x44	; 68
    370c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3710:	dc 01       	movw	r26, r24
    3712:	cb 01       	movw	r24, r22
    3714:	8f 83       	std	Y+7, r24	; 0x07
    3716:	98 87       	std	Y+8, r25	; 0x08
    3718:	a9 87       	std	Y+9, r26	; 0x09
    371a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    371c:	6f 81       	ldd	r22, Y+7	; 0x07
    371e:	78 85       	ldd	r23, Y+8	; 0x08
    3720:	89 85       	ldd	r24, Y+9	; 0x09
    3722:	9a 85       	ldd	r25, Y+10	; 0x0a
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	40 e8       	ldi	r20, 0x80	; 128
    372a:	5f e3       	ldi	r21, 0x3F	; 63
    372c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3730:	88 23       	and	r24, r24
    3732:	2c f4       	brge	.+10     	; 0x373e <Task_Motors+0x3ee>
		__ticks = 1;
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	9e 83       	std	Y+6, r25	; 0x06
    373a:	8d 83       	std	Y+5, r24	; 0x05
    373c:	3f c0       	rjmp	.+126    	; 0x37bc <Task_Motors+0x46c>
	else if (__tmp > 65535)
    373e:	6f 81       	ldd	r22, Y+7	; 0x07
    3740:	78 85       	ldd	r23, Y+8	; 0x08
    3742:	89 85       	ldd	r24, Y+9	; 0x09
    3744:	9a 85       	ldd	r25, Y+10	; 0x0a
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	3f ef       	ldi	r19, 0xFF	; 255
    374a:	4f e7       	ldi	r20, 0x7F	; 127
    374c:	57 e4       	ldi	r21, 0x47	; 71
    374e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3752:	18 16       	cp	r1, r24
    3754:	4c f5       	brge	.+82     	; 0x37a8 <Task_Motors+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3756:	6b 85       	ldd	r22, Y+11	; 0x0b
    3758:	7c 85       	ldd	r23, Y+12	; 0x0c
    375a:	8d 85       	ldd	r24, Y+13	; 0x0d
    375c:	9e 85       	ldd	r25, Y+14	; 0x0e
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	40 e2       	ldi	r20, 0x20	; 32
    3764:	51 e4       	ldi	r21, 0x41	; 65
    3766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	bc 01       	movw	r22, r24
    3770:	cd 01       	movw	r24, r26
    3772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3776:	dc 01       	movw	r26, r24
    3778:	cb 01       	movw	r24, r22
    377a:	9e 83       	std	Y+6, r25	; 0x06
    377c:	8d 83       	std	Y+5, r24	; 0x05
    377e:	0f c0       	rjmp	.+30     	; 0x379e <Task_Motors+0x44e>
    3780:	88 ec       	ldi	r24, 0xC8	; 200
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	9c 83       	std	Y+4, r25	; 0x04
    3786:	8b 83       	std	Y+3, r24	; 0x03
    3788:	8b 81       	ldd	r24, Y+3	; 0x03
    378a:	9c 81       	ldd	r25, Y+4	; 0x04
    378c:	01 97       	sbiw	r24, 0x01	; 1
    378e:	f1 f7       	brne	.-4      	; 0x378c <Task_Motors+0x43c>
    3790:	9c 83       	std	Y+4, r25	; 0x04
    3792:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3794:	8d 81       	ldd	r24, Y+5	; 0x05
    3796:	9e 81       	ldd	r25, Y+6	; 0x06
    3798:	01 97       	sbiw	r24, 0x01	; 1
    379a:	9e 83       	std	Y+6, r25	; 0x06
    379c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379e:	8d 81       	ldd	r24, Y+5	; 0x05
    37a0:	9e 81       	ldd	r25, Y+6	; 0x06
    37a2:	00 97       	sbiw	r24, 0x00	; 0
    37a4:	69 f7       	brne	.-38     	; 0x3780 <Task_Motors+0x430>
    37a6:	14 c0       	rjmp	.+40     	; 0x37d0 <Task_Motors+0x480>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a8:	6f 81       	ldd	r22, Y+7	; 0x07
    37aa:	78 85       	ldd	r23, Y+8	; 0x08
    37ac:	89 85       	ldd	r24, Y+9	; 0x09
    37ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b4:	dc 01       	movw	r26, r24
    37b6:	cb 01       	movw	r24, r22
    37b8:	9e 83       	std	Y+6, r25	; 0x06
    37ba:	8d 83       	std	Y+5, r24	; 0x05
    37bc:	8d 81       	ldd	r24, Y+5	; 0x05
    37be:	9e 81       	ldd	r25, Y+6	; 0x06
    37c0:	9a 83       	std	Y+2, r25	; 0x02
    37c2:	89 83       	std	Y+1, r24	; 0x01
    37c4:	89 81       	ldd	r24, Y+1	; 0x01
    37c6:	9a 81       	ldd	r25, Y+2	; 0x02
    37c8:	01 97       	sbiw	r24, 0x01	; 1
    37ca:	f1 f7       	brne	.-4      	; 0x37c8 <Task_Motors+0x478>
    37cc:	9a 83       	std	Y+2, r25	; 0x02
    37ce:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		DCMotor_voidForward(LOW_SPEED);
    37d0:	89 e1       	ldi	r24, 0x19	; 25
    37d2:	0e 94 b3 18 	call	0x3166	; 0x3166 <DCMotor_voidForward>
		direction = FORWARD;  speed = LOW_SPEED;
    37d6:	10 92 94 02 	sts	0x0294, r1
    37da:	89 e1       	ldi	r24, 0x19	; 25
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	a0 e0       	ldi	r26, 0x00	; 0
    37e0:	b0 e0       	ldi	r27, 0x00	; 0
    37e2:	80 93 d4 01 	sts	0x01D4, r24
    37e6:	90 93 d5 01 	sts	0x01D5, r25
    37ea:	a0 93 d6 01 	sts	0x01D6, r26
    37ee:	b0 93 d7 01 	sts	0x01D7, r27
    37f2:	7e c0       	rjmp	.+252    	; 0x38f0 <Task_Motors+0x5a0>

	}
	else if(distance_cm < 50 ){ 		// traffic
    37f4:	80 91 d0 01 	lds	r24, 0x01D0
    37f8:	90 91 d1 01 	lds	r25, 0x01D1
    37fc:	a0 91 d2 01 	lds	r26, 0x01D2
    3800:	b0 91 d3 01 	lds	r27, 0x01D3
    3804:	82 33       	cpi	r24, 0x32	; 50
    3806:	91 05       	cpc	r25, r1
    3808:	a1 05       	cpc	r26, r1
    380a:	b1 05       	cpc	r27, r1
    380c:	90 f4       	brcc	.+36     	; 0x3832 <Task_Motors+0x4e2>
		DCMotor_voidForward(LOW_SPEED);
    380e:	89 e1       	ldi	r24, 0x19	; 25
    3810:	0e 94 b3 18 	call	0x3166	; 0x3166 <DCMotor_voidForward>
		direction = FORWARD;  speed = LOW_SPEED;
    3814:	10 92 94 02 	sts	0x0294, r1
    3818:	89 e1       	ldi	r24, 0x19	; 25
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	a0 e0       	ldi	r26, 0x00	; 0
    381e:	b0 e0       	ldi	r27, 0x00	; 0
    3820:	80 93 d4 01 	sts	0x01D4, r24
    3824:	90 93 d5 01 	sts	0x01D5, r25
    3828:	a0 93 d6 01 	sts	0x01D6, r26
    382c:	b0 93 d7 01 	sts	0x01D7, r27
    3830:	5f c0       	rjmp	.+190    	; 0x38f0 <Task_Motors+0x5a0>
	}

	else if(distance_cm < 100 ){ 		// less traffic
    3832:	80 91 d0 01 	lds	r24, 0x01D0
    3836:	90 91 d1 01 	lds	r25, 0x01D1
    383a:	a0 91 d2 01 	lds	r26, 0x01D2
    383e:	b0 91 d3 01 	lds	r27, 0x01D3
    3842:	84 36       	cpi	r24, 0x64	; 100
    3844:	91 05       	cpc	r25, r1
    3846:	a1 05       	cpc	r26, r1
    3848:	b1 05       	cpc	r27, r1
    384a:	90 f4       	brcc	.+36     	; 0x3870 <Task_Motors+0x520>
		DCMotor_voidForward(MED_SPEED);
    384c:	82 e3       	ldi	r24, 0x32	; 50
    384e:	0e 94 b3 18 	call	0x3166	; 0x3166 <DCMotor_voidForward>
		direction = FORWARD;  speed = MED_SPEED;
    3852:	10 92 94 02 	sts	0x0294, r1
    3856:	82 e3       	ldi	r24, 0x32	; 50
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	a0 e0       	ldi	r26, 0x00	; 0
    385c:	b0 e0       	ldi	r27, 0x00	; 0
    385e:	80 93 d4 01 	sts	0x01D4, r24
    3862:	90 93 d5 01 	sts	0x01D5, r25
    3866:	a0 93 d6 01 	sts	0x01D6, r26
    386a:	b0 93 d7 01 	sts	0x01D7, r27
    386e:	40 c0       	rjmp	.+128    	; 0x38f0 <Task_Motors+0x5a0>
	}
	else if(distance_cm < 250 ){ 		// 3la elba7r
    3870:	80 91 d0 01 	lds	r24, 0x01D0
    3874:	90 91 d1 01 	lds	r25, 0x01D1
    3878:	a0 91 d2 01 	lds	r26, 0x01D2
    387c:	b0 91 d3 01 	lds	r27, 0x01D3
    3880:	8a 3f       	cpi	r24, 0xFA	; 250
    3882:	91 05       	cpc	r25, r1
    3884:	a1 05       	cpc	r26, r1
    3886:	b1 05       	cpc	r27, r1
    3888:	90 f4       	brcc	.+36     	; 0x38ae <Task_Motors+0x55e>
		DCMotor_voidForward(HIGH_SPEED);
    388a:	8b e4       	ldi	r24, 0x4B	; 75
    388c:	0e 94 b3 18 	call	0x3166	; 0x3166 <DCMotor_voidForward>
		direction = FORWARD;  speed = HIGH_SPEED;
    3890:	10 92 94 02 	sts	0x0294, r1
    3894:	8b e4       	ldi	r24, 0x4B	; 75
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	a0 e0       	ldi	r26, 0x00	; 0
    389a:	b0 e0       	ldi	r27, 0x00	; 0
    389c:	80 93 d4 01 	sts	0x01D4, r24
    38a0:	90 93 d5 01 	sts	0x01D5, r25
    38a4:	a0 93 d6 01 	sts	0x01D6, r26
    38a8:	b0 93 d7 01 	sts	0x01D7, r27
    38ac:	21 c0       	rjmp	.+66     	; 0x38f0 <Task_Motors+0x5a0>
	}
	else if(distance_cm < 500 ){ 	// cairo alex desert road
    38ae:	80 91 d0 01 	lds	r24, 0x01D0
    38b2:	90 91 d1 01 	lds	r25, 0x01D1
    38b6:	a0 91 d2 01 	lds	r26, 0x01D2
    38ba:	b0 91 d3 01 	lds	r27, 0x01D3
    38be:	84 3f       	cpi	r24, 0xF4	; 244
    38c0:	21 e0       	ldi	r18, 0x01	; 1
    38c2:	92 07       	cpc	r25, r18
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	a2 07       	cpc	r26, r18
    38c8:	20 e0       	ldi	r18, 0x00	; 0
    38ca:	b2 07       	cpc	r27, r18
    38cc:	88 f4       	brcc	.+34     	; 0x38f0 <Task_Motors+0x5a0>
		DCMotor_voidForward(MAX_SPEED);
    38ce:	84 e6       	ldi	r24, 0x64	; 100
    38d0:	0e 94 b3 18 	call	0x3166	; 0x3166 <DCMotor_voidForward>
		direction = FORWARD;  speed = MAX_SPEED;
    38d4:	10 92 94 02 	sts	0x0294, r1
    38d8:	84 e6       	ldi	r24, 0x64	; 100
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	a0 e0       	ldi	r26, 0x00	; 0
    38de:	b0 e0       	ldi	r27, 0x00	; 0
    38e0:	80 93 d4 01 	sts	0x01D4, r24
    38e4:	90 93 d5 01 	sts	0x01D5, r25
    38e8:	a0 93 d6 01 	sts	0x01D6, r26
    38ec:	b0 93 d7 01 	sts	0x01D7, r27

	}
}
    38f0:	e8 96       	adiw	r28, 0x38	; 56
    38f2:	0f b6       	in	r0, 0x3f	; 63
    38f4:	f8 94       	cli
    38f6:	de bf       	out	0x3e, r29	; 62
    38f8:	0f be       	out	0x3f, r0	; 63
    38fa:	cd bf       	out	0x3d, r28	; 61
    38fc:	cf 91       	pop	r28
    38fe:	df 91       	pop	r29
    3900:	08 95       	ret

00003902 <Task_LCD>:

void Task_LCD (void)
{
    3902:	df 93       	push	r29
    3904:	cf 93       	push	r28
    3906:	00 d0       	rcall	.+0      	; 0x3908 <Task_LCD+0x6>
    3908:	cd b7       	in	r28, 0x3d	; 61
    390a:	de b7       	in	r29, 0x3e	; 62
	    if (distance_cm == '0')
    390c:	80 91 d0 01 	lds	r24, 0x01D0
    3910:	90 91 d1 01 	lds	r25, 0x01D1
    3914:	a0 91 d2 01 	lds	r26, 0x01D2
    3918:	b0 91 d3 01 	lds	r27, 0x01D3
    391c:	80 33       	cpi	r24, 0x30	; 48
    391e:	91 05       	cpc	r25, r1
    3920:	a1 05       	cpc	r26, r1
    3922:	b1 05       	cpc	r27, r1
    3924:	01 f5       	brne	.+64     	; 0x3966 <Task_LCD+0x64>
        {
	    	LCD_voidSendCommand(CLEAR);
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_voidSendCommand>

        	LCD_voidSetLocation(LCD_LINE1,0);
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	60 e0       	ldi	r22, 0x00	; 0
    3930:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <LCD_voidSetLocation>
        	LCD_voidSendString("FORWARD:");
    3934:	86 e7       	ldi	r24, 0x76	; 118
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <LCD_voidSendString>
			LCD_voidSendNumber(speed);
    393c:	80 91 d4 01 	lds	r24, 0x01D4
    3940:	90 91 d5 01 	lds	r25, 0x01D5
    3944:	a0 91 d6 01 	lds	r26, 0x01D6
    3948:	b0 91 d7 01 	lds	r27, 0x01D7
    394c:	bc 01       	movw	r22, r24
    394e:	cd 01       	movw	r24, r26
    3950:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_voidSendNumber>

        	LCD_voidSetLocation(LCD_LINE2,0);
    3954:	82 e0       	ldi	r24, 0x02	; 2
    3956:	60 e0       	ldi	r22, 0x00	; 0
    3958:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <LCD_voidSetLocation>
			LCD_voidSendString("out of range:");
    395c:	8f e7       	ldi	r24, 0x7F	; 127
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <LCD_voidSendString>
    3964:	5f c0       	rjmp	.+190    	; 0x3a24 <Task_LCD+0x122>
        }
        else
        {
        	LCD_voidSendCommand(CLEAR);
    3966:	81 e0       	ldi	r24, 0x01	; 1
    3968:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_voidSendCommand>
			LCD_voidSetLocation(LCD_LINE1,0);
    396c:	81 e0       	ldi	r24, 0x01	; 1
    396e:	60 e0       	ldi	r22, 0x00	; 0
    3970:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <LCD_voidSetLocation>

			switch(direction){
    3974:	80 91 94 02 	lds	r24, 0x0294
    3978:	28 2f       	mov	r18, r24
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	3a 83       	std	Y+2, r19	; 0x02
    397e:	29 83       	std	Y+1, r18	; 0x01
    3980:	89 81       	ldd	r24, Y+1	; 0x01
    3982:	9a 81       	ldd	r25, Y+2	; 0x02
    3984:	81 30       	cpi	r24, 0x01	; 1
    3986:	91 05       	cpc	r25, r1
    3988:	d1 f0       	breq	.+52     	; 0x39be <Task_LCD+0xbc>
    398a:	29 81       	ldd	r18, Y+1	; 0x01
    398c:	3a 81       	ldd	r19, Y+2	; 0x02
    398e:	22 30       	cpi	r18, 0x02	; 2
    3990:	31 05       	cpc	r19, r1
    3992:	2c f4       	brge	.+10     	; 0x399e <Task_LCD+0x9c>
    3994:	89 81       	ldd	r24, Y+1	; 0x01
    3996:	9a 81       	ldd	r25, Y+2	; 0x02
    3998:	00 97       	sbiw	r24, 0x00	; 0
    399a:	61 f0       	breq	.+24     	; 0x39b4 <Task_LCD+0xb2>
    399c:	1f c0       	rjmp	.+62     	; 0x39dc <Task_LCD+0xda>
    399e:	29 81       	ldd	r18, Y+1	; 0x01
    39a0:	3a 81       	ldd	r19, Y+2	; 0x02
    39a2:	22 30       	cpi	r18, 0x02	; 2
    39a4:	31 05       	cpc	r19, r1
    39a6:	81 f0       	breq	.+32     	; 0x39c8 <Task_LCD+0xc6>
    39a8:	89 81       	ldd	r24, Y+1	; 0x01
    39aa:	9a 81       	ldd	r25, Y+2	; 0x02
    39ac:	83 30       	cpi	r24, 0x03	; 3
    39ae:	91 05       	cpc	r25, r1
    39b0:	81 f0       	breq	.+32     	; 0x39d2 <Task_LCD+0xd0>
    39b2:	14 c0       	rjmp	.+40     	; 0x39dc <Task_LCD+0xda>
			case FORWARD:
				LCD_voidSendString("FORWARD:"); break;
    39b4:	86 e7       	ldi	r24, 0x76	; 118
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <LCD_voidSendString>
    39bc:	13 c0       	rjmp	.+38     	; 0x39e4 <Task_LCD+0xe2>
			case BACKWARD:
				LCD_voidSendString("BACKWARD:"); break;
    39be:	8d e8       	ldi	r24, 0x8D	; 141
    39c0:	90 e0       	ldi	r25, 0x00	; 0
    39c2:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <LCD_voidSendString>
    39c6:	0e c0       	rjmp	.+28     	; 0x39e4 <Task_LCD+0xe2>
			case ROT_RIGHT:
				LCD_voidSendString("ROT_RIGHT:"); break;
    39c8:	87 e9       	ldi	r24, 0x97	; 151
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <LCD_voidSendString>
    39d0:	09 c0       	rjmp	.+18     	; 0x39e4 <Task_LCD+0xe2>
			case ROT_LEFT:
				LCD_voidSendString("ROT_LEFT:"); break;
    39d2:	82 ea       	ldi	r24, 0xA2	; 162
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <LCD_voidSendString>
    39da:	04 c0       	rjmp	.+8      	; 0x39e4 <Task_LCD+0xe2>
			default:
				LCD_voidSendString("STOP:");
    39dc:	8c ea       	ldi	r24, 0xAC	; 172
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <LCD_voidSendString>
			}
			LCD_voidSendNumber(speed);
    39e4:	80 91 d4 01 	lds	r24, 0x01D4
    39e8:	90 91 d5 01 	lds	r25, 0x01D5
    39ec:	a0 91 d6 01 	lds	r26, 0x01D6
    39f0:	b0 91 d7 01 	lds	r27, 0x01D7
    39f4:	bc 01       	movw	r22, r24
    39f6:	cd 01       	movw	r24, r26
    39f8:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_voidSendNumber>

			LCD_voidSetLocation(LCD_LINE2,0);
    39fc:	82 e0       	ldi	r24, 0x02	; 2
    39fe:	60 e0       	ldi	r22, 0x00	; 0
    3a00:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <LCD_voidSetLocation>
			LCD_voidSendString("distance:");
    3a04:	82 eb       	ldi	r24, 0xB2	; 178
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <LCD_voidSendString>
			LCD_voidSendNumber(distance_cm);
    3a0c:	80 91 d0 01 	lds	r24, 0x01D0
    3a10:	90 91 d1 01 	lds	r25, 0x01D1
    3a14:	a0 91 d2 01 	lds	r26, 0x01D2
    3a18:	b0 91 d3 01 	lds	r27, 0x01D3
    3a1c:	bc 01       	movw	r22, r24
    3a1e:	cd 01       	movw	r24, r26
    3a20:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_voidSendNumber>
        }

//        _delay_ms(1000);
}
    3a24:	0f 90       	pop	r0
    3a26:	0f 90       	pop	r0
    3a28:	cf 91       	pop	r28
    3a2a:	df 91       	pop	r29
    3a2c:	08 95       	ret

00003a2e <__udivmodhi4>:
    3a2e:	aa 1b       	sub	r26, r26
    3a30:	bb 1b       	sub	r27, r27
    3a32:	51 e1       	ldi	r21, 0x11	; 17
    3a34:	07 c0       	rjmp	.+14     	; 0x3a44 <__udivmodhi4_ep>

00003a36 <__udivmodhi4_loop>:
    3a36:	aa 1f       	adc	r26, r26
    3a38:	bb 1f       	adc	r27, r27
    3a3a:	a6 17       	cp	r26, r22
    3a3c:	b7 07       	cpc	r27, r23
    3a3e:	10 f0       	brcs	.+4      	; 0x3a44 <__udivmodhi4_ep>
    3a40:	a6 1b       	sub	r26, r22
    3a42:	b7 0b       	sbc	r27, r23

00003a44 <__udivmodhi4_ep>:
    3a44:	88 1f       	adc	r24, r24
    3a46:	99 1f       	adc	r25, r25
    3a48:	5a 95       	dec	r21
    3a4a:	a9 f7       	brne	.-22     	; 0x3a36 <__udivmodhi4_loop>
    3a4c:	80 95       	com	r24
    3a4e:	90 95       	com	r25
    3a50:	bc 01       	movw	r22, r24
    3a52:	cd 01       	movw	r24, r26
    3a54:	08 95       	ret

00003a56 <__divmodhi4>:
    3a56:	97 fb       	bst	r25, 7
    3a58:	09 2e       	mov	r0, r25
    3a5a:	07 26       	eor	r0, r23
    3a5c:	0a d0       	rcall	.+20     	; 0x3a72 <__divmodhi4_neg1>
    3a5e:	77 fd       	sbrc	r23, 7
    3a60:	04 d0       	rcall	.+8      	; 0x3a6a <__divmodhi4_neg2>
    3a62:	e5 df       	rcall	.-54     	; 0x3a2e <__udivmodhi4>
    3a64:	06 d0       	rcall	.+12     	; 0x3a72 <__divmodhi4_neg1>
    3a66:	00 20       	and	r0, r0
    3a68:	1a f4       	brpl	.+6      	; 0x3a70 <__divmodhi4_exit>

00003a6a <__divmodhi4_neg2>:
    3a6a:	70 95       	com	r23
    3a6c:	61 95       	neg	r22
    3a6e:	7f 4f       	sbci	r23, 0xFF	; 255

00003a70 <__divmodhi4_exit>:
    3a70:	08 95       	ret

00003a72 <__divmodhi4_neg1>:
    3a72:	f6 f7       	brtc	.-4      	; 0x3a70 <__divmodhi4_exit>
    3a74:	90 95       	com	r25
    3a76:	81 95       	neg	r24
    3a78:	9f 4f       	sbci	r25, 0xFF	; 255
    3a7a:	08 95       	ret

00003a7c <__udivmodsi4>:
    3a7c:	a1 e2       	ldi	r26, 0x21	; 33
    3a7e:	1a 2e       	mov	r1, r26
    3a80:	aa 1b       	sub	r26, r26
    3a82:	bb 1b       	sub	r27, r27
    3a84:	fd 01       	movw	r30, r26
    3a86:	0d c0       	rjmp	.+26     	; 0x3aa2 <__udivmodsi4_ep>

00003a88 <__udivmodsi4_loop>:
    3a88:	aa 1f       	adc	r26, r26
    3a8a:	bb 1f       	adc	r27, r27
    3a8c:	ee 1f       	adc	r30, r30
    3a8e:	ff 1f       	adc	r31, r31
    3a90:	a2 17       	cp	r26, r18
    3a92:	b3 07       	cpc	r27, r19
    3a94:	e4 07       	cpc	r30, r20
    3a96:	f5 07       	cpc	r31, r21
    3a98:	20 f0       	brcs	.+8      	; 0x3aa2 <__udivmodsi4_ep>
    3a9a:	a2 1b       	sub	r26, r18
    3a9c:	b3 0b       	sbc	r27, r19
    3a9e:	e4 0b       	sbc	r30, r20
    3aa0:	f5 0b       	sbc	r31, r21

00003aa2 <__udivmodsi4_ep>:
    3aa2:	66 1f       	adc	r22, r22
    3aa4:	77 1f       	adc	r23, r23
    3aa6:	88 1f       	adc	r24, r24
    3aa8:	99 1f       	adc	r25, r25
    3aaa:	1a 94       	dec	r1
    3aac:	69 f7       	brne	.-38     	; 0x3a88 <__udivmodsi4_loop>
    3aae:	60 95       	com	r22
    3ab0:	70 95       	com	r23
    3ab2:	80 95       	com	r24
    3ab4:	90 95       	com	r25
    3ab6:	9b 01       	movw	r18, r22
    3ab8:	ac 01       	movw	r20, r24
    3aba:	bd 01       	movw	r22, r26
    3abc:	cf 01       	movw	r24, r30
    3abe:	08 95       	ret

00003ac0 <__prologue_saves__>:
    3ac0:	2f 92       	push	r2
    3ac2:	3f 92       	push	r3
    3ac4:	4f 92       	push	r4
    3ac6:	5f 92       	push	r5
    3ac8:	6f 92       	push	r6
    3aca:	7f 92       	push	r7
    3acc:	8f 92       	push	r8
    3ace:	9f 92       	push	r9
    3ad0:	af 92       	push	r10
    3ad2:	bf 92       	push	r11
    3ad4:	cf 92       	push	r12
    3ad6:	df 92       	push	r13
    3ad8:	ef 92       	push	r14
    3ada:	ff 92       	push	r15
    3adc:	0f 93       	push	r16
    3ade:	1f 93       	push	r17
    3ae0:	cf 93       	push	r28
    3ae2:	df 93       	push	r29
    3ae4:	cd b7       	in	r28, 0x3d	; 61
    3ae6:	de b7       	in	r29, 0x3e	; 62
    3ae8:	ca 1b       	sub	r28, r26
    3aea:	db 0b       	sbc	r29, r27
    3aec:	0f b6       	in	r0, 0x3f	; 63
    3aee:	f8 94       	cli
    3af0:	de bf       	out	0x3e, r29	; 62
    3af2:	0f be       	out	0x3f, r0	; 63
    3af4:	cd bf       	out	0x3d, r28	; 61
    3af6:	09 94       	ijmp

00003af8 <__epilogue_restores__>:
    3af8:	2a 88       	ldd	r2, Y+18	; 0x12
    3afa:	39 88       	ldd	r3, Y+17	; 0x11
    3afc:	48 88       	ldd	r4, Y+16	; 0x10
    3afe:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b00:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b02:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b04:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b06:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b08:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b0a:	b9 84       	ldd	r11, Y+9	; 0x09
    3b0c:	c8 84       	ldd	r12, Y+8	; 0x08
    3b0e:	df 80       	ldd	r13, Y+7	; 0x07
    3b10:	ee 80       	ldd	r14, Y+6	; 0x06
    3b12:	fd 80       	ldd	r15, Y+5	; 0x05
    3b14:	0c 81       	ldd	r16, Y+4	; 0x04
    3b16:	1b 81       	ldd	r17, Y+3	; 0x03
    3b18:	aa 81       	ldd	r26, Y+2	; 0x02
    3b1a:	b9 81       	ldd	r27, Y+1	; 0x01
    3b1c:	ce 0f       	add	r28, r30
    3b1e:	d1 1d       	adc	r29, r1
    3b20:	0f b6       	in	r0, 0x3f	; 63
    3b22:	f8 94       	cli
    3b24:	de bf       	out	0x3e, r29	; 62
    3b26:	0f be       	out	0x3f, r0	; 63
    3b28:	cd bf       	out	0x3d, r28	; 61
    3b2a:	ed 01       	movw	r28, r26
    3b2c:	08 95       	ret

00003b2e <strcmp>:
    3b2e:	fb 01       	movw	r30, r22
    3b30:	dc 01       	movw	r26, r24
    3b32:	8d 91       	ld	r24, X+
    3b34:	01 90       	ld	r0, Z+
    3b36:	80 19       	sub	r24, r0
    3b38:	01 10       	cpse	r0, r1
    3b3a:	d9 f3       	breq	.-10     	; 0x3b32 <strcmp+0x4>
    3b3c:	99 0b       	sbc	r25, r25
    3b3e:	08 95       	ret

00003b40 <strcpy>:
    3b40:	fb 01       	movw	r30, r22
    3b42:	dc 01       	movw	r26, r24
    3b44:	01 90       	ld	r0, Z+
    3b46:	0d 92       	st	X+, r0
    3b48:	00 20       	and	r0, r0
    3b4a:	e1 f7       	brne	.-8      	; 0x3b44 <strcpy+0x4>
    3b4c:	08 95       	ret

00003b4e <_exit>:
    3b4e:	f8 94       	cli

00003b50 <__stop_program>:
    3b50:	ff cf       	rjmp	.-2      	; 0x3b50 <__stop_program>
